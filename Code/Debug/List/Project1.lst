
AVRASM ver. 2.1.30  D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm Fri Feb 09 08:29:38 2024

D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1085): warning: Register r4 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1086): warning: Register r3 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1087): warning: Register r6 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1091): warning: Register r10 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1093): warning: Register r12 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1095): warning: Register r14 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _prev_sec=R4
                 	.DEF _sec=R3
                 	.DEF _min=R6
                 	.DEF _hour=R5
                 	.DEF _day=R8
                 	.DEF _date=R7
                 	.DEF _month=R10
                 	.DEF _year=R9
                 	.DEF _a_sec=R12
                 	.DEF _a_min=R11
                 	.DEF _a_hour=R14
                 	.DEF _a_day=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00aa 	JMP  __RESET
000002 940c 01a4 	JMP  _ext_int0_isr
000004 940c 02aa 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0183 	JMP  _pin_change_isr2
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 6363
000035 6363      	.DB  0x63,0x63,0x63,0x63
                 
                 _0x3:
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1140): warning: .cseg .db misalignment - padding zero byte
000036 0063      	.DB  0x63
                 _0x4:
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1142): warning: .cseg .db misalignment - padding zero byte
000037 0063      	.DB  0x63
                 _0x5:
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1144): warning: .cseg .db misalignment - padding zero byte
000038 0064      	.DB  0x64
                 _0x7:
000039 0300
00003a 0304
00003b 0308
00003c 030c      	.DB  LOW(_0x6),HIGH(_0x6),LOW(_0x6+4),HIGH(_0x6+4),LOW(_0x6+8),HIGH(_0x6+8),LOW(_0x6+12),HIGH(_0x6+12)
00003d 0310
00003e 0314
00003f 0318      	.DB  LOW(_0x6+16),HIGH(_0x6+16),LOW(_0x6+20),HIGH(_0x6+20),LOW(_0x6+24),HIGH(_0x6+24)
                 _0x8:
000040 0001
000041 0000
000042 0001
000043 0000      	.DB  0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0
000044 0001
000045 0000
000046 0001
000047 0001      	.DB  0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x0
000048 0000
000049 0001
00004a 0000
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1151): warning: .cseg .db misalignment - padding zero byte
00004b 0001      	.DB  0x0,0x0,0x1,0x0,0x0,0x0,0x1
                 _0x0:
00004c 6153
00004d 0074
00004e 7553
00004f 006e      	.DB  0x53,0x61,0x74,0x0,0x53,0x75,0x6E,0x0
000050 6f4d
000051 006e
000052 7554
000053 0065      	.DB  0x4D,0x6F,0x6E,0x0,0x54,0x75,0x65,0x0
000054 6557
000055 0064
000056 6854
000057 0075      	.DB  0x57,0x65,0x64,0x0,0x54,0x68,0x75,0x0
000058 7246
000059 0069
00005a 4120
00005b 204d      	.DB  0x46,0x72,0x69,0x0,0x20,0x41,0x4D,0x20
00005c 203a
00005d 2000
00005e 4d50
00005f 3a20      	.DB  0x3A,0x20,0x0,0x20,0x50,0x4D,0x20,0x3A
000060 0020
000061 4c41
000062 5241
000063 004d      	.DB  0x20,0x0,0x41,0x4C,0x41,0x52,0x4D,0x0
                 
                 __GLOBAL_INI_TBL:
000064 0004      	.DW  0x04
000065 000b      	.DW  0x0B
000066 0068      	.DW  __REG_VARS*2
                 
000067 0001      	.DW  0x01
000068 034c      	.DW  _a_date
000069 006c      	.DW  _0x3*2
                 
00006a 0001      	.DW  0x01
00006b 034d      	.DW  _a_month
00006c 006e      	.DW  _0x4*2
                 
00006d 0001      	.DW  0x01
00006e 034e      	.DW  _a_year
00006f 0070      	.DW  _0x5*2
                 
000070 0004      	.DW  0x04
000071 0300      	.DW  _0x6
000072 0098      	.DW  _0x0*2
                 
000073 0004      	.DW  0x04
000074 0304      	.DW  _0x6+4
000075 009c      	.DW  _0x0*2+4
                 
000076 0004      	.DW  0x04
000077 0308      	.DW  _0x6+8
000078 00a0      	.DW  _0x0*2+8
                 
000079 0004      	.DW  0x04
00007a 030c      	.DW  _0x6+12
00007b 00a4      	.DW  _0x0*2+12
                 
00007c 0004      	.DW  0x04
00007d 0310      	.DW  _0x6+16
00007e 00a8      	.DW  _0x0*2+16
                 
00007f 0004      	.DW  0x04
000080 0314      	.DW  _0x6+20
000081 00ac      	.DW  _0x0*2+20
                 
000082 0004      	.DW  0x04
000083 0318      	.DW  _0x6+24
000084 00b0      	.DW  _0x0*2+24
                 
000085 000e      	.DW  0x0E
000086 0350      	.DW  _dayOfWeek
000087 0072      	.DW  _0x7*2
                 
000088 0017      	.DW  0x17
000089 035e      	.DW  _dayOfMonth
00008a 0080      	.DW  _0x8*2
                 
00008b 0007      	.DW  0x07
00008c 031c      	.DW  _0xC
00008d 00b4      	.DW  _0x0*2+28
                 
00008e 0007      	.DW  0x07
00008f 0323      	.DW  _0xC+7
000090 00bb      	.DW  _0x0*2+35
                 
000091 0004      	.DW  0x04
000092 032a      	.DW  _0xC+14
000093 00b7      	.DW  _0x0*2+31
                 
000094 0004      	.DW  0x04
000095 032e      	.DW  _0x18
000096 00b7      	.DW  _0x0*2+31
                 
000097 0004      	.DW  0x04
000098 0332      	.DW  _0x18+4
000099 00b7      	.DW  _0x0*2+31
                 
00009a 0004      	.DW  0x04
00009b 0336      	.DW  _0x18+8
00009c 00b7      	.DW  _0x0*2+31
                 
00009d 0004      	.DW  0x04
00009e 033a      	.DW  _0x4F
00009f 00b7      	.DW  _0x0*2+31
                 
0000a0 0004      	.DW  0x04
0000a1 033e      	.DW  _0x4F+4
0000a2 00b7      	.DW  _0x0*2+31
                 
0000a3 0004      	.DW  0x04
0000a4 0342      	.DW  _0x4F+8
0000a5 00b7      	.DW  _0x0*2+31
                 
0000a6 0006      	.DW  0x06
0000a7 0346      	.DW  _0x8B
0000a8 00c2      	.DW  _0x0*2+42
                 
                 _0xFFFFFFFF:
0000a9 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000aa 94f8      	CLI
0000ab 27ee      	CLR  R30
0000ac bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ad e0f1      	LDI  R31,1
0000ae bff5      	OUT  MCUCR,R31
0000af bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000b0 e08d      	LDI  R24,(14-2)+1
0000b1 e0a2      	LDI  R26,2
0000b2 27bb      	CLR  R27
                 __CLEAR_REG:
0000b3 93ed      	ST   X+,R30
0000b4 958a      	DEC  R24
0000b5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b7 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b8 e0a0      	LDI  R26,LOW(__SRAM_START)
0000b9 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000ba 93ed      	ST   X+,R30
0000bb 9701      	SBIW R24,1
0000bc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000bd ece8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000be e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000bf 9185      	LPM  R24,Z+
0000c0 9195      	LPM  R25,Z+
0000c1 9700      	SBIW R24,0
0000c2 f061      	BREQ __GLOBAL_INI_END
0000c3 91a5      	LPM  R26,Z+
0000c4 91b5      	LPM  R27,Z+
0000c5 9005      	LPM  R0,Z+
0000c6 9015      	LPM  R1,Z+
0000c7 01bf      	MOVW R22,R30
0000c8 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c9 9005      	LPM  R0,Z+
0000ca 920d      	ST   X+,R0
0000cb 9701      	SBIW R24,1
0000cc f7e1      	BRNE __GLOBAL_INI_LOOP
0000cd 01fb      	MOVW R30,R22
0000ce cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000cf e0e0      	LDI  R30,__GPIOR0_INIT
0000d0 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000d1 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000d2 bfed      	OUT  SPL,R30
0000d3 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000d4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000d5 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d6 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d7 940c 0396 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;unsigned char prev_sec;
                 ;unsigned char sec, min, hour, day, date, month, year;
                 ;unsigned char a_sec = 99, a_min = 99, a_hour = 99, a_day = 99, a_date = 99, a_mo ...
                 
                 	.DSEG
                 ;unsigned char flag = 0;
                 ;unsigned char* dayOfWeek[] = {"Sat","Sun", "Mon", "Tue", "Wed", "Thu", "Fri"};
                 _0x6:
000300           	.BYTE 0x1C
                 ;unsigned int dayOfMonth[] = {1,0,1,0,1,0,1,1,0,1,0,1};
                 ;char change_mode = 0;
                 ;unsigned char address;
                 ;unsigned int do_am, nhiet_do;
                 ;void display(){
                 ; 0000 003A void display(){
                 
                 	.CSEG
                 _display:
                 ; .FSTART _display
                 ; 0000 003B // CHAY CA 2 TRUOC -> KHONG BI GHI DE DU LIEU KHI XAY RA NGAT
                 ; 0000 003C // tinh toan do am
                 ; 0000 003D #asm("cli")
0000d9 94f8      	CLI
                 ; 0000 003E do_am = (-6 + 125 * (SHT20_Read_RH()*1.0f / 65536));
0000da 940e 0875 	CALL _SHT20_Read_RH
0000dc 2766      	CLR  R22
0000dd 2777      	CLR  R23
0000de 940e 0db0 	CALL __CDF1
                +
0000e0 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0000e1 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0000e2 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0000e3 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0000e4 940e 0929 	CALL SUBOPT_0x0
                +
0000e6 e0a0     +LDI R26 , LOW ( 0x42FA0000 )
0000e7 e0b0     +LDI R27 , HIGH ( 0x42FA0000 )
0000e8 ef8a     +LDI R24 , BYTE3 ( 0x42FA0000 )
0000e9 e492     +LDI R25 , BYTE4 ( 0x42FA0000 )
                 	__GETD2N 0x42FA0000
0000ea 940e 0e32 	CALL __MULF12
                +
0000ec e0a0     +LDI R26 , LOW ( 0xC0C00000 )
0000ed e0b0     +LDI R27 , HIGH ( 0xC0C00000 )
0000ee ec80     +LDI R24 , BYTE3 ( 0xC0C00000 )
0000ef ec90     +LDI R25 , BYTE4 ( 0xC0C00000 )
                 	__GETD2N 0xC0C00000
0000f0 940e 0de3 	CALL __ADDF12
0000f2 e7a8      	LDI  R26,LOW(_do_am)
0000f3 e0b3      	LDI  R27,HIGH(_do_am)
0000f4 940e 0934 	CALL SUBOPT_0x1
                 ; 0000 003F delay_ms(1);
                 ; 0000 0040 // tinh toan nhiet do
                 ; 0000 0041 nhiet_do = (-46.85 + 0.17572 * (SHT20_Read_T() * 1000.0f / 65536.0)) * 1000;
0000f6 940e 0894 	CALL _SHT20_Read_T
0000f8 2766      	CLR  R22
0000f9 2777      	CLR  R23
0000fa 940e 0db0 	CALL __CDF1
                +
0000fc e0a0     +LDI R26 , LOW ( 0x447A0000 )
0000fd e0b0     +LDI R27 , HIGH ( 0x447A0000 )
0000fe e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
0000ff e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
000100 940e 0929 	CALL SUBOPT_0x0
                +
000102 efa2     +LDI R26 , LOW ( 0x3E33EFF2 )
000103 eebf     +LDI R27 , HIGH ( 0x3E33EFF2 )
000104 e383     +LDI R24 , BYTE3 ( 0x3E33EFF2 )
000105 e39e     +LDI R25 , BYTE4 ( 0x3E33EFF2 )
                 	__GETD2N 0x3E33EFF2
000106 940e 0e32 	CALL __MULF12
                +
000108 e6a6     +LDI R26 , LOW ( 0xC23B6666 )
000109 e6b6     +LDI R27 , HIGH ( 0xC23B6666 )
00010a e38b     +LDI R24 , BYTE3 ( 0xC23B6666 )
00010b ec92     +LDI R25 , BYTE4 ( 0xC23B6666 )
                 	__GETD2N 0xC23B6666
00010c 940e 0de3 	CALL __ADDF12
                +
00010e e0a0     +LDI R26 , LOW ( 0x447A0000 )
00010f e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000110 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
000111 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
000112 940e 0e32 	CALL __MULF12
000114 e7aa      	LDI  R26,LOW(_nhiet_do)
000115 e0b3      	LDI  R27,HIGH(_nhiet_do)
000116 940e 0934 	CALL SUBOPT_0x1
                 ; 0000 0042 delay_ms(1);
                 ; 0000 0043 DS1307_Get_Date(&day, &date, &month, &year);
000118 940e 093c 	CALL SUBOPT_0x2
                 ; 0000 0044 delay_ms(1);
00011a 940e 094c 	CALL SUBOPT_0x3
                 ; 0000 0045 DS1307_Get_Time(&sec, &min, &hour, &flag);
00011c 940e 0950 	CALL SUBOPT_0x4
                 ; 0000 0046 delay_ms(1);
00011e 940e 094c 	CALL SUBOPT_0x3
                 ; 0000 0047 #asm("sei")
000120 9478      	SEI
                 ; 0000 0048 
                 ; 0000 0049 if(prev_sec != sec){
000121 1434      	CP   R3,R4
000122 f409      	BRNE PC+2
000123 c05d      	RJMP _0x9
                 ; 0000 004A Lcd_Cmd(_LCD_CLEAR);
000124 e0a1      	LDI  R26,LOW(1)
000125 940e 0810 	CALL _Lcd_Cmd
                 ; 0000 004B if(change_mode < 2){
000127 91a0 0376 	LDS  R26,_change_mode
000129 30a2      	CPI  R26,LOW(0x2)
00012a f4f8      	BRSH _0xA
                 ; 0000 004C Lcd_Chr(1,1, date/10+0x30);
00012b 940e 0960 	CALL SUBOPT_0x5
00012d 940e 0964 	CALL SUBOPT_0x6
                 ; 0000 004D Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 004E Lcd_Chr_Cp('/');
                 ; 0000 004F Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 0050 Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 0051 Lcd_Chr_Cp('/');
                 ; 0000 0052 Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 0053 Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 0054 Lcd_Chr_Cp(' ');
                 ; 0000 0055 Lcd_Out_Cp(dayOfWeek[day%7]);
00012f 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 0056 
                 ; 0000 0057 
                 ; 0000 0058 Lcd_Chr(2,1, hour/10+0x30);
000131 940e 09bb 	CALL SUBOPT_0x8
000133 940e 09c0 	CALL SUBOPT_0x9
                 ; 0000 0059 Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 005A if(flag == 1)
000135 91a0 034f 	LDS  R26,_flag
000137 30a1      	CPI  R26,LOW(0x1)
000138 f419      	BRNE _0xB
                 ; 0000 005B Lcd_Out_Cp(" AM : ");
                +
000139 e1ac     +LDI R26 , LOW ( _0xC + ( 0 ) )
00013a e0b3     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
00013b c009      	RJMP _0x96
                 ; 0000 005C else if (flag == 2)
                 _0xB:
00013c 91a0 034f 	LDS  R26,_flag
00013e 30a2      	CPI  R26,LOW(0x2)
00013f f419      	BRNE _0xE
                 ; 0000 005D Lcd_Out_Cp(" PM : ");
                +
000140 e2a3     +LDI R26 , LOW ( _0xC + ( 7 ) )
000141 e0b3     +LDI R27 , HIGH ( _0xC + ( 7 ) )
                 	__POINTW2MN _0xC,7
000142 c002      	RJMP _0x96
                 ; 0000 005E else
                 _0xE:
                 ; 0000 005F Lcd_Out_Cp(" : ");
                +
000143 e2aa     +LDI R26 , LOW ( _0xC + ( 14 ) )
000144 e0b3     +LDI R27 , HIGH ( _0xC + ( 14 ) )
                 	__POINTW2MN _0xC,14
                 _0x96:
000145 940e 084a 	CALL _Lcd_Out_Cp
                 ; 0000 0060 Lcd_Chr_Cp(min/10+0x30);
000147 940e 09d4 	CALL SUBOPT_0xA
                 ; 0000 0061 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 0062 Lcd_Chr_Cp(' ');
                 ; 0000 0063 Lcd_Chr_Cp(':');
                 ; 0000 0064 Lcd_Chr_Cp(' ');
                 ; 0000 0065 Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 0066 Lcd_Chr_Cp(sec%10+0x30);
000149 c035      	RJMP _0x97
                 ; 0000 0067 }
                 ; 0000 0068 else{
                 _0xA:
                 ; 0000 0069 
                 ; 0000 006A Lcd_Chr(1,1,nhiet_do/10000 + 0x30);
00014a 940e 0960 	CALL SUBOPT_0x5
00014c 940e 0a04 	CALL SUBOPT_0xB
00014e 940e 0a09 	CALL SUBOPT_0xC
                 ; 0000 006B Lcd_Chr_Cp(nhiet_do/1000 % 10 + 0x30);
000150 940e 0a04 	CALL SUBOPT_0xB
000152 940e 0a11 	CALL SUBOPT_0xD
                 ; 0000 006C Lcd_Chr_Cp('.');
000154 e2ae      	LDI  R26,LOW(46)
000155 940e 0a1e 	CALL SUBOPT_0xE
                 ; 0000 006D Lcd_Chr_Cp(nhiet_do/100 % 10 + 0x30);
000157 940e 0a21 	CALL SUBOPT_0xF
000159 940e 0a1e 	CALL SUBOPT_0xE
                 ; 0000 006E Lcd_Chr_Cp(nhiet_do/10 % 10 + 0x30);
00015b 940e 0a2d 	CALL SUBOPT_0x10
00015d 940e 0a1e 	CALL SUBOPT_0xE
                 ; 0000 006F Lcd_Chr_Cp(nhiet_do%10 + 0x30);
00015f 940e 0a39 	CALL SUBOPT_0x11
                 ; 0000 0070 Lcd_Chr_Cp('C');
000161 e4a3      	LDI  R26,LOW(67)
000162 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 0071 
                 ; 0000 0072 Lcd_Chr(2,1,do_am/10000 + 0x30);
000164 940e 09bb 	CALL SUBOPT_0x8
000166 940e 0a41 	CALL SUBOPT_0x12
000168 940e 0a09 	CALL SUBOPT_0xC
                 ; 0000 0073 Lcd_Chr_Cp(do_am/1000 % 10 + 0x30);
00016a 940e 0a41 	CALL SUBOPT_0x12
00016c 940e 0a11 	CALL SUBOPT_0xD
                 ; 0000 0074 Lcd_Chr_Cp(do_am/100 % 10 + 0x30);
00016e 940e 0a41 	CALL SUBOPT_0x12
000170 940e 0a21 	CALL SUBOPT_0xF
000172 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 0075 Lcd_Chr_Cp(do_am/10 % 10 + 0x30);
000174 940e 0a41 	CALL SUBOPT_0x12
000176 940e 0a2d 	CALL SUBOPT_0x10
000178 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 0076 Lcd_Chr_Cp(do_am%10 + 0x30);
00017a 940e 0a41 	CALL SUBOPT_0x12
00017c 940e 0a39 	CALL SUBOPT_0x11
                 ; 0000 0077 Lcd_Chr_Cp('%');
00017e e2a5      	LDI  R26,LOW(37)
                 _0x97:
00017f 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 0078 }
                 ; 0000 0079 }
                 ; 0000 007A prev_sec = sec;
                 _0x9:
000181 2c43      	MOV  R4,R3
                 ; 0000 007B }
000182 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
00031c           	.BYTE 0x12
                 ;interrupt [PC_INT2] void pin_change_isr2(void)
                 ; 0000 0080 {
                 
                 	.CSEG
                 _pin_change_isr2:
                 ; .FSTART _pin_change_isr2
000183 940e 0a46 	CALL SUBOPT_0x13
                 ; 0000 0081 // Place your code here
                 ; 0000 0082 delay_ms(20);
000185 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 0083 while(MODE == 0);
                 _0x11:
000187 9b4f      	SBIS 0x9,7
000188 cffe      	RJMP _0x11
                 ; 0000 0084 if(change_mode == 2){
000189 91a0 0376 	LDS  R26,_change_mode
00018b 30a2      	CPI  R26,LOW(0x2)
00018c f421      	BRNE _0x14
                 ; 0000 0085 change_mode = -1;
00018d efef      	LDI  R30,LOW(255)
00018e 93e0 0376 	STS  _change_mode,R30
                 ; 0000 0086 adjust();
000190 c004      	RJMP _0x98
                 ; 0000 0087 }
                 ; 0000 0088 else if(change_mode == 0){
                 _0x14:
000191 91e0 0376 	LDS  R30,_change_mode
000193 30e0      	CPI  R30,0
000194 f409      	BRNE _0x16
                 ; 0000 0089 adjust();
                 _0x98:
000195 d2b3      	RCALL _adjust
                 ; 0000 008A }
                 ; 0000 008B Lcd_Cmd(_LCD_CLEAR);
                 _0x16:
000196 e0a1      	LDI  R26,LOW(1)
000197 940e 0810 	CALL _Lcd_Cmd
                 ; 0000 008C change_mode ++;
000199 91e0 0376 	LDS  R30,_change_mode
00019b 5fef      	SUBI R30,-LOW(1)
00019c 93e0 0376 	STS  _change_mode,R30
                 ; 0000 008D delay_ms(50);
00019e 940e 0a58 	CALL SUBOPT_0x15
                 ; 0000 008E Lcd_Cmd(_LCD_CLEAR);
0001a0 e0a1      	LDI  R26,LOW(1)
0001a1 940e 0810 	CALL _Lcd_Cmd
                 ; 0000 008F }
0001a3 c1e4      	RJMP _0xA5
                 ; .FEND
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0094 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0001a4 940e 0a46 	CALL SUBOPT_0x13
                 ; 0000 0095 // Place your code here
                 ; 0000 0096 // Bien thay doi vi tri
                 ; 0000 0097 int inOrde;
                 ; 0000 0098 int position = 1;
                 ; 0000 0099 unsigned char row = 0;
                 ; 0000 009A unsigned char max_day = 30;
                 ; 0000 009B 
                 ; 0000 009C // Bien dung doi sang bcd
                 ; 0000 009D unsigned char bcd_convert;
                 ; 0000 009E unsigned char t;
                 ; 0000 009F 
                 ; 0000 00A0 delay_ms(20);
0001a6 9722      	SBIW R28,2
0001a7 940e 0a5c 	CALL SUBOPT_0x16
                 ;	inOrde -> R16,R17
                 ;	position -> R18,R19
                 ;	row -> R21
                 ;	max_day -> R20
                 ;	bcd_convert -> Y+7
                 ;	t -> Y+6
                 ; 0000 00A1 if(change_mode != 0){
0001a9 91e0 0376 	LDS  R30,_change_mode
0001ab 30e0      	CPI  R30,0
0001ac f011      	BREQ _0x17
                 ; 0000 00A2 //        if(change_mode == 1){
                 ; 0000 00A3 //            adjust();
                 ; 0000 00A4 //        }
                 ; 0000 00A5 //        else{
                 ; 0000 00A6 //            adjust();
                 ; 0000 00A7 //        }
                 ; 0000 00A8 adjust();
0001ad 940e 0a62 	CALL SUBOPT_0x17
                 ; 0000 00A9 flag = 0;
                 ; 0000 00AA change_mode = 0;
                 ; 0000 00AB }
                 ; 0000 00AC 
                 ; 0000 00AD Lcd_Cmd(_LCD_CLEAR);
                 _0x17:
0001af e0a1      	LDI  R26,LOW(1)
0001b0 940e 0810 	CALL _Lcd_Cmd
                 ; 0000 00AE 
                 ; 0000 00AF DS1307_Get_Date(&day, &date, &month, &year);
0001b2 940e 093c 	CALL SUBOPT_0x2
                 ; 0000 00B0 Lcd_Chr(1,1, date/10+0x30);
0001b4 940e 0960 	CALL SUBOPT_0x5
0001b6 940e 0964 	CALL SUBOPT_0x6
                 ; 0000 00B1 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 00B2 Lcd_Chr_Cp('/');
                 ; 0000 00B3 Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 00B4 Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 00B5 Lcd_Chr_Cp('/');
                 ; 0000 00B6 Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 00B7 Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 00B8 Lcd_Chr_Cp(' ');
                 ; 0000 00B9 Lcd_Out_Cp(dayOfWeek[day%7]);
0001b8 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 00BA 
                 ; 0000 00BB DS1307_Get_Time(&sec, &min, &hour, &flag);
0001ba 940e 0950 	CALL SUBOPT_0x4
                 ; 0000 00BC Lcd_Chr(2,1, hour/10+0x30);
0001bc 940e 09bb 	CALL SUBOPT_0x8
0001be 940e 09c0 	CALL SUBOPT_0x9
                 ; 0000 00BD Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 00BE Lcd_Out_Cp(" : ");
                +
0001c0 e2ae     +LDI R26 , LOW ( _0x18 + ( 0 ) )
0001c1 e0b3     +LDI R27 , HIGH ( _0x18 + ( 0 ) )
                 	__POINTW2MN _0x18,0
0001c2 940e 0a6a 	CALL SUBOPT_0x18
                 ; 0000 00BF Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 00C0 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 00C1 Lcd_Chr_Cp(' ');
                 ; 0000 00C2 Lcd_Chr_Cp(':');
                 ; 0000 00C3 Lcd_Chr_Cp(' ');
                 ; 0000 00C4 Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 00C5 Lcd_Chr_Cp(sec%10+0x30);
0001c4 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 00C6 
                 ; 0000 00C7 Lcd_Cmd(_LCD_FIRST_ROW); // _LCD_FIRST_ROW
0001c6 940e 0a6d 	CALL SUBOPT_0x19
                 ; 0000 00C8 Lcd_Cmd(_LCD_BLINK_CURSOR_ON); // _LCD_BLINK_CURSOR_ON
                 ; 0000 00C9 position = 1;
                 ; 0000 00CA while(CHANGE_MODE == 0){
                 _0x19:
0001c8 994a      	SBIC 0x9,2
0001c9 c0b2      	RJMP _0x1B
                 ; 0000 00CB if(LEN == 0){
0001ca 994d      	SBIC 0x9,5
0001cb c006      	RJMP _0x1C
                 ; 0000 00CC delay_ms(20);
0001cc 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 00CD row = 0;
0001ce 940e 0a76 	CALL SUBOPT_0x1A
                 ; 0000 00CE 
                 ; 0000 00CF address = 0x80 + position - 1;
                 ; 0000 00D0 Lcd_Cmd(address);
                 ; 0000 00D1 
                 ; 0000 00D2 while(LEN == 0);
                 _0x1D:
0001d0 9b4d      	SBIS 0x9,5
0001d1 cffe      	RJMP _0x1D
                 ; 0000 00D3 }
                 ; 0000 00D4 if(XUONG == 0){
                 _0x1C:
0001d2 994e      	SBIC 0x9,6
0001d3 c006      	RJMP _0x20
                 ; 0000 00D5 delay_ms(20);
0001d4 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 00D6 row = 1;
0001d6 940e 0a7f 	CALL SUBOPT_0x1B
                 ; 0000 00D7 
                 ; 0000 00D8 address = 0xC0 + position - 1;
                 ; 0000 00D9 Lcd_Cmd(address);
                 ; 0000 00DA 
                 ; 0000 00DB while(XUONG == 0);
                 _0x21:
0001d8 9b4e      	SBIS 0x9,6
0001d9 cffe      	RJMP _0x21
                 ; 0000 00DC }
                 ; 0000 00DD if(RIGHT == 0){
                 _0x20:
0001da 994c      	SBIC 0x9,4
0001db c019      	RJMP _0x24
                 ; 0000 00DE delay_ms(20);
0001dc 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 00DF if(position > 0){
0001de 2400      	CLR  R0
0001df 1602      	CP   R0,R18
0001e0 0603      	CPC  R0,R19
0001e1 f48c      	BRGE _0x25
                 ; 0000 00E0 position ++;
                +
0001e2 5f2f     +SUBI R18 , LOW ( - 1 )
0001e3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00E1 if(row == 0){
0001e4 3050      	CPI  R21,0
0001e5 f419      	BRNE _0x26
                 ; 0000 00E2 address = 0x80 + position - 1;
0001e6 2fe2      	MOV  R30,R18
0001e7 58e1      	SUBI R30,-LOW(127)
0001e8 c002      	RJMP _0x99
                 ; 0000 00E3 }
                 ; 0000 00E4 else{
                 _0x26:
                 ; 0000 00E5 address = 0xC0 + position - 1;
0001e9 2fe2      	MOV  R30,R18
0001ea 54e1      	SUBI R30,-LOW(191)
                 _0x99:
0001eb 93e0 0377 	STS  _address,R30
                 ; 0000 00E6 }
                 ; 0000 00E7 if(position <= 16){
                +
0001ed 3121     +CPI R18 , LOW ( 17 )
0001ee e0e0     +LDI R30 , HIGH ( 17 )
0001ef 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
0001f0 f414      	BRGE _0x28
                 ; 0000 00E8 Lcd_Cmd(address);
0001f1 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 00E9 }
                 ; 0000 00EA }
                 _0x28:
                 ; 0000 00EB while(RIGHT == 0);
                 _0x25:
                 _0x29:
0001f3 9b4c      	SBIS 0x9,4
0001f4 cffe      	RJMP _0x29
                 ; 0000 00EC }
                 ; 0000 00ED if(LEFT == 0){
                 _0x24:
0001f5 9933      	SBIC 0x6,3
0001f6 c01b      	RJMP _0x2C
                 ; 0000 00EE delay_ms(20);
0001f7 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 00EF if(position > 1){
                +
0001f9 3022     +CPI R18 , LOW ( 2 )
0001fa e0e0     +LDI R30 , HIGH ( 2 )
0001fb 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0001fc f09c      	BRLT _0x2D
                 ; 0000 00F0 position --;
                +
0001fd 5021     +SUBI R18 , LOW ( 1 )
0001fe 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 00F1 if(position < 1)
                +
0001ff 3021     +CPI R18 , LOW ( 1 )
000200 e0e0     +LDI R30 , HIGH ( 1 )
000201 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
000202 f414      	BRGE _0x2E
                 ; 0000 00F2 position = 1;
                +
000203 e021     +LDI R18 , LOW ( 1 )
000204 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00F3 if(row == 0){
                 _0x2E:
000205 3050      	CPI  R21,0
000206 f419      	BRNE _0x2F
                 ; 0000 00F4 address = 0x80 + position - 1;
000207 2fe2      	MOV  R30,R18
000208 58e1      	SUBI R30,-LOW(127)
000209 c002      	RJMP _0x9A
                 ; 0000 00F5 }
                 ; 0000 00F6 else{
                 _0x2F:
                 ; 0000 00F7 address = 0xC0 + position - 1;
00020a 2fe2      	MOV  R30,R18
00020b 54e1      	SUBI R30,-LOW(191)
                 _0x9A:
00020c 93e0 0377 	STS  _address,R30
                 ; 0000 00F8 }
                 ; 0000 00F9 Lcd_Cmd(address);
00020e 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 00FA }
                 ; 0000 00FB while(LEFT == 0);
                 _0x2D:
                 _0x31:
000210 9b33      	SBIS 0x6,3
000211 cffe      	RJMP _0x31
                 ; 0000 00FC }
                 ; 0000 00FD 
                 ; 0000 00FE 
                 ; 0000 00FF 
                 ; 0000 0100 if(row == 0){
                 _0x2C:
000212 3050      	CPI  R21,0
000213 f589      	BRNE _0x34
                 ; 0000 0101 max_day = dayOfMonth[month-1] + 30;
000214 940e 0a8c 	CALL SUBOPT_0x1D
                 ; 0000 0102 if(TANG == 0){
000216 9931      	SBIC 0x6,1
000217 c015      	RJMP _0x35
                 ; 0000 0103 inOrde = 1;
                +
000218 e001     +LDI R16 , LOW ( 1 )
000219 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0104 DS1307_Set_Date(&day, &date, &month, &year, max_day, position, inOrde);
00021a 940e 0a99 	CALL SUBOPT_0x1E
                 ; 0000 0105 
                 ; 0000 0106 Lcd_Chr(1,1, date/10+0x30);
00021c 940e 0964 	CALL SUBOPT_0x6
                 ; 0000 0107 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 0108 Lcd_Chr_Cp('/');
                 ; 0000 0109 Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 010A Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 010B Lcd_Chr_Cp('/');
                 ; 0000 010C Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 010D Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 010E Lcd_Chr_Cp(' ');
                 ; 0000 010F Lcd_Out_Cp(dayOfWeek[day%7]);
00021e 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 0110 
                 ; 0000 0111 if(row == 0){
000220 3050      	CPI  R21,0
000221 f419      	BRNE _0x36
                 ; 0000 0112 address = 0x80 + position - 1;
000222 2fe2      	MOV  R30,R18
000223 58e1      	SUBI R30,-LOW(127)
000224 c002      	RJMP _0x9B
                 ; 0000 0113 }
                 ; 0000 0114 else{
                 _0x36:
                 ; 0000 0115 address = 0xC0 + position - 1;
000225 2fe2      	MOV  R30,R18
000226 54e1      	SUBI R30,-LOW(191)
                 _0x9B:
000227 93e0 0377 	STS  _address,R30
                 ; 0000 0116 }
                 ; 0000 0117 Lcd_Cmd(address);
000229 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0118 
                 ; 0000 0119 while(TANG == 0);
                 _0x38:
00022b 9b31      	SBIS 0x6,1
00022c cffe      	RJMP _0x38
                 ; 0000 011A }
                 ; 0000 011B 
                 ; 0000 011C if(GIAM == 0){
                 _0x35:
00022d 9932      	SBIC 0x6,2
00022e c015      	RJMP _0x3B
                 ; 0000 011D inOrde = 0;
                +
00022f e000     +LDI R16 , LOW ( 0 )
000230 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 011E DS1307_Set_Date(&day, &date, &month, &year, max_day, position, inOrde);
000231 940e 0a99 	CALL SUBOPT_0x1E
                 ; 0000 011F 
                 ; 0000 0120 Lcd_Chr(1,1, date/10+0x30);
000233 940e 0964 	CALL SUBOPT_0x6
                 ; 0000 0121 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 0122 Lcd_Chr_Cp('/');
                 ; 0000 0123 Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 0124 Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 0125 Lcd_Chr_Cp('/');
                 ; 0000 0126 Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 0127 Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 0128 Lcd_Chr_Cp(' ');
                 ; 0000 0129 Lcd_Out_Cp(dayOfWeek[day%7]);
000235 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 012A 
                 ; 0000 012B if(row == 0){
000237 3050      	CPI  R21,0
000238 f419      	BRNE _0x3C
                 ; 0000 012C address = 0x80 + position - 1;
000239 2fe2      	MOV  R30,R18
00023a 58e1      	SUBI R30,-LOW(127)
00023b c002      	RJMP _0x9C
                 ; 0000 012D }
                 ; 0000 012E else{
                 _0x3C:
                 ; 0000 012F address = 0xC0 + position - 1;
00023c 2fe2      	MOV  R30,R18
00023d 54e1      	SUBI R30,-LOW(191)
                 _0x9C:
00023e 93e0 0377 	STS  _address,R30
                 ; 0000 0130 }
                 ; 0000 0131 Lcd_Cmd(address);
000240 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0132 
                 ; 0000 0133 while(GIAM == 0);
                 _0x3E:
000242 9b32      	SBIS 0x6,2
000243 cffe      	RJMP _0x3E
                 ; 0000 0134 }
                 ; 0000 0135 }
                 _0x3B:
                 ; 0000 0136 
                 ; 0000 0137 else{
000244 c036      	RJMP _0x41
                 _0x34:
                 ; 0000 0138 if(TANG == 0){
000245 9931      	SBIC 0x6,1
000246 c019      	RJMP _0x42
                 ; 0000 0139 inOrde = 1;
                +
000247 e001     +LDI R16 , LOW ( 1 )
000248 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 013A DS1307_Set_Time(&sec, &min, &hour, position, inOrde);
000249 940e 0ab0 	CALL SUBOPT_0x1F
                 ; 0000 013B 
                 ; 0000 013C Lcd_Chr(2,1, hour/10+0x30);
00024b 940e 09c0 	CALL SUBOPT_0x9
                 ; 0000 013D Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 013E Lcd_Out_Cp(" : ");
                +
00024d e3a2     +LDI R26 , LOW ( _0x18 + ( 4 ) )
00024e e0b3     +LDI R27 , HIGH ( _0x18 + ( 4 ) )
                 	__POINTW2MN _0x18,4
00024f 940e 0a6a 	CALL SUBOPT_0x18
                 ; 0000 013F Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 0140 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 0141 Lcd_Chr_Cp(' ');
                 ; 0000 0142 Lcd_Chr_Cp(':');
                 ; 0000 0143 Lcd_Chr_Cp(' ');
                 ; 0000 0144 Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 0145 Lcd_Chr_Cp(sec%10+0x30);
000251 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 0146 
                 ; 0000 0147 if(row == 0){
000253 3050      	CPI  R21,0
000254 f419      	BRNE _0x43
                 ; 0000 0148 address = 0x80 + position - 1;
000255 2fe2      	MOV  R30,R18
000256 58e1      	SUBI R30,-LOW(127)
000257 c002      	RJMP _0x9D
                 ; 0000 0149 }
                 ; 0000 014A else{
                 _0x43:
                 ; 0000 014B address = 0xC0 + position - 1;
000258 2fe2      	MOV  R30,R18
000259 54e1      	SUBI R30,-LOW(191)
                 _0x9D:
00025a 93e0 0377 	STS  _address,R30
                 ; 0000 014C }
                 ; 0000 014D Lcd_Cmd(address);
00025c 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 014E 
                 ; 0000 014F while(TANG == 0);
                 _0x45:
00025e 9b31      	SBIS 0x6,1
00025f cffe      	RJMP _0x45
                 ; 0000 0150 }
                 ; 0000 0151 if(GIAM == 0){
                 _0x42:
000260 9932      	SBIC 0x6,2
000261 c019      	RJMP _0x48
                 ; 0000 0152 inOrde = 0;
                +
000262 e000     +LDI R16 , LOW ( 0 )
000263 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0153 DS1307_Set_Time(&sec, &min, &hour, position, inOrde);
000264 940e 0ab0 	CALL SUBOPT_0x1F
                 ; 0000 0154 
                 ; 0000 0155 Lcd_Chr(2,1, hour/10+0x30);
000266 940e 09c0 	CALL SUBOPT_0x9
                 ; 0000 0156 Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 0157 Lcd_Out_Cp(" : ");
                +
000268 e3a6     +LDI R26 , LOW ( _0x18 + ( 8 ) )
000269 e0b3     +LDI R27 , HIGH ( _0x18 + ( 8 ) )
                 	__POINTW2MN _0x18,8
00026a 940e 0a6a 	CALL SUBOPT_0x18
                 ; 0000 0158 Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 0159 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 015A Lcd_Chr_Cp(' ');
                 ; 0000 015B Lcd_Chr_Cp(':');
                 ; 0000 015C Lcd_Chr_Cp(' ');
                 ; 0000 015D Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 015E Lcd_Chr_Cp(sec%10+0x30);
00026c 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 015F 
                 ; 0000 0160 if(row == 0){
00026e 3050      	CPI  R21,0
00026f f419      	BRNE _0x49
                 ; 0000 0161 address = 0x80 + position - 1;
000270 2fe2      	MOV  R30,R18
000271 58e1      	SUBI R30,-LOW(127)
000272 c002      	RJMP _0x9E
                 ; 0000 0162 }
                 ; 0000 0163 else{
                 _0x49:
                 ; 0000 0164 address = 0xC0 + position - 1;
000273 2fe2      	MOV  R30,R18
000274 54e1      	SUBI R30,-LOW(191)
                 _0x9E:
000275 93e0 0377 	STS  _address,R30
                 ; 0000 0165 }
                 ; 0000 0166 Lcd_Cmd(address);
000277 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0167 
                 ; 0000 0168 while(GIAM == 0);
                 _0x4B:
000279 9b32      	SBIS 0x6,2
00027a cffe      	RJMP _0x4B
                 ; 0000 0169 }
                 ; 0000 016A }
                 _0x48:
                 _0x41:
                 ; 0000 016B }
00027b cf4c      	RJMP _0x19
                 _0x1B:
                 ; 0000 016C 
                 ; 0000 016D // Doi sang BCD r chuyen cho DS1307
                 ; 0000 016E t = sec;
                +
00027c 823e     +STD Y + 6 , R3
                 	__PUTBSR 3,6
                 ; 0000 016F bcd_convert = t / 10;
00027d 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 0170 bcd_convert <<= 4;
                 ; 0000 0171 bcd_convert |= t%10;
                 ; 0000 0172 DS1307_Receive(0, bcd_convert);
00027f e0e0      	LDI  R30,LOW(0)
000280 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 0173 
                 ; 0000 0174 t = min;
                +
000282 826e     +STD Y + 6 , R6
                 	__PUTBSR 6,6
                 ; 0000 0175 bcd_convert = t / 10;
000283 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 0176 bcd_convert <<= 4;
                 ; 0000 0177 bcd_convert |= t%10;
                 ; 0000 0178 DS1307_Receive(1, bcd_convert);
000285 e0e1      	LDI  R30,LOW(1)
000286 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 0179 
                 ; 0000 017A t = hour;
                +
000288 825e     +STD Y + 6 , R5
                 	__PUTBSR 5,6
                 ; 0000 017B bcd_convert = t / 10;
000289 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 017C bcd_convert <<= 4;
                 ; 0000 017D bcd_convert |= t%10;
                 ; 0000 017E DS1307_Receive(2, bcd_convert);
00028b e0e2      	LDI  R30,LOW(2)
00028c 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 017F 
                 ; 0000 0180 t = day;
                +
00028e 828e     +STD Y + 6 , R8
                 	__PUTBSR 8,6
                 ; 0000 0181 bcd_convert = t / 10;
00028f 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 0182 bcd_convert <<= 4;
                 ; 0000 0183 bcd_convert |= t%10;
                 ; 0000 0184 DS1307_Receive(3, bcd_convert);
000291 e0e3      	LDI  R30,LOW(3)
000292 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 0185 
                 ; 0000 0186 t = date;
                +
000294 827e     +STD Y + 6 , R7
                 	__PUTBSR 7,6
                 ; 0000 0187 bcd_convert = t / 10;
000295 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 0188 bcd_convert <<= 4;
                 ; 0000 0189 bcd_convert |= t%10;
                 ; 0000 018A DS1307_Receive(4, bcd_convert);
000297 e0e4      	LDI  R30,LOW(4)
000298 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 018B 
                 ; 0000 018C t = month;
                +
00029a 82ae     +STD Y + 6 , R10
                 	__PUTBSR 10,6
                 ; 0000 018D bcd_convert = t / 10;
00029b 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 018E bcd_convert <<= 4;
                 ; 0000 018F bcd_convert |= t%10;
                 ; 0000 0190 DS1307_Receive(5, bcd_convert);
00029d e0e5      	LDI  R30,LOW(5)
00029e 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 0191 
                 ; 0000 0192 t = year;
                +
0002a0 829e     +STD Y + 6 , R9
                 	__PUTBSR 9,6
                 ; 0000 0193 bcd_convert = t / 10;
0002a1 940e 0ac2 	CALL SUBOPT_0x20
                 ; 0000 0194 bcd_convert <<= 4;
                 ; 0000 0195 bcd_convert |= t%10;
                 ; 0000 0196 DS1307_Receive(6, bcd_convert);
0002a3 e0e6      	LDI  R30,LOW(6)
0002a4 940e 0ad6 	CALL SUBOPT_0x21
                 ; 0000 0197 
                 ; 0000 0198 Lcd_Cmd(_LCD_CURSOR_OFF); // _LCD_CURSOR_OFF
0002a6 940e 0ada 	CALL SUBOPT_0x22
                 ; 0000 0199 Lcd_Cmd(_LCD_CLEAR);
                 ; 0000 019A }
0002a8 9628      	ADIW R28,8
0002a9 c0de      	RJMP _0xA5
                 ; .FEND
                 
                 	.DSEG
                 _0x18:
00032e           	.BYTE 0xC
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 019F {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0002aa 940e 0a46 	CALL SUBOPT_0x13
                 ; 0000 01A0 // Place your code here
                 ; 0000 01A1 // Bien thay doi vi tri
                 ; 0000 01A2 int inOrde;
                 ; 0000 01A3 int position = 1;
                 ; 0000 01A4 unsigned char row = 0;
                 ; 0000 01A5 unsigned char max_day = 30;
                 ; 0000 01A6 
                 ; 0000 01A7 
                 ; 0000 01A8 delay_ms(20);
0002ac 940e 0a5c 	CALL SUBOPT_0x16
                 ;	inOrde -> R16,R17
                 ;	position -> R18,R19
                 ;	row -> R21
                 ;	max_day -> R20
                 ; 0000 01A9 if(change_mode != 0){
0002ae 91e0 0376 	LDS  R30,_change_mode
0002b0 30e0      	CPI  R30,0
0002b1 f011      	BREQ _0x4E
                 ; 0000 01AA adjust();
0002b2 940e 0a62 	CALL SUBOPT_0x17
                 ; 0000 01AB flag = 0;
                 ; 0000 01AC change_mode = 0;
                 ; 0000 01AD }
                 ; 0000 01AE 
                 ; 0000 01AF Lcd_Cmd(_LCD_CLEAR);
                 _0x4E:
0002b4 e0a1      	LDI  R26,LOW(1)
0002b5 940e 0810 	CALL _Lcd_Cmd
                 ; 0000 01B0 
                 ; 0000 01B1 DS1307_Get_Date(&day, &date, &month, &year);
0002b7 940e 093c 	CALL SUBOPT_0x2
                 ; 0000 01B2 Lcd_Chr(1,1, date/10+0x30);
0002b9 940e 0960 	CALL SUBOPT_0x5
0002bb 940e 0964 	CALL SUBOPT_0x6
                 ; 0000 01B3 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 01B4 Lcd_Chr_Cp('/');
                 ; 0000 01B5 Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 01B6 Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 01B7 Lcd_Chr_Cp('/');
                 ; 0000 01B8 Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 01B9 Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 01BA Lcd_Chr_Cp(' ');
                 ; 0000 01BB Lcd_Out_Cp(dayOfWeek[day%7]);
0002bd 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 01BC 
                 ; 0000 01BD DS1307_Get_Time(&sec, &min, &hour, &flag);
0002bf 940e 0950 	CALL SUBOPT_0x4
                 ; 0000 01BE Lcd_Chr(2,1, hour/10+0x30);
0002c1 940e 09bb 	CALL SUBOPT_0x8
0002c3 940e 09c0 	CALL SUBOPT_0x9
                 ; 0000 01BF Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 01C0 Lcd_Out_Cp(" : ");
                +
0002c5 e3aa     +LDI R26 , LOW ( _0x4F + ( 0 ) )
0002c6 e0b3     +LDI R27 , HIGH ( _0x4F + ( 0 ) )
                 	__POINTW2MN _0x4F,0
0002c7 940e 0a6a 	CALL SUBOPT_0x18
                 ; 0000 01C1 Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 01C2 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 01C3 Lcd_Chr_Cp(' ');
                 ; 0000 01C4 Lcd_Chr_Cp(':');
                 ; 0000 01C5 Lcd_Chr_Cp(' ');
                 ; 0000 01C6 Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 01C7 Lcd_Chr_Cp(sec%10+0x30);
0002c9 940e 0829 	CALL _Lcd_Chr_Cp
                 ; 0000 01C8 
                 ; 0000 01C9 a_sec = sec;
0002cb 2cc3      	MOV  R12,R3
                 ; 0000 01CA a_min = min;
0002cc 2cb6      	MOV  R11,R6
                 ; 0000 01CB a_hour = hour;
0002cd 2ce5      	MOV  R14,R5
                 ; 0000 01CC a_day = day;
0002ce 2cd8      	MOV  R13,R8
                 ; 0000 01CD a_date = date;
0002cf 9270 034c 	STS  _a_date,R7
                 ; 0000 01CE a_month = month;
0002d1 92a0 034d 	STS  _a_month,R10
                 ; 0000 01CF a_year = year;
0002d3 9290 034e 	STS  _a_year,R9
                 ; 0000 01D0 
                 ; 0000 01D1 Lcd_Cmd(_LCD_FIRST_ROW); // _LCD_FIRST_ROW
0002d5 940e 0a6d 	CALL SUBOPT_0x19
                 ; 0000 01D2 Lcd_Cmd(_LCD_BLINK_CURSOR_ON); // _LCD_BLINK_CURSOR_ON
                 ; 0000 01D3 position = 1;
                 ; 0000 01D4 while(ALARM_MODE == 0){
                 _0x50:
0002d7 994b      	SBIC 0x9,3
0002d8 c0ac      	RJMP _0x52
                 ; 0000 01D5 if(LEN == 0){
0002d9 994d      	SBIC 0x9,5
0002da c006      	RJMP _0x53
                 ; 0000 01D6 delay_ms(20);
0002db 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 01D7 row = 0;
0002dd 940e 0a76 	CALL SUBOPT_0x1A
                 ; 0000 01D8 
                 ; 0000 01D9 address = 0x80 + position - 1;
                 ; 0000 01DA Lcd_Cmd(address);
                 ; 0000 01DB 
                 ; 0000 01DC while(LEN == 0);
                 _0x54:
0002df 9b4d      	SBIS 0x9,5
0002e0 cffe      	RJMP _0x54
                 ; 0000 01DD }
                 ; 0000 01DE if(XUONG == 0){
                 _0x53:
0002e1 994e      	SBIC 0x9,6
0002e2 c006      	RJMP _0x57
                 ; 0000 01DF delay_ms(20);
0002e3 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 01E0 row = 1;
0002e5 940e 0a7f 	CALL SUBOPT_0x1B
                 ; 0000 01E1 
                 ; 0000 01E2 address = 0xC0 + position - 1;
                 ; 0000 01E3 Lcd_Cmd(address);
                 ; 0000 01E4 
                 ; 0000 01E5 while(XUONG == 0);
                 _0x58:
0002e7 9b4e      	SBIS 0x9,6
0002e8 cffe      	RJMP _0x58
                 ; 0000 01E6 }
                 ; 0000 01E7 if(RIGHT == 0){
                 _0x57:
0002e9 994c      	SBIC 0x9,4
0002ea c019      	RJMP _0x5B
                 ; 0000 01E8 delay_ms(20);
0002eb 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 01E9 if(position > 0){
0002ed 2400      	CLR  R0
0002ee 1602      	CP   R0,R18
0002ef 0603      	CPC  R0,R19
0002f0 f48c      	BRGE _0x5C
                 ; 0000 01EA position ++;
                +
0002f1 5f2f     +SUBI R18 , LOW ( - 1 )
0002f2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 01EB if(row == 0){
0002f3 3050      	CPI  R21,0
0002f4 f419      	BRNE _0x5D
                 ; 0000 01EC address = 0x80 + position - 1;
0002f5 2fe2      	MOV  R30,R18
0002f6 58e1      	SUBI R30,-LOW(127)
0002f7 c002      	RJMP _0x9F
                 ; 0000 01ED }
                 ; 0000 01EE else{
                 _0x5D:
                 ; 0000 01EF address = 0xC0 + position - 1;
0002f8 2fe2      	MOV  R30,R18
0002f9 54e1      	SUBI R30,-LOW(191)
                 _0x9F:
0002fa 93e0 0377 	STS  _address,R30
                 ; 0000 01F0 }
                 ; 0000 01F1 if(position <= 16){
                +
0002fc 3121     +CPI R18 , LOW ( 17 )
0002fd e0e0     +LDI R30 , HIGH ( 17 )
0002fe 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
0002ff f414      	BRGE _0x5F
                 ; 0000 01F2 Lcd_Cmd(address);
000300 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 01F3 }
                 ; 0000 01F4 }
                 _0x5F:
                 ; 0000 01F5 while(RIGHT == 0);
                 _0x5C:
                 _0x60:
000302 9b4c      	SBIS 0x9,4
000303 cffe      	RJMP _0x60
                 ; 0000 01F6 }
                 ; 0000 01F7 if(LEFT == 0){
                 _0x5B:
000304 9933      	SBIC 0x6,3
000305 c01b      	RJMP _0x63
                 ; 0000 01F8 delay_ms(20);
000306 940e 0a54 	CALL SUBOPT_0x14
                 ; 0000 01F9 if(position > 1){
                +
000308 3022     +CPI R18 , LOW ( 2 )
000309 e0e0     +LDI R30 , HIGH ( 2 )
00030a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
00030b f09c      	BRLT _0x64
                 ; 0000 01FA position --;
                +
00030c 5021     +SUBI R18 , LOW ( 1 )
00030d 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 01FB if(position < 1)
                +
00030e 3021     +CPI R18 , LOW ( 1 )
00030f e0e0     +LDI R30 , HIGH ( 1 )
000310 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
000311 f414      	BRGE _0x65
                 ; 0000 01FC position = 1;
                +
000312 e021     +LDI R18 , LOW ( 1 )
000313 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 01FD if(row == 0){
                 _0x65:
000314 3050      	CPI  R21,0
000315 f419      	BRNE _0x66
                 ; 0000 01FE address = 0x80 + position - 1;
000316 2fe2      	MOV  R30,R18
000317 58e1      	SUBI R30,-LOW(127)
000318 c002      	RJMP _0xA0
                 ; 0000 01FF }
                 ; 0000 0200 else{
                 _0x66:
                 ; 0000 0201 address = 0xC0 + position - 1;
000319 2fe2      	MOV  R30,R18
00031a 54e1      	SUBI R30,-LOW(191)
                 _0xA0:
00031b 93e0 0377 	STS  _address,R30
                 ; 0000 0202 }
                 ; 0000 0203 Lcd_Cmd(address);
00031d 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0204 }
                 ; 0000 0205 while(LEFT == 0);
                 _0x64:
                 _0x68:
00031f 9b33      	SBIS 0x6,3
000320 cffe      	RJMP _0x68
                 ; 0000 0206 }
                 ; 0000 0207 
                 ; 0000 0208 
                 ; 0000 0209 
                 ; 0000 020A if(row == 0){
                 _0x63:
000321 3050      	CPI  R21,0
000322 f589      	BRNE _0x6B
                 ; 0000 020B max_day = dayOfMonth[month-1] + 30;
000323 940e 0a8c 	CALL SUBOPT_0x1D
                 ; 0000 020C if(TANG == 0){
000325 9931      	SBIC 0x6,1
000326 c015      	RJMP _0x6C
                 ; 0000 020D inOrde = 1;
                +
000327 e001     +LDI R16 , LOW ( 1 )
000328 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 020E DS1307_Set_Date(&a_day, &a_date, &a_month, &a_year, max_day, position, inOrde);
000329 940e 0ae2 	CALL SUBOPT_0x23
                 ; 0000 020F 
                 ; 0000 0210 Lcd_Chr(1,1, a_date/10+0x30);
00032b 940e 0af9 	CALL SUBOPT_0x24
                 ; 0000 0211 Lcd_Chr_Cp(a_date%10+0x30);
                 ; 0000 0212 Lcd_Chr_Cp('/');
                 ; 0000 0213 Lcd_Chr_Cp(a_month/10+0x30);
                 ; 0000 0214 Lcd_Chr_Cp(a_month%10+0x30);
                 ; 0000 0215 Lcd_Chr_Cp('/');
                 ; 0000 0216 Lcd_Chr_Cp(a_year/10+0x30);
                 ; 0000 0217 Lcd_Chr_Cp(a_year%10+0x30);
                 ; 0000 0218 Lcd_Chr_Cp(' ');
                 ; 0000 0219 Lcd_Out_Cp(dayOfWeek[a_day%7]);
00032d 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 021A 
                 ; 0000 021B if(row == 0){
00032f 3050      	CPI  R21,0
000330 f419      	BRNE _0x6D
                 ; 0000 021C address = 0x80 + position - 1;
000331 2fe2      	MOV  R30,R18
000332 58e1      	SUBI R30,-LOW(127)
000333 c002      	RJMP _0xA1
                 ; 0000 021D }
                 ; 0000 021E else{
                 _0x6D:
                 ; 0000 021F address = 0xC0 + position - 1;
000334 2fe2      	MOV  R30,R18
000335 54e1      	SUBI R30,-LOW(191)
                 _0xA1:
000336 93e0 0377 	STS  _address,R30
                 ; 0000 0220 }
                 ; 0000 0221 Lcd_Cmd(address);
000338 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0222 
                 ; 0000 0223 while(TANG == 0);
                 _0x6F:
00033a 9b31      	SBIS 0x6,1
00033b cffe      	RJMP _0x6F
                 ; 0000 0224 }
                 ; 0000 0225 
                 ; 0000 0226 if(GIAM == 0){
                 _0x6C:
00033c 9932      	SBIC 0x6,2
00033d c015      	RJMP _0x72
                 ; 0000 0227 inOrde = 0;
                +
00033e e000     +LDI R16 , LOW ( 0 )
00033f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0228 DS1307_Set_Date(&a_day, &a_date, &a_month, &a_year, max_day, position, inOrde);
000340 940e 0ae2 	CALL SUBOPT_0x23
                 ; 0000 0229 
                 ; 0000 022A Lcd_Chr(1,1, a_date/10+0x30);
000342 940e 0af9 	CALL SUBOPT_0x24
                 ; 0000 022B Lcd_Chr_Cp(a_date%10+0x30);
                 ; 0000 022C Lcd_Chr_Cp('/');
                 ; 0000 022D Lcd_Chr_Cp(a_month/10+0x30);
                 ; 0000 022E Lcd_Chr_Cp(a_month%10+0x30);
                 ; 0000 022F Lcd_Chr_Cp('/');
                 ; 0000 0230 Lcd_Chr_Cp(a_year/10+0x30);
                 ; 0000 0231 Lcd_Chr_Cp(a_year%10+0x30);
                 ; 0000 0232 Lcd_Chr_Cp(' ');
                 ; 0000 0233 Lcd_Out_Cp(dayOfWeek[a_day%7]);
000344 940e 09ac 	CALL SUBOPT_0x7
                 ; 0000 0234 
                 ; 0000 0235 if(row == 0){
000346 3050      	CPI  R21,0
000347 f419      	BRNE _0x73
                 ; 0000 0236 address = 0x80 + position - 1;
000348 2fe2      	MOV  R30,R18
000349 58e1      	SUBI R30,-LOW(127)
00034a c002      	RJMP _0xA2
                 ; 0000 0237 }
                 ; 0000 0238 else{
                 _0x73:
                 ; 0000 0239 address = 0xC0 + position - 1;
00034b 2fe2      	MOV  R30,R18
00034c 54e1      	SUBI R30,-LOW(191)
                 _0xA2:
00034d 93e0 0377 	STS  _address,R30
                 ; 0000 023A }
                 ; 0000 023B Lcd_Cmd(address);
00034f 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 023C 
                 ; 0000 023D while(GIAM == 0);
                 _0x75:
000351 9b32      	SBIS 0x6,2
000352 cffe      	RJMP _0x75
                 ; 0000 023E }
                 ; 0000 023F }
                 _0x72:
                 ; 0000 0240 
                 ; 0000 0241 else{
000353 c030      	RJMP _0x78
                 _0x6B:
                 ; 0000 0242 if(TANG == 0){
000354 9931      	SBIC 0x6,1
000355 c016      	RJMP _0x79
                 ; 0000 0243 inOrde = 1;
                +
000356 e001     +LDI R16 , LOW ( 1 )
000357 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0244 DS1307_Set_Time(&a_sec, &a_min, &a_hour, position, inOrde);
000358 940e 0b47 	CALL SUBOPT_0x25
                 ; 0000 0245 
                 ; 0000 0246 Lcd_Chr(2,1, a_hour/10+0x30);
00035a 940e 0b59 	CALL SUBOPT_0x26
                 ; 0000 0247 Lcd_Chr_Cp(a_hour%10+0x30);
                 ; 0000 0248 Lcd_Out_Cp(" : ");
                +
00035c e3ae     +LDI R26 , LOW ( _0x4F + ( 4 ) )
00035d e0b3     +LDI R27 , HIGH ( _0x4F + ( 4 ) )
                 	__POINTW2MN _0x4F,4
00035e 940e 0b6d 	CALL SUBOPT_0x27
                 ; 0000 0249 Lcd_Chr_Cp(a_min/10+0x30);
                 ; 0000 024A Lcd_Chr_Cp(a_min%10+0x30);
                 ; 0000 024B Lcd_Chr_Cp(' ');
                 ; 0000 024C Lcd_Chr_Cp(':');
                 ; 0000 024D Lcd_Chr_Cp(' ');
                 ; 0000 024E Lcd_Chr_Cp(a_sec/10+0x30);
                 ; 0000 024F Lcd_Chr_Cp(a_sec%10+0x30);
                 ; 0000 0250 
                 ; 0000 0251 if(row == 0){
000360 f419      	BRNE _0x7A
                 ; 0000 0252 address = 0x80 + position - 1;
000361 2fe2      	MOV  R30,R18
000362 58e1      	SUBI R30,-LOW(127)
000363 c002      	RJMP _0xA3
                 ; 0000 0253 }
                 ; 0000 0254 else{
                 _0x7A:
                 ; 0000 0255 address = 0xC0 + position - 1;
000364 2fe2      	MOV  R30,R18
000365 54e1      	SUBI R30,-LOW(191)
                 _0xA3:
000366 93e0 0377 	STS  _address,R30
                 ; 0000 0256 }
                 ; 0000 0257 Lcd_Cmd(address);
000368 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0258 
                 ; 0000 0259 while(TANG == 0);
                 _0x7C:
00036a 9b31      	SBIS 0x6,1
00036b cffe      	RJMP _0x7C
                 ; 0000 025A }
                 ; 0000 025B if(GIAM == 0){
                 _0x79:
00036c 9932      	SBIC 0x6,2
00036d c016      	RJMP _0x7F
                 ; 0000 025C inOrde = 0;
                +
00036e e000     +LDI R16 , LOW ( 0 )
00036f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 025D DS1307_Set_Time(&a_sec, &a_min, &a_hour, position, inOrde);
000370 940e 0b47 	CALL SUBOPT_0x25
                 ; 0000 025E 
                 ; 0000 025F Lcd_Chr(2,1, a_hour/10+0x30);
000372 940e 0b59 	CALL SUBOPT_0x26
                 ; 0000 0260 Lcd_Chr_Cp(a_hour%10+0x30);
                 ; 0000 0261 Lcd_Out_Cp(" : ");
                +
000374 e4a2     +LDI R26 , LOW ( _0x4F + ( 8 ) )
000375 e0b3     +LDI R27 , HIGH ( _0x4F + ( 8 ) )
                 	__POINTW2MN _0x4F,8
000376 940e 0b6d 	CALL SUBOPT_0x27
                 ; 0000 0262 Lcd_Chr_Cp(a_min/10+0x30);
                 ; 0000 0263 Lcd_Chr_Cp(a_min%10+0x30);
                 ; 0000 0264 Lcd_Chr_Cp(' ');
                 ; 0000 0265 Lcd_Chr_Cp(':');
                 ; 0000 0266 Lcd_Chr_Cp(' ');
                 ; 0000 0267 Lcd_Chr_Cp(a_sec/10+0x30);
                 ; 0000 0268 Lcd_Chr_Cp(a_sec%10+0x30);
                 ; 0000 0269 
                 ; 0000 026A if(row == 0){
000378 f419      	BRNE _0x80
                 ; 0000 026B address = 0x80 + position - 1;
000379 2fe2      	MOV  R30,R18
00037a 58e1      	SUBI R30,-LOW(127)
00037b c002      	RJMP _0xA4
                 ; 0000 026C }
                 ; 0000 026D else{
                 _0x80:
                 ; 0000 026E address = 0xC0 + position - 1;
00037c 2fe2      	MOV  R30,R18
00037d 54e1      	SUBI R30,-LOW(191)
                 _0xA4:
00037e 93e0 0377 	STS  _address,R30
                 ; 0000 026F }
                 ; 0000 0270 Lcd_Cmd(address);
000380 940e 0a88 	CALL SUBOPT_0x1C
                 ; 0000 0271 
                 ; 0000 0272 while(GIAM == 0);
                 _0x82:
000382 9b32      	SBIS 0x6,2
000383 cffe      	RJMP _0x82
                 ; 0000 0273 }
                 ; 0000 0274 }
                 _0x7F:
                 _0x78:
                 ; 0000 0275 }
000384 cf52      	RJMP _0x50
                 _0x52:
                 ; 0000 0276 
                 ; 0000 0277 Lcd_Cmd(_LCD_CURSOR_OFF); // _LCD_CURSOR_OFF
000385 940e 0ada 	CALL SUBOPT_0x22
                 ; 0000 0278 Lcd_Cmd(_LCD_CLEAR);
                 ; 0000 0279 }
000387 9626      	ADIW R28,6
                 _0xA5:
000388 91e9      	LD   R30,Y+
000389 bfef      	OUT  SREG,R30
00038a 91f9      	LD   R31,Y+
00038b 91e9      	LD   R30,Y+
00038c 91b9      	LD   R27,Y+
00038d 91a9      	LD   R26,Y+
00038e 9199      	LD   R25,Y+
00038f 9189      	LD   R24,Y+
000390 9179      	LD   R23,Y+
000391 9169      	LD   R22,Y+
000392 90f9      	LD   R15,Y+
000393 9019      	LD   R1,Y+
000394 9009      	LD   R0,Y+
000395 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x4F:
00033a           	.BYTE 0xC
                 ;void main(void)
                 ; 0000 027C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 027D // Declare your local variables here
                 ; 0000 027E 
                 ; 0000 027F // Crystal Oscillator division factor: 1
                 ; 0000 0280 #pragma optsize-
                 ; 0000 0281 CLKPR=(1<<CLKPCE);
000396 e8e0      	LDI  R30,LOW(128)
000397 93e0 0061 	STS  97,R30
                 ; 0000 0282 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000399 e0e0      	LDI  R30,LOW(0)
00039a 93e0 0061 	STS  97,R30
                 ; 0000 0283 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0284 #pragma optsize+
                 ; 0000 0285 #endif
                 ; 0000 0286 
                 ; 0000 0287 // Input/Output Ports initialization
                 ; 0000 0288 // Port B initialization
                 ; 0000 0289 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=O ...
                 ; 0000 028A DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1< ...
00039c e3ef      	LDI  R30,LOW(63)
00039d b9e4      	OUT  0x4,R30
                 ; 0000 028B // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 028C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
00039e e0e0      	LDI  R30,LOW(0)
00039f b9e5      	OUT  0x5,R30
                 ; 0000 028D 
                 ; 0000 028E // Port C initialization
                 ; 0000 028F // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0290 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1< ...
0003a0 e0e1      	LDI  R30,LOW(1)
0003a1 b9e7      	OUT  0x7,R30
                 ; 0000 0291 // State: Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=P Bit0=0
                 ; 0000 0292 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<< ...
0003a2 e0ee      	LDI  R30,LOW(14)
0003a3 b9e8      	OUT  0x8,R30
                 ; 0000 0293 
                 ; 0000 0294 // Port D initialization
                 ; 0000 0295 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0296 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
0003a4 e0e1      	LDI  R30,LOW(1)
0003a5 b9ea      	OUT  0xA,R30
                 ; 0000 0297 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0298 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
0003a6 e0e0      	LDI  R30,LOW(0)
0003a7 b9eb      	OUT  0xB,R30
                 ; 0000 0299 
                 ; 0000 029A // Timer/Counter 0 initialization
                 ; 0000 029B // Clock source: System Clock
                 ; 0000 029C // Clock value: Timer 0 Stopped
                 ; 0000 029D // Mode: Normal top=0xFF
                 ; 0000 029E // OC0A output: Disconnected
                 ; 0000 029F // OC0B output: Disconnected
                 ; 0000 02A0 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<< ...
0003a8 bde4      	OUT  0x24,R30
                 ; 0000 02A1 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0003a9 bde5      	OUT  0x25,R30
                 ; 0000 02A2 TCNT0=0x00;
0003aa bde6      	OUT  0x26,R30
                 ; 0000 02A3 OCR0A=0x00;
0003ab bde7      	OUT  0x27,R30
                 ; 0000 02A4 OCR0B=0x00;
0003ac bde8      	OUT  0x28,R30
                 ; 0000 02A5 
                 ; 0000 02A6 // Timer/Counter 1 initialization
                 ; 0000 02A7 // Clock source: System Clock
                 ; 0000 02A8 // Clock value: Timer1 Stopped
                 ; 0000 02A9 // Mode: Normal top=0xFFFF
                 ; 0000 02AA // OC1A output: Disconnected
                 ; 0000 02AB // OC1B output: Disconnected
                 ; 0000 02AC // Noise Canceler: Off
                 ; 0000 02AD // Input Capture on Falling Edge
                 ; 0000 02AE // Timer1 Overflow Interrupt: Off
                 ; 0000 02AF // Input Capture Interrupt: Off
                 ; 0000 02B0 // Compare A Match Interrupt: Off
                 ; 0000 02B1 // Compare B Match Interrupt: Off
                 ; 0000 02B2 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
0003ad 93e0 0080 	STS  128,R30
                 ; 0000 02B3 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
0003af 93e0 0081 	STS  129,R30
                 ; 0000 02B4 TCNT1H=0x00;
0003b1 93e0 0085 	STS  133,R30
                 ; 0000 02B5 TCNT1L=0x00;
0003b3 93e0 0084 	STS  132,R30
                 ; 0000 02B6 ICR1H=0x00;
0003b5 93e0 0087 	STS  135,R30
                 ; 0000 02B7 ICR1L=0x00;
0003b7 93e0 0086 	STS  134,R30
                 ; 0000 02B8 OCR1AH=0x00;
0003b9 93e0 0089 	STS  137,R30
                 ; 0000 02B9 OCR1AL=0x00;
0003bb 93e0 0088 	STS  136,R30
                 ; 0000 02BA OCR1BH=0x00;
0003bd 93e0 008b 	STS  139,R30
                 ; 0000 02BB OCR1BL=0x00;
0003bf 93e0 008a 	STS  138,R30
                 ; 0000 02BC 
                 ; 0000 02BD // Timer/Counter 2 initialization
                 ; 0000 02BE // Clock source: System Clock
                 ; 0000 02BF // Clock value: Timer2 Stopped
                 ; 0000 02C0 // Mode: Normal top=0xFF
                 ; 0000 02C1 // OC2A output: Disconnected
                 ; 0000 02C2 // OC2B output: Disconnected
                 ; 0000 02C3 ASSR=(0<<EXCLK) | (0<<AS2);
0003c1 93e0 00b6 	STS  182,R30
                 ; 0000 02C4 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<< ...
0003c3 93e0 00b0 	STS  176,R30
                 ; 0000 02C5 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0003c5 93e0 00b1 	STS  177,R30
                 ; 0000 02C6 TCNT2=0x00;
0003c7 93e0 00b2 	STS  178,R30
                 ; 0000 02C7 OCR2A=0x00;
0003c9 93e0 00b3 	STS  179,R30
                 ; 0000 02C8 OCR2B=0x00;
0003cb 93e0 00b4 	STS  180,R30
                 ; 0000 02C9 
                 ; 0000 02CA // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 02CB TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0003cd 93e0 006e 	STS  110,R30
                 ; 0000 02CC 
                 ; 0000 02CD // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 02CE TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0003cf 93e0 006f 	STS  111,R30
                 ; 0000 02CF 
                 ; 0000 02D0 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 02D1 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0003d1 93e0 0070 	STS  112,R30
                 ; 0000 02D2 
                 ; 0000 02D3 // External Interrupt(s) initialization
                 ; 0000 02D4 // INT0: On
                 ; 0000 02D5 // INT0 Mode: Falling Edge
                 ; 0000 02D6 // INT1: On
                 ; 0000 02D7 // INT1 Mode: Falling Edge
                 ; 0000 02D8 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 02D9 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 02DA // Interrupt on any change on pins PCINT16-23: On
                 ; 0000 02DB EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0003d3 e0ea      	LDI  R30,LOW(10)
0003d4 93e0 0069 	STS  105,R30
                 ; 0000 02DC EIMSK=(1<<INT1) | (1<<INT0);
0003d6 e0e3      	LDI  R30,LOW(3)
0003d7 bbed      	OUT  0x1D,R30
                 ; 0000 02DD EIFR=(1<<INTF1) | (1<<INTF0);
0003d8 bbec      	OUT  0x1C,R30
                 ; 0000 02DE PCICR=(1<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0003d9 e0e4      	LDI  R30,LOW(4)
0003da 93e0 0068 	STS  104,R30
                 ; 0000 02DF PCMSK2=(1<<PCINT23) | (0<<PCINT22) | (0<<PCINT21) | (0<<PCINT20) | (0<<PCINT19)  ...
0003dc e8e0      	LDI  R30,LOW(128)
0003dd 93e0 006d 	STS  109,R30
                 ; 0000 02E0 PCIFR=(1<<PCIF2) | (0<<PCIF1) | (0<<PCIF0);
0003df e0e4      	LDI  R30,LOW(4)
0003e0 bbeb      	OUT  0x1B,R30
                 ; 0000 02E1 
                 ; 0000 02E2 // USART initialization
                 ; 0000 02E3 // USART disabled
                 ; 0000 02E4 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<U ...
0003e1 e0e0      	LDI  R30,LOW(0)
0003e2 93e0 00c1 	STS  193,R30
                 ; 0000 02E5 
                 ; 0000 02E6 // Analog Comparator initialization
                 ; 0000 02E7 // Analog Comparator: Off
                 ; 0000 02E8 // The Analog Comparator's positive input is
                 ; 0000 02E9 // connected to the AIN0 pin
                 ; 0000 02EA // The Analog Comparator's negative input is
                 ; 0000 02EB // connected to the AIN1 pin
                 ; 0000 02EC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
0003e4 e8e0      	LDI  R30,LOW(128)
0003e5 bfe0      	OUT  0x30,R30
                 ; 0000 02ED ADCSRB=(0<<ACME);
0003e6 e0e0      	LDI  R30,LOW(0)
0003e7 93e0 007b 	STS  123,R30
                 ; 0000 02EE // Digital input buffer on AIN0: On
                 ; 0000 02EF // Digital input buffer on AIN1: On
                 ; 0000 02F0 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0003e9 93e0 007f 	STS  127,R30
                 ; 0000 02F1 
                 ; 0000 02F2 // ADC initialization
                 ; 0000 02F3 // ADC disabled
                 ; 0000 02F4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
0003eb 93e0 007a 	STS  122,R30
                 ; 0000 02F5 
                 ; 0000 02F6 // SPI initialization
                 ; 0000 02F7 // SPI disabled
                 ; 0000 02F8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
0003ed bdec      	OUT  0x2C,R30
                 ; 0000 02F9 
                 ; 0000 02FA // TWI initialization
                 ; 0000 02FB // TWI disabled
                 ; 0000 02FC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0003ee 93e0 00bc 	STS  188,R30
                 ; 0000 02FD 
                 ; 0000 02FE // Globally enable interrupts
                 ; 0000 02FF #asm("sei")
0003f0 9478      	SEI
                 ; 0000 0300 Lcd_Init();
0003f1 940e 07ed 	CALL _Lcd_Init
                 ; 0000 0301 I2C_Init();
0003f3 940e 08b3 	CALL _I2C_Init
                 ; 0000 0302 
                 ; 0000 0303 while (1)
                 _0x85:
                 ; 0000 0304 {
                 ; 0000 0305 // Place your code here
                 ; 0000 0306 display();
0003f5 dce3      	RCALL _display
                 ; 0000 0307 
                 ; 0000 0308 if(year == a_year && month == a_month && date == a_date && hour == a_hour && min ...
0003f6 91e0 034e 	LDS  R30,_a_year
0003f8 15e9      	CP   R30,R9
0003f9 f471      	BRNE _0x89
0003fa 91e0 034d 	LDS  R30,_a_month
0003fc 15ea      	CP   R30,R10
0003fd f451      	BRNE _0x89
0003fe 91e0 034c 	LDS  R30,_a_date
000400 15e7      	CP   R30,R7
000401 f431      	BRNE _0x89
000402 14e5      	CP   R14,R5
000403 f421      	BRNE _0x89
000404 146b      	CP   R6,R11
000405 f010      	BRLO _0x89
000406 143c      	CP   R3,R12
000407 f408      	BRSH _0x8A
                 _0x89:
000408 c02b      	RJMP _0x88
                 _0x8A:
                 ; 0000 0309 // CODE CHO ALARM
                 ; 0000 030A Lcd_Cmd(_LCD_CLEAR);
000409 e0a1      	LDI  R26,LOW(1)
00040a 940e 0810 	CALL _Lcd_Cmd
                 ; 0000 030B Lcd_Out(1, 5, "ALARM");
00040c e0e1      	LDI  R30,LOW(1)
00040d 93ea      	ST   -Y,R30
00040e e0e5      	LDI  R30,LOW(5)
00040f 93ea      	ST   -Y,R30
                +
000410 e4a6     +LDI R26 , LOW ( _0x8B + ( 0 ) )
000411 e0b3     +LDI R27 , HIGH ( _0x8B + ( 0 ) )
                 	__POINTW2MN _0x8B,0
000412 940e 085f 	CALL _Lcd_Out
                 ; 0000 030C while(TANG == 1 && GIAM == 1 && LEFT == 1 && RIGHT == 1 && LEN == 1 && XUONG ==  ...
                 _0x8C:
000414 9b31      	SBIS 0x6,1
000415 c00a      	RJMP _0x8F
000416 9b32      	SBIS 0x6,2
000417 c008      	RJMP _0x8F
000418 9b33      	SBIS 0x6,3
000419 c006      	RJMP _0x8F
00041a 9b4c      	SBIS 0x9,4
00041b c004      	RJMP _0x8F
00041c 9b4d      	SBIS 0x9,5
00041d c002      	RJMP _0x8F
00041e 994e      	SBIC 0x9,6
00041f c001      	RJMP _0x90
                 _0x8F:
000420 c007      	RJMP _0x8E
                 _0x90:
                 ; 0000 030D BUZZ = 1;
000421 9a58      	SBI  0xB,0
                 ; 0000 030E delay_ms(50);
000422 940e 0a58 	CALL SUBOPT_0x15
                 ; 0000 030F BUZZ = 0;
000424 9858      	CBI  0xB,0
                 ; 0000 0310 delay_ms(50);
000425 940e 0a58 	CALL SUBOPT_0x15
                 ; 0000 0311 }
000427 cfec      	RJMP _0x8C
                 _0x8E:
                 ; 0000 0312 a_sec = 99;
000428 e6e3      	LDI  R30,LOW(99)
000429 2ece      	MOV  R12,R30
                 ; 0000 0313 a_min = 99;
00042a 2ebe      	MOV  R11,R30
                 ; 0000 0314 a_hour = 99;
00042b 2eee      	MOV  R14,R30
                 ; 0000 0315 a_day = 99;
00042c 2ede      	MOV  R13,R30
                 ; 0000 0316 a_date = 99;
00042d 93e0 034c 	STS  _a_date,R30
                 ; 0000 0317 a_month = 99;
00042f 93e0 034d 	STS  _a_month,R30
                 ; 0000 0318 a_year = 100;
000431 e6e4      	LDI  R30,LOW(100)
000432 93e0 034e 	STS  _a_year,R30
                 ; 0000 0319 }
                 ; 0000 031A }
                 _0x88:
000434 cfc0      	RJMP _0x85
                 ; 0000 031B }
                 _0x95:
000435 cfff      	RJMP _0x95
                 ; .FEND
                 
                 	.DSEG
                 _0x8B:
000346           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void DS1307_Receive(unsigned char add, unsigned char dat){
                 ; 0001 0003 void DS1307_Receive(unsigned char add, unsigned char dat){
                 
                 	.CSEG
                 _DS1307_Receive:
                 ; .FSTART _DS1307_Receive
                 ; 0001 0004 I2C_Start();
000436 931a      	ST   -Y,R17
000437 930a      	ST   -Y,R16
000438 2f1a      	MOV  R17,R26
000439 810a      	LDD  R16,Y+2
                 ;	add -> R16
                 ;	dat -> R17
00043a 940e 0ba2 	CALL SUBOPT_0x28
                 ; 0001 0005 I2C_Send_Byte(0xD0);
                 ; 0001 0006 if(I2C_Wait_Ack() == 0){
00043c f431      	BRNE _0x20003
                 ; 0001 0007 I2C_Send_Byte(add);
00043d 2fa0      	MOV  R26,R16
00043e 940e 0ba8 	CALL SUBOPT_0x29
                 ; 0001 0008 I2C_Wait_Ack();
                 ; 0001 0009 I2C_Send_Byte(dat);
000440 2fa1      	MOV  R26,R17
000441 940e 0ba8 	CALL SUBOPT_0x29
                 ; 0001 000A I2C_Wait_Ack();
                 ; 0001 000B }
                 ; 0001 000C I2C_Stop();
                 _0x20003:
000443 940e 08be 	CALL _I2C_Stop
                 ; 0001 000D }
000445 8119      	LDD  R17,Y+1
000446 8108      	LDD  R16,Y+0
000447 9623      	ADIW R28,3
000448 9508      	RET
                 ; .FEND
                 ;void adjust(void){
                 ; 0001 000F void adjust(void){
                 _adjust:
                 ; .FSTART _adjust
                 ; 0001 0010 unsigned char t;
                 ; 0001 0011 unsigned char hour,c,dv;
                 ; 0001 0012 unsigned char p;
                 ; 0001 0013 // Lay gia tri o dia chi 0x02
                 ; 0001 0014 I2C_Start();
000449 940e 0cd4 	CALL __SAVELOCR6
                 ;	t -> R17
                 ;	hour -> R16
                 ;	c -> R19
                 ;	dv -> R18
                 ;	p -> R21
00044b 940e 0ba2 	CALL SUBOPT_0x28
                 ; 0001 0015 I2C_Send_Byte(0xD0);
                 ; 0001 0016 if(I2C_Wait_Ack() == 0){
00044d f009      	BREQ PC+2
00044e c040      	RJMP _0x20004
                 ; 0001 0017 I2C_Send_Byte(0x02);
00044f e0a2      	LDI  R26,LOW(2)
000450 940e 0ba8 	CALL SUBOPT_0x29
                 ; 0001 0018 I2C_Wait_Ack();
                 ; 0001 0019 I2C_Start();
000452 940e 0baa 	CALL SUBOPT_0x2A
                 ; 0001 001A I2C_Send_Byte(0xD1);
                 ; 0001 001B I2C_Wait_Ack();
                 ; 0001 001C hour = I2C_Read_Byte(1);
000454 e0a1      	LDI  R26,LOW(1)
000455 940e 08f3 	CALL _I2C_Read_Byte
000457 2f0e      	MOV  R16,R30
                 ; 0001 001D I2C_Stop();
000458 940e 08be 	CALL _I2C_Stop
                 ; 0001 001E 
                 ; 0001 001F 
                 ; 0001 0020 
                 ; 0001 0021 // Neu dang o che do 24 mode
                 ; 0001 0022 if(((hour>>6) & 0x01) == 0){
00045a 2fa0      	MOV  R26,R16
00045b e0b0      	LDI  R27,0
00045c e0e6      	LDI  R30,LOW(6)
00045d 940e 0cee 	CALL __ASRW12
00045f 70e1      	ANDI R30,LOW(0x1)
000460 f4a9      	BRNE _0x20005
                 ; 0001 0023 t = (hour >> 4)*10 + (hour & 0x0F);
000461 940e 0bad 	CALL SUBOPT_0x2B
                 ; 0001 0024 hour &= 0x00;
000463 7000      	ANDI R16,LOW(0)
                 ; 0001 0025 // set pm hoac am
                 ; 0001 0026 if(t >= 12){
000464 301c      	CPI  R17,12
000465 f010      	BRLO _0x20006
                 ; 0001 0027 hour |= 0x20;
000466 6200      	ORI  R16,LOW(32)
                 ; 0001 0028 }
                 ; 0001 0029 else{
000467 c001      	RJMP _0x20007
                 _0x20006:
                 ; 0001 002A hour |= 0x00;
000468 6000      	ORI  R16,LOW(0)
                 ; 0001 002B }
                 _0x20007:
                 ; 0001 002C t %= 12;
000469 2fa1      	MOV  R26,R17
00046a 27bb      	CLR  R27
00046b e0ec      	LDI  R30,LOW(12)
00046c e0f0      	LDI  R31,HIGH(12)
00046d 940e 0d2a 	CALL __MODW21
00046f 2f1e      	MOV  R17,R30
                 ; 0001 002D c = t / 10;
000470 940e 0bb9 	CALL SUBOPT_0x2C
                 ; 0001 002E c <<= 4;
                 ; 0001 002F dv = t % 10;
                 ; 0001 0030 hour |= 0x40+dv+c; // set bit6 len 1
000472 2fe2      	MOV  R30,R18
000473 5ce0      	SUBI R30,-LOW(64)
000474 0fe3      	ADD  R30,R19
000475 c014      	RJMP _0x20090
                 ; 0001 0031 
                 ; 0001 0032 DS1307_Receive(0x02, hour);
                 ; 0001 0033 }
                 ; 0001 0034 // Neu dang o che do 12 mode
                 ; 0001 0035 else{
                 _0x20005:
                 ; 0001 0036 p = ((hour>>5) & 0x01);
000476 2fe0      	MOV  R30,R16
000477 95e2      	SWAP R30
000478 70ef      	ANDI R30,0xF
000479 95e6      	LSR  R30
00047a 70e1      	ANDI R30,LOW(0x1)
00047b 2f5e      	MOV  R21,R30
                 ; 0001 0037 hour &= 0x1F;
00047c 710f      	ANDI R16,LOW(31)
                 ; 0001 0038 t = (hour >> 4)*10 + (hour & 0x0F);
00047d 940e 0bad 	CALL SUBOPT_0x2B
                 ; 0001 0039 if(p == 1){
00047f 3051      	CPI  R21,1
000480 f421      	BRNE _0x20009
                 ; 0001 003A t += 12;
000481 5f14      	SUBI R17,-LOW(12)
                 ; 0001 003B if(hour == 24){
000482 3108      	CPI  R16,24
000483 f409      	BRNE _0x2000A
                 ; 0001 003C t = 0;
000484 e010      	LDI  R17,LOW(0)
                 ; 0001 003D }
                 ; 0001 003E }
                 _0x2000A:
                 ; 0001 003F c = t / 10;
                 _0x20009:
000485 940e 0bb9 	CALL SUBOPT_0x2C
                 ; 0001 0040 c <<= 4;
                 ; 0001 0041 dv = t % 10;
                 ; 0001 0042 hour &= 0x00;
000487 7000      	ANDI R16,LOW(0)
                 ; 0001 0043 hour |= dv+c;
000488 2fe3      	MOV  R30,R19
000489 0fe2      	ADD  R30,R18
                 _0x20090:
00048a 2b0e      	OR   R16,R30
                 ; 0001 0044 DS1307_Receive(0x02, hour);
00048b e0e2      	LDI  R30,LOW(2)
00048c 93ea      	ST   -Y,R30
00048d 2fa0      	MOV  R26,R16
00048e dfa7      	RCALL _DS1307_Receive
                 ; 0001 0045 }
                 ; 0001 0046 }
                 ; 0001 0047 
                 ; 0001 0048 }
                 _0x20004:
00048f 940e 0cdb 	CALL __LOADLOCR6
000491 940c 0848 	JMP  _0x2000006
                 ; .FEND
                 ;void DS1307_Get_Time(unsigned char *sec, unsigned char *min, unsigned char *hour ...
                 ; 0001 004A void DS1307_Get_Time(unsigned char *sec, unsigned char *min, unsigned char *hour, unsigned char *flag){
                 _DS1307_Get_Time:
                 ; .FSTART _DS1307_Get_Time
                 ; 0001 004B unsigned char t_sec, t_min, t_hour;
                 ; 0001 004C unsigned char temp;
                 ; 0001 004D // Lay du lieu tu DS1307
                 ; 0001 004E I2C_Start();
000493 940e 0cd4 	CALL __SAVELOCR6
000495 01ad      	MOVW R20,R26
                 ;	*sec -> Y+10
                 ;	*min -> Y+8
                 ;	*hour -> Y+6
                 ;	*flag -> R20,R21
                 ;	t_sec -> R17
                 ;	t_min -> R16
                 ;	t_hour -> R19
                 ;	temp -> R18
000496 940e 0ba2 	CALL SUBOPT_0x28
                 ; 0001 004F I2C_Send_Byte(0xD0);
                 ; 0001 0050 if(I2C_Wait_Ack() == 0){
000498 f5d1      	BRNE _0x2000B
                 ; 0001 0051 I2C_Send_Byte(0x00); // bat dau doc tu dia chi cua sec
000499 e0a0      	LDI  R26,LOW(0)
00049a 940e 0ba8 	CALL SUBOPT_0x29
                 ; 0001 0052 I2C_Wait_Ack();
                 ; 0001 0053 I2C_Start();
00049c 940e 0baa 	CALL SUBOPT_0x2A
                 ; 0001 0054 I2C_Send_Byte(0xD1);
                 ; 0001 0055 I2C_Wait_Ack();
                 ; 0001 0056 t_sec = I2C_Read_Byte(0);
00049e 940e 0bca 	CALL SUBOPT_0x2D
                 ; 0001 0057 t_min = I2C_Read_Byte(0);
                 ; 0001 0058 t_hour = I2C_Read_Byte(1);
0004a0 e0a1      	LDI  R26,LOW(1)
0004a1 940e 08f3 	CALL _I2C_Read_Byte
0004a3 2f3e      	MOV  R19,R30
                 ; 0001 0059 I2C_Stop();
0004a4 940e 08be 	CALL _I2C_Stop
                 ; 0001 005A 
                 ; 0001 005B 
                 ; 0001 005C // Xoa cac bit du
                 ; 0001 005D t_sec &= 0x7F;
0004a6 771f      	ANDI R17,LOW(127)
                 ; 0001 005E t_min &= 0x7F;
0004a7 770f      	ANDI R16,LOW(127)
                 ; 0001 005F 
                 ; 0001 0060 // Chuyen tu BCD sang thap phan
                 ; 0001 0061 *sec =  (t_sec >> 4)*10 + (t_sec & 0x0F);
0004a8 2fe1      	MOV  R30,R17
0004a9 940e 0bd1 	CALL SUBOPT_0x2E
0004ab 2fe1      	MOV  R30,R17
0004ac 70ef      	ANDI R30,LOW(0xF)
0004ad 0fea      	ADD  R30,R26
0004ae 940e 0bd8 	CALL SUBOPT_0x2F
                 ; 0001 0062 *min = (t_min >> 4)*10 + (t_min & 0x0F);
0004b0 940e 0bdd 	CALL SUBOPT_0x30
                 ; 0001 0063 
                 ; 0001 0064 // Kiem tra mode dang hoat dong la 24 hay 12
                 ; 0001 0065 temp = ((t_hour>>6) & 0x01);
0004b2 95e2      	SWAP R30
0004b3 70ef      	ANDI R30,0xF
0004b4 95e6      	LSR  R30
0004b5 95e6      	LSR  R30
0004b6 70e1      	ANDI R30,LOW(0x1)
0004b7 2f2e      	MOV  R18,R30
                 ; 0001 0066 // Mode 12
                 ; 0001 0067 if(temp == 0x01){
0004b8 3021      	CPI  R18,1
0004b9 f481      	BRNE _0x2000C
                 ; 0001 0068 temp = ((t_hour>>5) & 0x01);
0004ba 2fe3      	MOV  R30,R19
0004bb 95e2      	SWAP R30
0004bc 70ef      	ANDI R30,0xF
0004bd 95e6      	LSR  R30
0004be 70e1      	ANDI R30,LOW(0x1)
0004bf 2f2e      	MOV  R18,R30
                 ; 0001 0069 // PM
                 ; 0001 006A if(temp == 1){
0004c0 3021      	CPI  R18,1
0004c1 f419      	BRNE _0x2000D
                 ; 0001 006B *flag = 2;
0004c2 01da      	MOVW R26,R20
0004c3 e0e2      	LDI  R30,LOW(2)
0004c4 c002      	RJMP _0x20091
                 ; 0001 006C }
                 ; 0001 006D // AM
                 ; 0001 006E else{
                 _0x2000D:
                 ; 0001 006F *flag = 1;
0004c5 01da      	MOVW R26,R20
0004c6 e0e1      	LDI  R30,LOW(1)
                 _0x20091:
0004c7 93ec      	ST   X,R30
                 ; 0001 0070 }
                 ; 0001 0071 t_hour &= 0x1F;
0004c8 713f      	ANDI R19,LOW(31)
                 ; 0001 0072 *hour = (t_hour >> 4)*10 + (t_hour & 0x0F);
0004c9 c004      	RJMP _0x20092
                 ; 0001 0073 }
                 ; 0001 0074 // Mode 24
                 ; 0001 0075 else{
                 _0x2000C:
                 ; 0001 0076 *flag = 0;
0004ca 01da      	MOVW R26,R20
0004cb e0e0      	LDI  R30,LOW(0)
0004cc 93ec      	ST   X,R30
                 ; 0001 0077 t_hour &= 0x3F;
0004cd 733f      	ANDI R19,LOW(63)
                 ; 0001 0078 *hour = (t_hour >> 4)*10 + (t_hour & 0x0F);
                 _0x20092:
0004ce 2fe3      	MOV  R30,R19
0004cf 940e 0bd1 	CALL SUBOPT_0x2E
0004d1 940e 0be5 	CALL SUBOPT_0x31
                 ; 0001 0079 }
                 ; 0001 007A }
                 ; 0001 007B }
                 _0x2000B:
0004d3 c02a      	RJMP _0x2000008
                 ; .FEND
                 ;void DS1307_Get_Date(unsigned char *day, unsigned char *date, unsigned char *mon ...
                 ; 0001 007D void DS1307_Get_Date(unsigned char *day, unsigned char *date, unsigned char *month, unsigned char *year){
                 _DS1307_Get_Date:
                 ; .FSTART _DS1307_Get_Date
                 ; 0001 007E unsigned char t_day, t_date, t_month, t_year;
                 ; 0001 007F // Lay du lieu tu DS1307
                 ; 0001 0080 I2C_Start();
0004d4 940e 0cd4 	CALL __SAVELOCR6
0004d6 01ad      	MOVW R20,R26
                 ;	*day -> Y+10
                 ;	*date -> Y+8
                 ;	*month -> Y+6
                 ;	*year -> R20,R21
                 ;	t_day -> R17
                 ;	t_date -> R16
                 ;	t_month -> R19
                 ;	t_year -> R18
0004d7 940e 0ba2 	CALL SUBOPT_0x28
                 ; 0001 0081 I2C_Send_Byte(0xD0);
                 ; 0001 0082 if(I2C_Wait_Ack() == 0){
0004d9 f521      	BRNE _0x20010
                 ; 0001 0083 I2C_Send_Byte(0x03); // bat dau doc tu dia chi cua day
0004da e0a3      	LDI  R26,LOW(3)
0004db 940e 0ba8 	CALL SUBOPT_0x29
                 ; 0001 0084 I2C_Wait_Ack();
                 ; 0001 0085 I2C_Start();
0004dd 940e 0baa 	CALL SUBOPT_0x2A
                 ; 0001 0086 I2C_Send_Byte(0xD1);
                 ; 0001 0087 I2C_Wait_Ack();
                 ; 0001 0088 t_day = I2C_Read_Byte(0);
0004df 940e 0bca 	CALL SUBOPT_0x2D
                 ; 0001 0089 t_date = I2C_Read_Byte(0);
                 ; 0001 008A t_month = I2C_Read_Byte(0);
0004e1 e0a0      	LDI  R26,LOW(0)
0004e2 940e 08f3 	CALL _I2C_Read_Byte
0004e4 2f3e      	MOV  R19,R30
                 ; 0001 008B t_year = I2C_Read_Byte(1);
0004e5 940e 0bec 	CALL SUBOPT_0x32
                 ; 0001 008C I2C_Stop();
0004e7 940e 08be 	CALL _I2C_Stop
                 ; 0001 008D 
                 ; 0001 008E // Xoa cac bit du
                 ; 0001 008F t_day &= 0x0F;
0004e9 701f      	ANDI R17,LOW(15)
                 ; 0001 0090 t_date &= 0x3F;
0004ea 730f      	ANDI R16,LOW(63)
                 ; 0001 0091 t_month &= 0x1F;
0004eb 713f      	ANDI R19,LOW(31)
                 ; 0001 0092 
                 ; 0001 0093 // Chuyen tu BCD sang thap phan
                 ; 0001 0094 *day = (t_day & 0x0F);
0004ec 2fe1      	MOV  R30,R17
0004ed 70ef      	ANDI R30,LOW(0xF)
0004ee 940e 0bd8 	CALL SUBOPT_0x2F
                 ; 0001 0095 *date = (t_date >> 4)*10 + (t_date & 0x0F);
0004f0 940e 0bdd 	CALL SUBOPT_0x30
                 ; 0001 0096 *month = (t_month >> 4)*10 + (t_month & 0x0F);
0004f2 940e 0bd1 	CALL SUBOPT_0x2E
0004f4 940e 0be5 	CALL SUBOPT_0x31
                 ; 0001 0097 *year = (t_year >> 4)*10 + (t_year & 0x0F);
0004f6 2fe2      	MOV  R30,R18
0004f7 940e 0bd1 	CALL SUBOPT_0x2E
0004f9 2fe2      	MOV  R30,R18
0004fa 70ef      	ANDI R30,LOW(0xF)
0004fb 0fea      	ADD  R30,R26
0004fc 01da      	MOVW R26,R20
0004fd 93ec      	ST   X,R30
                 ; 0001 0098 }
                 ; 0001 0099 }
                 _0x20010:
                 _0x2000008:
0004fe 940e 0cdb 	CALL __LOADLOCR6
000500 962c      	ADIW R28,12
000501 9508      	RET
                 ; .FEND
                 ;void DS1307_Set_Date(unsigned char *day, unsigned char *date, unsigned char *mon ...
                 ; 0001 009C void DS1307_Set_Date(unsigned char *day, unsigned char *date, unsigned char *month, unsigned char *year, unsigned char max_day, int position,    int inOrde){
                 _DS1307_Set_Date:
                 ; .FSTART _DS1307_Set_Date
                 ; 0001 009D if(inOrde == 1){
000502 940e 0cd4 	CALL __SAVELOCR6
000504 018d      	MOVW R16,R26
                +
000505 812e     +LDD R18 , Y + 6
000506 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
000507 8558      	LDD  R21,Y+8
                 ;	*day -> Y+15
                 ;	*date -> Y+13
                 ;	*month -> Y+11
                 ;	*year -> Y+9
                 ;	max_day -> R21
                 ;	position -> R18,R19
                 ;	inOrde -> R16,R17
000508 e0e1      	LDI  R30,LOW(1)
000509 e0f0      	LDI  R31,HIGH(1)
00050a 17e0      	CP   R30,R16
00050b 07f1      	CPC  R31,R17
00050c f009      	BREQ PC+2
00050d c0ad      	RJMP _0x20011
                 ; 0001 009E if(position == 1){
00050e 940e 0bf0 	CALL SUBOPT_0x33
000510 f4e1      	BRNE _0x20012
                 ; 0001 009F if(*date + 10 > max_day){
000511 940e 0bf5 	CALL SUBOPT_0x34
000513 963a      	ADIW R30,10
000514 01df      	MOVW R26,R30
000515 2fe5      	MOV  R30,R21
000516 e0f0      	LDI  R31,0
000517 17ea      	CP   R30,R26
000518 07fb      	CPC  R31,R27
000519 f46c      	BRGE _0x20013
                 ; 0001 00A0 *date = *date + 10 - max_day;
00051a 85ad      	LDD  R26,Y+13
00051b 85be      	LDD  R27,Y+13+1
00051c 91ec      	LD   R30,X
00051d 5fe6      	SUBI R30,-LOW(10)
00051e 940e 0bfa 	CALL SUBOPT_0x35
                 ; 0001 00A1 *month += 1;
                 ; 0001 00A2 if(*month > 12){
000520 f028      	BRLO _0x20014
                 ; 0001 00A3 *month = 1;
000521 940e 0c06 	CALL SUBOPT_0x36
                 ; 0001 00A4 *year += 1;
                 ; 0001 00A5 if(*year > 99)
000523 f010      	BRLO _0x20015
                 ; 0001 00A6 *year -= 100;
000524 940e 0c12 	CALL SUBOPT_0x37
                 ; 0001 00A7 }
                 _0x20015:
                 ; 0001 00A8 }
                 _0x20014:
                 ; 0001 00A9 else{
000526 c005      	RJMP _0x20016
                 _0x20013:
                 ; 0001 00AA *date += 10;
000527 85ad      	LDD  R26,Y+13
000528 85be      	LDD  R27,Y+13+1
000529 91ec      	LD   R30,X
00052a 5fe6      	SUBI R30,-LOW(10)
00052b 93ec      	ST   X,R30
                 ; 0001 00AB }
                 _0x20016:
                 ; 0001 00AC }
                 ; 0001 00AD else if(position == 2){
00052c c08d      	RJMP _0x20017
                 _0x20012:
00052d 940e 0c18 	CALL SUBOPT_0x38
00052f f4e1      	BRNE _0x20018
                 ; 0001 00AE if(*date + 1 > max_day){
000530 940e 0bf5 	CALL SUBOPT_0x34
000532 9631      	ADIW R30,1
000533 01df      	MOVW R26,R30
000534 2fe5      	MOV  R30,R21
000535 e0f0      	LDI  R31,0
000536 17ea      	CP   R30,R26
000537 07fb      	CPC  R31,R27
000538 f46c      	BRGE _0x20019
                 ; 0001 00AF *date = *date + 1 - max_day;
000539 85ad      	LDD  R26,Y+13
00053a 85be      	LDD  R27,Y+13+1
00053b 91ec      	LD   R30,X
00053c 5fef      	SUBI R30,-LOW(1)
00053d 940e 0bfa 	CALL SUBOPT_0x35
                 ; 0001 00B0 *month += 1;
                 ; 0001 00B1 if(*month > 12){
00053f f028      	BRLO _0x2001A
                 ; 0001 00B2 *month = 1;
000540 940e 0c06 	CALL SUBOPT_0x36
                 ; 0001 00B3 *year += 1;
                 ; 0001 00B4 if(*year > 99)
000542 f010      	BRLO _0x2001B
                 ; 0001 00B5 *year -= 100;
000543 940e 0c12 	CALL SUBOPT_0x37
                 ; 0001 00B6 }
                 _0x2001B:
                 ; 0001 00B7 }
                 _0x2001A:
                 ; 0001 00B8 else{
000545 c005      	RJMP _0x2001C
                 _0x20019:
                 ; 0001 00B9 *date += 1;
000546 85ad      	LDD  R26,Y+13
000547 85be      	LDD  R27,Y+13+1
000548 91ec      	LD   R30,X
000549 5fef      	SUBI R30,-LOW(1)
00054a 93ec      	ST   X,R30
                 ; 0001 00BA }
                 _0x2001C:
                 ; 0001 00BB }
                 ; 0001 00BC else if(position == 4){
00054b c06e      	RJMP _0x2001D
                 _0x20018:
00054c e0e4      	LDI  R30,LOW(4)
00054d e0f0      	LDI  R31,HIGH(4)
00054e 17e2      	CP   R30,R18
00054f 07f3      	CPC  R31,R19
000550 f4a1      	BRNE _0x2001E
                 ; 0001 00BD if(*month + 10 > 12){
000551 940e 0c1d 	CALL SUBOPT_0x39
000553 9733      	SBIW R30,3
000554 f054      	BRLT _0x2001F
                 ; 0001 00BE *month = *month + 10 - 12;
000555 85ab      	LDD  R26,Y+11
000556 85bc      	LDD  R27,Y+11+1
000557 91ec      	LD   R30,X
000558 50e2      	SUBI R30,LOW(2)
000559 940e 0c22 	CALL SUBOPT_0x3A
                 ; 0001 00BF *year += 1;
                 ; 0001 00C0 if(*year > 99)
00055b f010      	BRLO _0x20020
                 ; 0001 00C1 *year -= 100;
00055c 940e 0c12 	CALL SUBOPT_0x37
                 ; 0001 00C2 }
                 _0x20020:
                 ; 0001 00C3 else{
00055e c005      	RJMP _0x20021
                 _0x2001F:
                 ; 0001 00C4 *month += 10;
00055f 85ab      	LDD  R26,Y+11
000560 85bc      	LDD  R27,Y+11+1
000561 91ec      	LD   R30,X
000562 5fe6      	SUBI R30,-LOW(10)
000563 93ec      	ST   X,R30
                 ; 0001 00C5 }
                 _0x20021:
                 ; 0001 00C6 }
                 ; 0001 00C7 else if(position == 5){
000564 c055      	RJMP _0x20022
                 _0x2001E:
000565 e0e5      	LDI  R30,LOW(5)
000566 e0f0      	LDI  R31,HIGH(5)
000567 17e2      	CP   R30,R18
000568 07f3      	CPC  R31,R19
000569 f4a1      	BRNE _0x20023
                 ; 0001 00C8 if(*month + 1 > 12){
00056a 940e 0c1d 	CALL SUBOPT_0x39
00056c 973c      	SBIW R30,12
00056d f054      	BRLT _0x20024
                 ; 0001 00C9 *month = *month + 1 - 12;
00056e 85ab      	LDD  R26,Y+11
00056f 85bc      	LDD  R27,Y+11+1
000570 91ec      	LD   R30,X
000571 50eb      	SUBI R30,LOW(11)
000572 940e 0c22 	CALL SUBOPT_0x3A
                 ; 0001 00CA *year += 1;
                 ; 0001 00CB if(*year > 99)
000574 f010      	BRLO _0x20025
                 ; 0001 00CC *year -= 100;
000575 940e 0c12 	CALL SUBOPT_0x37
                 ; 0001 00CD }
                 _0x20025:
                 ; 0001 00CE else{
000577 c005      	RJMP _0x20026
                 _0x20024:
                 ; 0001 00CF *month += 1;
000578 85ab      	LDD  R26,Y+11
000579 85bc      	LDD  R27,Y+11+1
00057a 91ec      	LD   R30,X
00057b 5fef      	SUBI R30,-LOW(1)
00057c 93ec      	ST   X,R30
                 ; 0001 00D0 }
                 _0x20026:
                 ; 0001 00D1 }
                 ; 0001 00D2 else if(position == 7){
00057d c03c      	RJMP _0x20027
                 _0x20023:
00057e 940e 0c2d 	CALL SUBOPT_0x3B
000580 f491      	BRNE _0x20028
                 ; 0001 00D3 if(*year + 10 > 99){
000581 940e 0c32 	CALL SUBOPT_0x3C
000583 963a      	ADIW R30,10
000584 36e4      	CPI  R30,LOW(0x64)
000585 e0a0      	LDI  R26,HIGH(0x64)
000586 07fa      	CPC  R31,R26
000587 f02c      	BRLT _0x20029
                 ; 0001 00D4 *year = *year + 10 - 100;
000588 85a9      	LDD  R26,Y+9
000589 85ba      	LDD  R27,Y+9+1
00058a 91ec      	LD   R30,X
00058b 55ea      	SUBI R30,LOW(90)
00058c c004      	RJMP _0x20093
                 ; 0001 00D5 }
                 ; 0001 00D6 else{
                 _0x20029:
                 ; 0001 00D7 *year += 10;
00058d 85a9      	LDD  R26,Y+9
00058e 85ba      	LDD  R27,Y+9+1
00058f 91ec      	LD   R30,X
000590 5fe6      	SUBI R30,-LOW(10)
                 _0x20093:
000591 93ec      	ST   X,R30
                 ; 0001 00D8 }
                 ; 0001 00D9 }
                 ; 0001 00DA else if(position == 8){
000592 c027      	RJMP _0x2002B
                 _0x20028:
000593 e0e8      	LDI  R30,LOW(8)
000594 e0f0      	LDI  R31,HIGH(8)
000595 17e2      	CP   R30,R18
000596 07f3      	CPC  R31,R19
000597 f491      	BRNE _0x2002C
                 ; 0001 00DB if(*year + 1 >= 99){
000598 940e 0c32 	CALL SUBOPT_0x3C
00059a 9631      	ADIW R30,1
00059b 36e3      	CPI  R30,LOW(0x63)
00059c e0a0      	LDI  R26,HIGH(0x63)
00059d 07fa      	CPC  R31,R26
00059e f02c      	BRLT _0x2002D
                 ; 0001 00DC *year = *year + 1 - 100;
00059f 85a9      	LDD  R26,Y+9
0005a0 85ba      	LDD  R27,Y+9+1
0005a1 91ec      	LD   R30,X
0005a2 56e3      	SUBI R30,LOW(99)
0005a3 c004      	RJMP _0x20094
                 ; 0001 00DD }
                 ; 0001 00DE else{
                 _0x2002D:
                 ; 0001 00DF *year += 1;
0005a4 85a9      	LDD  R26,Y+9
0005a5 85ba      	LDD  R27,Y+9+1
0005a6 91ec      	LD   R30,X
0005a7 5fef      	SUBI R30,-LOW(1)
                 _0x20094:
0005a8 93ec      	ST   X,R30
                 ; 0001 00E0 }
                 ; 0001 00E1 }
                 ; 0001 00E2 else if(position >= 10 && position <= 12){
0005a9 c010      	RJMP _0x2002F
                 _0x2002C:
                +
0005aa 302a     +CPI R18 , LOW ( 10 )
0005ab e0e0     +LDI R30 , HIGH ( 10 )
0005ac 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
0005ad f024      	BRLT _0x20031
                +
0005ae 302d     +CPI R18 , LOW ( 13 )
0005af e0e0     +LDI R30 , HIGH ( 13 )
0005b0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
0005b1 f00c      	BRLT _0x20032
                 _0x20031:
0005b2 c007      	RJMP _0x20030
                 _0x20032:
                 ; 0001 00E3 *day += 1;
0005b3 85af      	LDD  R26,Y+15
0005b4 89b8      	LDD  R27,Y+15+1
0005b5 91ec      	LD   R30,X
0005b6 5fef      	SUBI R30,-LOW(1)
0005b7 93ec      	ST   X,R30
                 ; 0001 00E4 *day %= 7;
0005b8 940e 0c37 	CALL SUBOPT_0x3D
                 ; 0001 00E5 }
                 ; 0001 00E6 }
                 _0x20030:
                 _0x2002F:
                 _0x2002B:
                 _0x20027:
                 _0x20022:
                 _0x2001D:
                 _0x20017:
                 ; 0001 00E7 else{
0005ba c0c3      	RJMP _0x20033
                 _0x20011:
                 ; 0001 00E8 if(position == 1){
0005bb 940e 0bf0 	CALL SUBOPT_0x33
0005bd f4e1      	BRNE _0x20034
                 ; 0001 00E9 if(*date - 10 <= 0){
0005be 940e 0bf5 	CALL SUBOPT_0x34
0005c0 973a      	SBIW R30,10
0005c1 940e 0d46 	CALL __CPW01
0005c3 f084      	BRLT _0x20035
                 ; 0001 00EA *date = *date + max_day - 10;
0005c4 85ad      	LDD  R26,Y+13
0005c5 85be      	LDD  R27,Y+13+1
0005c6 91ec      	LD   R30,X
0005c7 0fe5      	ADD  R30,R21
0005c8 50ea      	SUBI R30,LOW(10)
0005c9 940e 0c43 	CALL SUBOPT_0x3E
                 ; 0001 00EB *month -= 1;
                 ; 0001 00EC if(*month == 0){
0005cb f439      	BRNE _0x20036
                 ; 0001 00ED *month = 12;
0005cc 940e 0c4d 	CALL SUBOPT_0x3F
                 ; 0001 00EE if(*year == 0)
0005ce f411      	BRNE _0x20037
                 ; 0001 00EF *year = 100;
0005cf 940e 0c56 	CALL SUBOPT_0x40
                 ; 0001 00F0 *year -= 1;
                 _0x20037:
0005d1 940e 0c5b 	CALL SUBOPT_0x41
                 ; 0001 00F1 }
                 ; 0001 00F2 }
                 _0x20036:
                 ; 0001 00F3 else{
0005d3 c005      	RJMP _0x20038
                 _0x20035:
                 ; 0001 00F4 *date -= 10;
0005d4 85ad      	LDD  R26,Y+13
0005d5 85be      	LDD  R27,Y+13+1
0005d6 91ec      	LD   R30,X
0005d7 50ea      	SUBI R30,LOW(10)
0005d8 93ec      	ST   X,R30
                 ; 0001 00F5 }
                 _0x20038:
                 ; 0001 00F6 }
                 ; 0001 00F7 else if(position == 2){
0005d9 c0a4      	RJMP _0x20039
                 _0x20034:
0005da 940e 0c18 	CALL SUBOPT_0x38
0005dc f4e1      	BRNE _0x2003A
                 ; 0001 00F8 if(*date - 1 <= 0){
0005dd 940e 0bf5 	CALL SUBOPT_0x34
0005df 9731      	SBIW R30,1
0005e0 940e 0d46 	CALL __CPW01
0005e2 f084      	BRLT _0x2003B
                 ; 0001 00F9 *date = *date + max_day - 1;
0005e3 85ad      	LDD  R26,Y+13
0005e4 85be      	LDD  R27,Y+13+1
0005e5 91ec      	LD   R30,X
0005e6 0fe5      	ADD  R30,R21
0005e7 50e1      	SUBI R30,LOW(1)
0005e8 940e 0c43 	CALL SUBOPT_0x3E
                 ; 0001 00FA *month -= 1;
                 ; 0001 00FB if(*month == 0){
0005ea f439      	BRNE _0x2003C
                 ; 0001 00FC *month = 12;
0005eb 940e 0c4d 	CALL SUBOPT_0x3F
                 ; 0001 00FD if(*year == 0)
0005ed f411      	BRNE _0x2003D
                 ; 0001 00FE *year = 100;
0005ee 940e 0c56 	CALL SUBOPT_0x40
                 ; 0001 00FF *year -= 1;
                 _0x2003D:
0005f0 940e 0c5b 	CALL SUBOPT_0x41
                 ; 0001 0100 }
                 ; 0001 0101 }
                 _0x2003C:
                 ; 0001 0102 else{
0005f2 c005      	RJMP _0x2003E
                 _0x2003B:
                 ; 0001 0103 *date -= 1;
0005f3 85ad      	LDD  R26,Y+13
0005f4 85be      	LDD  R27,Y+13+1
0005f5 91ec      	LD   R30,X
0005f6 50e1      	SUBI R30,LOW(1)
0005f7 93ec      	ST   X,R30
                 ; 0001 0104 }
                 _0x2003E:
                 ; 0001 0105 }
                 ; 0001 0106 else if(position == 4){
0005f8 c085      	RJMP _0x2003F
                 _0x2003A:
0005f9 e0e4      	LDI  R30,LOW(4)
0005fa e0f0      	LDI  R31,HIGH(4)
0005fb 17e2      	CP   R30,R18
0005fc 07f3      	CPC  R31,R19
0005fd f4e9      	BRNE _0x20040
                 ; 0001 0107 if(*month - 10 <= 0){
0005fe 940e 0c1d 	CALL SUBOPT_0x39
000600 973a      	SBIW R30,10
000601 940e 0d46 	CALL __CPW01
000603 f08c      	BRLT _0x20041
                 ; 0001 0108 *month = *month + 12 - 10;
000604 85ab      	LDD  R26,Y+11
000605 85bc      	LDD  R27,Y+11+1
000606 91ec      	LD   R30,X
000607 5fee      	SUBI R30,-LOW(2)
000608 93ec      	ST   X,R30
                 ; 0001 0109 if(*year == 0)
000609 85a9      	LDD  R26,Y+9
00060a 85ba      	LDD  R27,Y+9+1
00060b 91ec      	LD   R30,X
00060c 30e0      	CPI  R30,0
00060d f411      	BRNE _0x20042
                 ; 0001 010A *year = 100;
00060e 940e 0c56 	CALL SUBOPT_0x40
                 ; 0001 010B *year -= 1;
                 _0x20042:
000610 85a9      	LDD  R26,Y+9
000611 85ba      	LDD  R27,Y+9+1
000612 91ec      	LD   R30,X
000613 50e1      	SUBI R30,LOW(1)
000614 c004      	RJMP _0x20095
                 ; 0001 010C }
                 ; 0001 010D else{
                 _0x20041:
                 ; 0001 010E *month -= 10;
000615 85ab      	LDD  R26,Y+11
000616 85bc      	LDD  R27,Y+11+1
000617 91ec      	LD   R30,X
000618 50ea      	SUBI R30,LOW(10)
                 _0x20095:
000619 93ec      	ST   X,R30
                 ; 0001 010F }
                 ; 0001 0110 }
                 ; 0001 0111 else if(position == 5){
00061a c063      	RJMP _0x20044
                 _0x20040:
00061b e0e5      	LDI  R30,LOW(5)
00061c e0f0      	LDI  R31,HIGH(5)
00061d 17e2      	CP   R30,R18
00061e 07f3      	CPC  R31,R19
00061f f4e9      	BRNE _0x20045
                 ; 0001 0112 if(*month - 1 <= 0){
000620 940e 0c1d 	CALL SUBOPT_0x39
000622 9731      	SBIW R30,1
000623 940e 0d46 	CALL __CPW01
000625 f08c      	BRLT _0x20046
                 ; 0001 0113 *month = *month + 12 - 1;
000626 85ab      	LDD  R26,Y+11
000627 85bc      	LDD  R27,Y+11+1
000628 91ec      	LD   R30,X
000629 5fe5      	SUBI R30,-LOW(11)
00062a 93ec      	ST   X,R30
                 ; 0001 0114 *year -= 1;
00062b 940e 0c5b 	CALL SUBOPT_0x41
                 ; 0001 0115 if(*year == 0)
00062d 85a9      	LDD  R26,Y+9
00062e 85ba      	LDD  R27,Y+9+1
00062f 91ec      	LD   R30,X
000630 30e0      	CPI  R30,0
000631 f411      	BRNE _0x20047
                 ; 0001 0116 *year = 100;
000632 940e 0c56 	CALL SUBOPT_0x40
                 ; 0001 0117 *year -= 1;
                 _0x20047:
000634 85a9      	LDD  R26,Y+9
000635 85ba      	LDD  R27,Y+9+1
000636 c002      	RJMP _0x20096
                 ; 0001 0118 }
                 ; 0001 0119 else{
                 _0x20046:
                 ; 0001 011A *month -= 1;
000637 85ab      	LDD  R26,Y+11
000638 85bc      	LDD  R27,Y+11+1
                 _0x20096:
000639 91ec      	LD   R30,X
00063a 50e1      	SUBI R30,LOW(1)
00063b 93ec      	ST   X,R30
                 ; 0001 011B }
                 ; 0001 011C }
                 ; 0001 011D else if(position == 7){
00063c c041      	RJMP _0x20049
                 _0x20045:
00063d 940e 0c2d 	CALL SUBOPT_0x3B
00063f f489      	BRNE _0x2004A
                 ; 0001 011E if(*year - 10 <= 0){
000640 940e 0c32 	CALL SUBOPT_0x3C
000642 973a      	SBIW R30,10
000643 940e 0d46 	CALL __CPW01
000645 f02c      	BRLT _0x2004B
                 ; 0001 011F *year = *year + 100 - 10;
000646 85a9      	LDD  R26,Y+9
000647 85ba      	LDD  R27,Y+9+1
000648 91ec      	LD   R30,X
000649 5ae6      	SUBI R30,-LOW(90)
00064a c004      	RJMP _0x20097
                 ; 0001 0120 }
                 ; 0001 0121 else{
                 _0x2004B:
                 ; 0001 0122 *year -= 10;
00064b 85a9      	LDD  R26,Y+9
00064c 85ba      	LDD  R27,Y+9+1
00064d 91ec      	LD   R30,X
00064e 50ea      	SUBI R30,LOW(10)
                 _0x20097:
00064f 93ec      	ST   X,R30
                 ; 0001 0123 }
                 ; 0001 0124 }
                 ; 0001 0125 else if(position == 8){
000650 c02d      	RJMP _0x2004D
                 _0x2004A:
000651 e0e8      	LDI  R30,LOW(8)
000652 e0f0      	LDI  R31,HIGH(8)
000653 17e2      	CP   R30,R18
000654 07f3      	CPC  R31,R19
000655 f489      	BRNE _0x2004E
                 ; 0001 0126 if(*year - 1 <= 0){
000656 940e 0c32 	CALL SUBOPT_0x3C
000658 9731      	SBIW R30,1
000659 940e 0d46 	CALL __CPW01
00065b f02c      	BRLT _0x2004F
                 ; 0001 0127 *year = *year + 100 - 1;
00065c 85a9      	LDD  R26,Y+9
00065d 85ba      	LDD  R27,Y+9+1
00065e 91ec      	LD   R30,X
00065f 59ed      	SUBI R30,-LOW(99)
000660 c004      	RJMP _0x20098
                 ; 0001 0128 }
                 ; 0001 0129 else{
                 _0x2004F:
                 ; 0001 012A *year -= 1;
000661 85a9      	LDD  R26,Y+9
000662 85ba      	LDD  R27,Y+9+1
000663 91ec      	LD   R30,X
000664 50e1      	SUBI R30,LOW(1)
                 _0x20098:
000665 93ec      	ST   X,R30
                 ; 0001 012B }
                 ; 0001 012C }
                 ; 0001 012D else if(position >= 10 && position <= 12){
000666 c017      	RJMP _0x20051
                 _0x2004E:
                +
000667 302a     +CPI R18 , LOW ( 10 )
000668 e0e0     +LDI R30 , HIGH ( 10 )
000669 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
00066a f024      	BRLT _0x20053
                +
00066b 302d     +CPI R18 , LOW ( 13 )
00066c e0e0     +LDI R30 , HIGH ( 13 )
00066d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
00066e f00c      	BRLT _0x20054
                 _0x20053:
00066f c00e      	RJMP _0x20052
                 _0x20054:
                 ; 0001 012E *day -= 1;
000670 85af      	LDD  R26,Y+15
000671 89b8      	LDD  R27,Y+15+1
000672 91ec      	LD   R30,X
000673 50e1      	SUBI R30,LOW(1)
000674 93ec      	ST   X,R30
                 ; 0001 012F if(*day<=0)
000675 91ac      	LD   R26,X
000676 30a0      	CPI  R26,0
000677 f421      	BRNE _0x20055
                 ; 0001 0130 *day = 7;
000678 85af      	LDD  R26,Y+15
000679 89b8      	LDD  R27,Y+15+1
00067a e0e7      	LDI  R30,LOW(7)
00067b 93ec      	ST   X,R30
                 ; 0001 0131 *day %= 7;
                 _0x20055:
00067c 940e 0c37 	CALL SUBOPT_0x3D
                 ; 0001 0132 }
                 ; 0001 0133 }
                 _0x20052:
                 _0x20051:
                 _0x2004D:
                 _0x20049:
                 _0x20044:
                 _0x2003F:
                 _0x20039:
                 _0x20033:
                 ; 0001 0134 }
00067e 940e 0cdb 	CALL __LOADLOCR6
000680 9661      	ADIW R28,17
000681 9508      	RET
                 ; .FEND
                 ;void DS1307_Set_Time(unsigned char *sec, unsigned char *min, unsigned char *hour ...
                 ; 0001 0136 void DS1307_Set_Time(unsigned char *sec, unsigned char *min, unsigned char *hour, int position, int inOrde){
                 _DS1307_Set_Time:
                 ; .FSTART _DS1307_Set_Time
                 ; 0001 0137 if(inOrde == 1){
000682 940e 0cd4 	CALL __SAVELOCR6
000684 018d      	MOVW R16,R26
                +
000685 812e     +LDD R18 , Y + 6
000686 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
000687 8548     +LDD R20 , Y + 8
000688 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
                 ;	*sec -> Y+12
                 ;	*min -> Y+10
                 ;	*hour -> R20,R21
                 ;	position -> R18,R19
                 ;	inOrde -> R16,R17
000689 e0e1      	LDI  R30,LOW(1)
00068a e0f0      	LDI  R31,HIGH(1)
00068b 17e0      	CP   R30,R16
00068c 07f1      	CPC  R31,R17
00068d f009      	BREQ PC+2
00068e c093      	RJMP _0x20056
                 ; 0001 0138 if(position == 1){
00068f 940e 0bf0 	CALL SUBOPT_0x33
000691 f491      	BRNE _0x20057
                 ; 0001 0139 if(*hour + 10 >= 24){
000692 01da      	MOVW R26,R20
000693 91ec      	LD   R30,X
000694 e0f0      	LDI  R31,0
000695 973e      	SBIW R30,14
000696 f044      	BRLT _0x20058
                 ; 0001 013A *hour = (*hour + 10) % 24;
000697 940e 0c61 	CALL SUBOPT_0x42
000699 e1e8      	LDI  R30,LOW(24)
00069a e0f0      	LDI  R31,HIGH(24)
00069b 940e 0d2a 	CALL __MODW21
00069d 01da      	MOVW R26,R20
00069e c003      	RJMP _0x20099
                 ; 0001 013B }
                 ; 0001 013C else{
                 _0x20058:
                 ; 0001 013D *hour += 10;
00069f 01da      	MOVW R26,R20
0006a0 91ec      	LD   R30,X
0006a1 5fe6      	SUBI R30,-LOW(10)
                 _0x20099:
0006a2 93ec      	ST   X,R30
                 ; 0001 013E }
                 ; 0001 013F }
                 ; 0001 0140 else if(position == 2){
0006a3 c07d      	RJMP _0x2005A
                 _0x20057:
0006a4 940e 0c18 	CALL SUBOPT_0x38
0006a6 f491      	BRNE _0x2005B
                 ; 0001 0141 if(*hour + 1 >= 24){
0006a7 01da      	MOVW R26,R20
0006a8 91ec      	LD   R30,X
0006a9 e0f0      	LDI  R31,0
0006aa 9777      	SBIW R30,23
0006ab f044      	BRLT _0x2005C
                 ; 0001 0142 *hour = (*hour + 1) % 24;
0006ac 940e 0c66 	CALL SUBOPT_0x43
0006ae e1e8      	LDI  R30,LOW(24)
0006af e0f0      	LDI  R31,HIGH(24)
0006b0 940e 0d2a 	CALL __MODW21
0006b2 01da      	MOVW R26,R20
0006b3 c003      	RJMP _0x2009A
                 ; 0001 0143 }
                 ; 0001 0144 else{
                 _0x2005C:
                 ; 0001 0145 *hour += 1;
0006b4 01da      	MOVW R26,R20
0006b5 91ec      	LD   R30,X
0006b6 5fef      	SUBI R30,-LOW(1)
                 _0x2009A:
0006b7 93ec      	ST   X,R30
                 ; 0001 0146 }
                 ; 0001 0147 }
                 ; 0001 0148 else if(position == 6){
0006b8 c068      	RJMP _0x2005E
                 _0x2005B:
0006b9 e0e6      	LDI  R30,LOW(6)
0006ba e0f0      	LDI  R31,HIGH(6)
0006bb 17e2      	CP   R30,R18
0006bc 07f3      	CPC  R31,R19
0006bd f4a9      	BRNE _0x2005F
                 ; 0001 0149 if(*min + 10 >= 60){
0006be 940e 0c6b 	CALL SUBOPT_0x44
0006c0 97f2      	SBIW R30,50
0006c1 f05c      	BRLT _0x20060
                 ; 0001 014A *min = (*min + 10) % 60;
0006c2 85aa      	LDD  R26,Y+10
0006c3 85bb      	LDD  R27,Y+10+1
0006c4 940e 0c61 	CALL SUBOPT_0x42
0006c6 940e 0c70 	CALL SUBOPT_0x45
                 ; 0001 014B *hour += 1;
                 ; 0001 014C if(*hour == 24){
0006c8 f419      	BRNE _0x20061
                 ; 0001 014D *hour = 0;
0006c9 01da      	MOVW R26,R20
0006ca e0e0      	LDI  R30,LOW(0)
0006cb 93ec      	ST   X,R30
                 ; 0001 014E }
                 ; 0001 014F }
                 _0x20061:
                 ; 0001 0150 else{
0006cc c005      	RJMP _0x20062
                 _0x20060:
                 ; 0001 0151 *min += 10;
0006cd 85aa      	LDD  R26,Y+10
0006ce 85bb      	LDD  R27,Y+10+1
0006cf 91ec      	LD   R30,X
0006d0 5fe6      	SUBI R30,-LOW(10)
0006d1 93ec      	ST   X,R30
                 ; 0001 0152 }
                 _0x20062:
                 ; 0001 0153 }
                 ; 0001 0154 else if(position == 7){
0006d2 c04e      	RJMP _0x20063
                 _0x2005F:
0006d3 940e 0c2d 	CALL SUBOPT_0x3B
0006d5 f491      	BRNE _0x20064
                 ; 0001 0155 if(*min + 1 >= 60){
0006d6 940e 0c6b 	CALL SUBOPT_0x44
0006d8 97fb      	SBIW R30,59
0006d9 f05c      	BRLT _0x20065
                 ; 0001 0156 *min = (*min + 1) % 60;
0006da 85aa      	LDD  R26,Y+10
0006db 85bb      	LDD  R27,Y+10+1
0006dc 940e 0c66 	CALL SUBOPT_0x43
0006de 940e 0c70 	CALL SUBOPT_0x45
                 ; 0001 0157 *hour += 1;
                 ; 0001 0158 if(*hour == 24){
0006e0 f419      	BRNE _0x20066
                 ; 0001 0159 *hour = 0;
0006e1 01da      	MOVW R26,R20
0006e2 e0e0      	LDI  R30,LOW(0)
0006e3 93ec      	ST   X,R30
                 ; 0001 015A }
                 ; 0001 015B }
                 _0x20066:
                 ; 0001 015C else{
0006e4 c002      	RJMP _0x20067
                 _0x20065:
                 ; 0001 015D *min += 1;
0006e5 940e 0c7e 	CALL SUBOPT_0x46
                 ; 0001 015E }
                 _0x20067:
                 ; 0001 015F }
                 ; 0001 0160 else if(position == 11){
0006e7 c039      	RJMP _0x20068
                 _0x20064:
0006e8 e0eb      	LDI  R30,LOW(11)
0006e9 e0f0      	LDI  R31,HIGH(11)
0006ea 17e2      	CP   R30,R18
0006eb 07f3      	CPC  R31,R19
0006ec f4c1      	BRNE _0x20069
                 ; 0001 0161 if(*sec + 10 >= 60){
0006ed 940e 0c84 	CALL SUBOPT_0x47
0006ef 97f2      	SBIW R30,50
0006f0 f074      	BRLT _0x2006A
                 ; 0001 0162 *sec = (*sec+10) % 60;
0006f1 85ac      	LDD  R26,Y+12
0006f2 85bd      	LDD  R27,Y+12+1
0006f3 940e 0c61 	CALL SUBOPT_0x42
0006f5 940e 0c89 	CALL SUBOPT_0x48
                 ; 0001 0163 *min += 1;
                 ; 0001 0164 if(*min == 60){
0006f7 85aa      	LDD  R26,Y+10
0006f8 85bb      	LDD  R27,Y+10+1
0006f9 91ac      	LD   R26,X
0006fa 33ac      	CPI  R26,LOW(0x3C)
0006fb f411      	BRNE _0x2006B
                 ; 0001 0165 *min = 0;
0006fc 940e 0c91 	CALL SUBOPT_0x49
                 ; 0001 0166 }
                 ; 0001 0167 }
                 _0x2006B:
                 ; 0001 0168 else{
0006fe c005      	RJMP _0x2006C
                 _0x2006A:
                 ; 0001 0169 *sec += 10;
0006ff 85ac      	LDD  R26,Y+12
000700 85bd      	LDD  R27,Y+12+1
000701 91ec      	LD   R30,X
000702 5fe6      	SUBI R30,-LOW(10)
000703 93ec      	ST   X,R30
                 ; 0001 016A }
                 _0x2006C:
                 ; 0001 016B }
                 ; 0001 016C else if(position == 12){
000704 c01c      	RJMP _0x2006D
                 _0x20069:
000705 e0ec      	LDI  R30,LOW(12)
000706 e0f0      	LDI  R31,HIGH(12)
000707 17e2      	CP   R30,R18
000708 07f3      	CPC  R31,R19
000709 f4b9      	BRNE _0x2006E
                 ; 0001 016D if(*sec + 1 >= 60){
00070a 940e 0c84 	CALL SUBOPT_0x47
00070c 97fb      	SBIW R30,59
00070d f074      	BRLT _0x2006F
                 ; 0001 016E *sec = (*sec+1) % 60;
00070e 85ac      	LDD  R26,Y+12
00070f 85bd      	LDD  R27,Y+12+1
000710 940e 0c66 	CALL SUBOPT_0x43
000712 940e 0c89 	CALL SUBOPT_0x48
                 ; 0001 016F *min += 1;
                 ; 0001 0170 if(*min == 60){
000714 85aa      	LDD  R26,Y+10
000715 85bb      	LDD  R27,Y+10+1
000716 91ac      	LD   R26,X
000717 33ac      	CPI  R26,LOW(0x3C)
000718 f411      	BRNE _0x20070
                 ; 0001 0171 *min = 0;
000719 940e 0c91 	CALL SUBOPT_0x49
                 ; 0001 0172 }
                 ; 0001 0173 }
                 _0x20070:
                 ; 0001 0174 else{
00071b c005      	RJMP _0x20071
                 _0x2006F:
                 ; 0001 0175 *sec += 1;
00071c 85ac      	LDD  R26,Y+12
00071d 85bd      	LDD  R27,Y+12+1
00071e 91ec      	LD   R30,X
00071f 5fef      	SUBI R30,-LOW(1)
000720 93ec      	ST   X,R30
                 ; 0001 0176 }
                 _0x20071:
                 ; 0001 0177 }
                 ; 0001 0178 }
                 _0x2006E:
                 _0x2006D:
                 _0x20068:
                 _0x20063:
                 _0x2005E:
                 _0x2005A:
                 ; 0001 0179 else{
000721 c099      	RJMP _0x20072
                 _0x20056:
                 ; 0001 017A if(position == 1){
000722 940e 0bf0 	CALL SUBOPT_0x33
000724 f479      	BRNE _0x20073
                 ; 0001 017B if(*hour - 10 > 0){
000725 01da      	MOVW R26,R20
000726 91ec      	LD   R30,X
000727 e0f0      	LDI  R31,0
000728 973a      	SBIW R30,10
000729 940e 0d46 	CALL __CPW01
00072b f41c      	BRGE _0x20074
                 ; 0001 017C *hour -= 10;
00072c 91ec      	LD   R30,X
00072d 50ea      	SUBI R30,LOW(10)
00072e c003      	RJMP _0x2009B
                 ; 0001 017D }
                 ; 0001 017E else{
                 _0x20074:
                 ; 0001 017F *hour = *hour + 24 - 10;
00072f 01da      	MOVW R26,R20
000730 91ec      	LD   R30,X
000731 5fe2      	SUBI R30,-LOW(14)
                 _0x2009B:
000732 93ec      	ST   X,R30
                 ; 0001 0180 }
                 ; 0001 0181 }
                 ; 0001 0182 else if(position == 2){
000733 c087      	RJMP _0x20076
                 _0x20073:
000734 940e 0c18 	CALL SUBOPT_0x38
000736 f471      	BRNE _0x20077
                 ; 0001 0183 if(*hour - 1 > 0){
000737 01da      	MOVW R26,R20
000738 91ec      	LD   R30,X
000739 e0f0      	LDI  R31,0
00073a 9731      	SBIW R30,1
00073b 940e 0d46 	CALL __CPW01
00073d f41c      	BRGE _0x20078
                 ; 0001 0184 *hour -= 1;
00073e 91ec      	LD   R30,X
00073f 50e1      	SUBI R30,LOW(1)
000740 c002      	RJMP _0x2009C
                 ; 0001 0185 }
                 ; 0001 0186 else{
                 _0x20078:
                 ; 0001 0187 *hour = *hour + 24 - 1;
000741 940e 0c96 	CALL SUBOPT_0x4A
                 _0x2009C:
000743 93ec      	ST   X,R30
                 ; 0001 0188 }
                 ; 0001 0189 }
                 ; 0001 018A else if(position == 6){
000744 c076      	RJMP _0x2007A
                 _0x20077:
000745 e0e6      	LDI  R30,LOW(6)
000746 e0f0      	LDI  R31,HIGH(6)
000747 17e2      	CP   R30,R18
000748 07f3      	CPC  R31,R19
000749 f4b1      	BRNE _0x2007B
                 ; 0001 018B if(*min - 10 < 0){
00074a 940e 0c6b 	CALL SUBOPT_0x44
00074c 973a      	SBIW R30,10
00074d 23ff      	TST  R31
00074e f45a      	BRPL _0x2007C
                 ; 0001 018C *min = (*min + 60) - 10;
00074f 85aa      	LDD  R26,Y+10
000750 85bb      	LDD  R27,Y+10+1
000751 91ec      	LD   R30,X
000752 5cee      	SUBI R30,-LOW(50)
000753 940e 0c9a 	CALL SUBOPT_0x4B
                 ; 0001 018D *hour -= 1;
                 ; 0001 018E if(*hour == 255){
000755 f419      	BRNE _0x2007D
                 ; 0001 018F *hour = 0;
000756 940e 0ca4 	CALL SUBOPT_0x4C
                 ; 0001 0190 *hour = *hour + 24 - 1;
000758 93ec      	ST   X,R30
                 ; 0001 0191 }
                 ; 0001 0192 }
                 _0x2007D:
                 ; 0001 0193 else{
000759 c005      	RJMP _0x2007E
                 _0x2007C:
                 ; 0001 0194 *min -= 10;
00075a 85aa      	LDD  R26,Y+10
00075b 85bb      	LDD  R27,Y+10+1
00075c 91ec      	LD   R30,X
00075d 50ea      	SUBI R30,LOW(10)
00075e 93ec      	ST   X,R30
                 ; 0001 0195 }
                 _0x2007E:
                 ; 0001 0196 }
                 ; 0001 0197 else if(position == 7){
00075f c05b      	RJMP _0x2007F
                 _0x2007B:
000760 940e 0c2d 	CALL SUBOPT_0x3B
000762 f479      	BRNE _0x20080
                 ; 0001 0198 if(*min - 1 < 0){
000763 940e 0c6b 	CALL SUBOPT_0x44
000765 9731      	SBIW R30,1
000766 23ff      	TST  R31
000767 f43a      	BRPL _0x20081
                 ; 0001 0199 *min = (*min + 60) - 1;
000768 940e 0ca8 	CALL SUBOPT_0x4D
                 ; 0001 019A *hour -= 1;
                 ; 0001 019B if(*hour == 255){
00076a f419      	BRNE _0x20082
                 ; 0001 019C *hour = 0;
00076b 940e 0ca4 	CALL SUBOPT_0x4C
                 ; 0001 019D *hour = *hour + 24 - 1;
00076d 93ec      	ST   X,R30
                 ; 0001 019E }
                 ; 0001 019F }
                 _0x20082:
                 ; 0001 01A0 else{
00076e c002      	RJMP _0x20083
                 _0x20081:
                 ; 0001 01A1 *min -= 1;
00076f 940e 0cad 	CALL SUBOPT_0x4E
                 ; 0001 01A2 }
                 _0x20083:
                 ; 0001 01A3 }
                 ; 0001 01A4 else if(position == 11){
000771 c049      	RJMP _0x20084
                 _0x20080:
000772 e0eb      	LDI  R30,LOW(11)
000773 e0f0      	LDI  R31,HIGH(11)
000774 17e2      	CP   R30,R18
000775 07f3      	CPC  R31,R19
000776 f501      	BRNE _0x20085
                 ; 0001 01A5 if(*sec - 10 < 0){
000777 940e 0c84 	CALL SUBOPT_0x47
000779 973a      	SBIW R30,10
00077a 23ff      	TST  R31
00077b f4aa      	BRPL _0x20086
                 ; 0001 01A6 *sec = (*sec+60) - 10;
00077c 85ac      	LDD  R26,Y+12
00077d 85bd      	LDD  R27,Y+12+1
00077e 91ec      	LD   R30,X
00077f 5cee      	SUBI R30,-LOW(50)
000780 93ec      	ST   X,R30
                 ; 0001 01A7 *min -= 1;
000781 940e 0cad 	CALL SUBOPT_0x4E
                 ; 0001 01A8 if(*min == 255){
000783 85aa      	LDD  R26,Y+10
000784 85bb      	LDD  R27,Y+10+1
000785 91ac      	LD   R26,X
000786 3faf      	CPI  R26,LOW(0xFF)
000787 f441      	BRNE _0x20087
                 ; 0001 01A9 *min = 0;
000788 940e 0c91 	CALL SUBOPT_0x49
                 ; 0001 01AA *min = 60 + *min - 1;
00078a 940e 0ca8 	CALL SUBOPT_0x4D
                 ; 0001 01AB *hour -= 1;
                 ; 0001 01AC if(*hour == 255){
00078c f419      	BRNE _0x20088
                 ; 0001 01AD *hour = 0;
00078d 940e 0ca4 	CALL SUBOPT_0x4C
                 ; 0001 01AE *hour = *hour + 24 - 1;
00078f 93ec      	ST   X,R30
                 ; 0001 01AF }
                 ; 0001 01B0 }
                 _0x20088:
                 ; 0001 01B1 }
                 _0x20087:
                 ; 0001 01B2 else{
000790 c005      	RJMP _0x20089
                 _0x20086:
                 ; 0001 01B3 *sec -= 10;
000791 85ac      	LDD  R26,Y+12
000792 85bd      	LDD  R27,Y+12+1
000793 91ec      	LD   R30,X
000794 50ea      	SUBI R30,LOW(10)
000795 93ec      	ST   X,R30
                 ; 0001 01B4 }
                 _0x20089:
                 ; 0001 01B5 }
                 ; 0001 01B6 else if(position == 12){
000796 c024      	RJMP _0x2008A
                 _0x20085:
000797 e0ec      	LDI  R30,LOW(12)
000798 e0f0      	LDI  R31,HIGH(12)
000799 17e2      	CP   R30,R18
00079a 07f3      	CPC  R31,R19
00079b f4f9      	BRNE _0x2008B
                 ; 0001 01B7 if(*sec - 1 < 0){
00079c 940e 0c84 	CALL SUBOPT_0x47
00079e 9731      	SBIW R30,1
00079f 23ff      	TST  R31
0007a0 f4aa      	BRPL _0x2008C
                 ; 0001 01B8 *sec = (*sec+60) - 1;
0007a1 85ac      	LDD  R26,Y+12
0007a2 85bd      	LDD  R27,Y+12+1
0007a3 91ec      	LD   R30,X
0007a4 5ce5      	SUBI R30,-LOW(59)
0007a5 93ec      	ST   X,R30
                 ; 0001 01B9 *min -= 1;
0007a6 940e 0cad 	CALL SUBOPT_0x4E
                 ; 0001 01BA if(*min == 255){
0007a8 85aa      	LDD  R26,Y+10
0007a9 85bb      	LDD  R27,Y+10+1
0007aa 91ac      	LD   R26,X
0007ab 3faf      	CPI  R26,LOW(0xFF)
0007ac f441      	BRNE _0x2008D
                 ; 0001 01BB *min = 0;
0007ad 940e 0c91 	CALL SUBOPT_0x49
                 ; 0001 01BC *min = 60 + *min - 1;
0007af 940e 0ca8 	CALL SUBOPT_0x4D
                 ; 0001 01BD *hour -= 1;
                 ; 0001 01BE if(*hour == 255){
0007b1 f419      	BRNE _0x2008E
                 ; 0001 01BF *hour = 0;
0007b2 940e 0ca4 	CALL SUBOPT_0x4C
                 ; 0001 01C0 *hour = *hour + 24 - 1;
0007b4 93ec      	ST   X,R30
                 ; 0001 01C1 }
                 ; 0001 01C2 }
                 _0x2008E:
                 ; 0001 01C3 }
                 _0x2008D:
                 ; 0001 01C4 else{
0007b5 c005      	RJMP _0x2008F
                 _0x2008C:
                 ; 0001 01C5 *sec -= 1;
0007b6 85ac      	LDD  R26,Y+12
0007b7 85bd      	LDD  R27,Y+12+1
0007b8 91ec      	LD   R30,X
0007b9 50e1      	SUBI R30,LOW(1)
0007ba 93ec      	ST   X,R30
                 ; 0001 01C6 }
                 _0x2008F:
                 ; 0001 01C7 }
                 ; 0001 01C8 }
                 _0x2008B:
                 _0x2008A:
                 _0x20084:
                 _0x2007F:
                 _0x2007A:
                 _0x20076:
                 _0x20072:
                 ; 0001 01C9 }
0007bb 940e 0cdb 	CALL __LOADLOCR6
0007bd 962e      	ADIW R28,14
0007be 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void Lcd_Write_High_Nibble(unsigned char);
                 ;void Lcd_Write_Low_Nibble(unsigned char );
                 ;void Lcd_Delay_us(unsigned char);
                 ;void Lcd_Write_High_Nibble(unsigned char b)
                 ; 0002 000F {
                 
                 	.CSEG
                 _Lcd_Write_High_Nibble:
                 ; .FSTART _Lcd_Write_High_Nibble
                 ; 0002 0010 LCD_D7 = b & 0x80;
0007bf 931a      	ST   -Y,R17
0007c0 2f1a      	MOV  R17,R26
                 ;	b -> R17
0007c1 fd17      	SBRC R17,7
0007c2 c002      	RJMP _0x40003
0007c3 9840      	CBI  0x8,0
0007c4 c001      	RJMP _0x40004
                 _0x40003:
0007c5 9a40      	SBI  0x8,0
                 _0x40004:
                 ; 0002 0011 LCD_D6 = b & 0x40;
0007c6 fd16      	SBRC R17,6
0007c7 c002      	RJMP _0x40005
0007c8 982d      	CBI  0x5,5
0007c9 c001      	RJMP _0x40006
                 _0x40005:
0007ca 9a2d      	SBI  0x5,5
                 _0x40006:
                 ; 0002 0012 LCD_D5 = b & 0x20;
0007cb fd15      	SBRC R17,5
0007cc c002      	RJMP _0x40007
0007cd 982c      	CBI  0x5,4
0007ce c001      	RJMP _0x40008
                 _0x40007:
0007cf 9a2c      	SBI  0x5,4
                 _0x40008:
                 ; 0002 0013 LCD_D4 = b & 0x10;
0007d0 fd14      	SBRC R17,4
0007d1 c002      	RJMP _0x40009
0007d2 982b      	CBI  0x5,3
0007d3 c001      	RJMP _0x4000A
                 _0x40009:
0007d4 9a2b      	SBI  0x5,3
                 _0x4000A:
                 ; 0002 0014 }
0007d5 c05c      	RJMP _0x2000007
                 ; .FEND
                 ;void Lcd_Write_Low_Nibble(unsigned char b)
                 ; 0002 001A {
                 _Lcd_Write_Low_Nibble:
                 ; .FSTART _Lcd_Write_Low_Nibble
                 ; 0002 001B LCD_D7 = b & 0x08;
0007d6 931a      	ST   -Y,R17
0007d7 2f1a      	MOV  R17,R26
                 ;	b -> R17
0007d8 fd13      	SBRC R17,3
0007d9 c002      	RJMP _0x4000B
0007da 9840      	CBI  0x8,0
0007db c001      	RJMP _0x4000C
                 _0x4000B:
0007dc 9a40      	SBI  0x8,0
                 _0x4000C:
                 ; 0002 001C LCD_D6 = b & 0x04;
0007dd fd12      	SBRC R17,2
0007de c002      	RJMP _0x4000D
0007df 982d      	CBI  0x5,5
0007e0 c001      	RJMP _0x4000E
                 _0x4000D:
0007e1 9a2d      	SBI  0x5,5
                 _0x4000E:
                 ; 0002 001D LCD_D5 = b & 0x02;
0007e2 fd11      	SBRC R17,1
0007e3 c002      	RJMP _0x4000F
0007e4 982c      	CBI  0x5,4
0007e5 c001      	RJMP _0x40010
                 _0x4000F:
0007e6 9a2c      	SBI  0x5,4
                 _0x40010:
                 ; 0002 001E LCD_D4 = b & 0x01;
0007e7 fd10      	SBRC R17,0
0007e8 c002      	RJMP _0x40011
0007e9 982b      	CBI  0x5,3
0007ea c001      	RJMP _0x40012
                 _0x40011:
0007eb 9a2b      	SBI  0x5,3
                 _0x40012:
                 ; 0002 001F }
0007ec c045      	RJMP _0x2000007
                 ; .FEND
                 ;void Lcd_Delay_us(unsigned char t)
                 ; 0002 0025 {
                 ; 0002 0026 while(t--);
                 ;	t -> R17
                 ; 0002 0027 }
                 ;void Lcd_Init()
                 ; 0002 002E {
                 _Lcd_Init:
                 ; .FSTART _Lcd_Init
                 ; 0002 002F LCD_RS = 0;
0007ed 9828      	CBI  0x5,0
                 ; 0002 0030 LCD_EN = 0;
0007ee 982a      	CBI  0x5,2
                 ; 0002 0031 LCD_RW = 0;
0007ef 9829      	CBI  0x5,1
                 ; 0002 0032 
                 ; 0002 0033 delay_ms(20);
0007f0 940e 0a54 	CALL SUBOPT_0x14
                 ; 0002 0034 
                 ; 0002 0035 Lcd_Write_Low_Nibble(0x03);
0007f2 940e 0cb3 	CALL SUBOPT_0x4F
                 ; 0002 0036 LCD_EN = 1;
                 ; 0002 0037 LCD_EN = 0;
                 ; 0002 0038 delay_ms(5);
0007f4 e0a5      	LDI  R26,LOW(5)
0007f5 e0b0      	LDI  R27,0
0007f6 940e 0ec4 	CALL _delay_ms
                 ; 0002 0039 
                 ; 0002 003A Lcd_Write_Low_Nibble(0x03);
0007f8 940e 0cb3 	CALL SUBOPT_0x4F
                 ; 0002 003B LCD_EN = 1;
                 ; 0002 003C LCD_EN = 0;
                 ; 0002 003D delay_us(100);
                +
0007fa e980     +LDI R24 , LOW ( 400 )
0007fb e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0007fc 9701     +SBIW R24 , 1
0007fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ; 0002 003E 
                 ; 0002 003F Lcd_Write_Low_Nibble(0x03);
0007fe 940e 0cb3 	CALL SUBOPT_0x4F
                 ; 0002 0040 LCD_EN = 1;
                 ; 0002 0041 LCD_EN = 0;
                 ; 0002 0042 
                 ; 0002 0043 delay_ms(1);
000800 940e 094c 	CALL SUBOPT_0x3
                 ; 0002 0044 
                 ; 0002 0045 
                 ; 0002 0046 Lcd_Write_Low_Nibble(0x02);
000802 e0a2      	LDI  R26,LOW(2)
000803 940e 0cb9 	CALL SUBOPT_0x50
                 ; 0002 0047 LCD_EN = 1;
                 ; 0002 0048 LCD_EN = 0;
                 ; 0002 0049 delay_ms(1);
000805 940e 094c 	CALL SUBOPT_0x3
                 ; 0002 004A 
                 ; 0002 004B Lcd_Cmd(_LCD_4BIT_2LINE_5x7FONT);
000807 e2a8      	LDI  R26,LOW(40)
000808 d007      	RCALL _Lcd_Cmd
                 ; 0002 004C Lcd_Cmd(_LCD_TURN_ON);
000809 e0ac      	LDI  R26,LOW(12)
00080a d005      	RCALL _Lcd_Cmd
                 ; 0002 004D Lcd_Cmd(_LCD_CLEAR);
00080b e0a1      	LDI  R26,LOW(1)
00080c d003      	RCALL _Lcd_Cmd
                 ; 0002 004E Lcd_Cmd(_LCD_ENTRY_MODE);
00080d e0a6      	LDI  R26,LOW(6)
00080e d001      	RCALL _Lcd_Cmd
                 ; 0002 004F }
00080f 9508      	RET
                 ; .FEND
                 ;void Lcd_Cmd(unsigned char cmd)
                 ; 0002 0056 {
                 _Lcd_Cmd:
                 ; .FSTART _Lcd_Cmd
                 ; 0002 0057 LCD_RW = 0;
000810 931a      	ST   -Y,R17
000811 2f1a      	MOV  R17,R26
                 ;	cmd -> R17
000812 9829      	CBI  0x5,1
                 ; 0002 0058 LCD_RS = 0;
000813 9828      	CBI  0x5,0
                 ; 0002 0059 Lcd_Write_High_Nibble(cmd);
000814 940e 0cbe 	CALL SUBOPT_0x51
                 ; 0002 005A LCD_EN = 1;
                 ; 0002 005B LCD_EN = 0;
                 ; 0002 005C 
                 ; 0002 005D Lcd_Write_Low_Nibble(cmd);
                 ; 0002 005E LCD_EN = 1;
                 ; 0002 005F LCD_EN = 0;
                 ; 0002 0060 
                 ; 0002 0061 switch(cmd)
000816 2fe1      	MOV  R30,R17
000817 e0f0      	LDI  R31,0
                 ; 0002 0062 {
                 ; 0002 0063 case _LCD_CLEAR:
000818 30e1      	CPI  R30,LOW(0x1)
000819 e0a0      	LDI  R26,HIGH(0x1)
00081a 07fa      	CPC  R31,R26
00081b f021      	BREQ _0x4003C
                 ; 0002 0064 case _LCD_RETURN_HOME:
00081c 30e2      	CPI  R30,LOW(0x2)
00081d e0a0      	LDI  R26,HIGH(0x2)
00081e 07fa      	CPC  R31,R26
00081f f429      	BRNE _0x4003E
                 _0x4003C:
                 ; 0002 0065 delay_ms(2);
000820 e0a2      	LDI  R26,LOW(2)
000821 e0b0      	LDI  R27,0
000822 940e 0ec4 	CALL _delay_ms
                 ; 0002 0066 break;
000824 c003      	RJMP _0x4003A
                 ; 0002 0067 default:
                 _0x4003E:
                 ; 0002 0068 delay_us(37);
                +
000825 ec85     +LDI R24 , LOW ( 197 )
                +__DELAY_USB_LOOP :
000826 958a     +DEC R24
000827 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 197
                 ; 0002 0069 break;
                 ; 0002 006A }
                 _0x4003A:
                 ; 0002 006B }
000828 c009      	RJMP _0x2000007
                 ; .FEND
                 ;void Lcd_Chr_Cp(unsigned char achar)
                 ; 0002 0071 {
                 _Lcd_Chr_Cp:
                 ; .FSTART _Lcd_Chr_Cp
                 ; 0002 0072 LCD_RW = 0;
000829 931a      	ST   -Y,R17
00082a 2f1a      	MOV  R17,R26
                 ;	achar -> R17
00082b 9829      	CBI  0x5,1
                 ; 0002 0073 LCD_RS = 1;
00082c 9a28      	SBI  0x5,0
                 ; 0002 0074 Lcd_Write_High_Nibble(achar);
00082d 940e 0cbe 	CALL SUBOPT_0x51
                 ; 0002 0075 LCD_EN = 1;
                 ; 0002 0076 LCD_EN = 0;
                 ; 0002 0077 
                 ; 0002 0078 Lcd_Write_Low_Nibble(achar);
                 ; 0002 0079 LCD_EN = 1;
                 ; 0002 007A LCD_EN = 0;
                 ; 0002 007B 
                 ; 0002 007C delay_us(37+4);
                +
00082f ed8b     +LDI R24 , LOW ( 219 )
                +__DELAY_USB_LOOP :
000830 958a     +DEC R24
000831 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 219
                 ; 0002 007D 
                 ; 0002 007E }
                 _0x2000007:
000832 9119      	LD   R17,Y+
000833 9508      	RET
                 ; .FEND
                 ;void Lcd_Chr(unsigned char row, unsigned char column, unsigned char achar)
                 ; 0002 0085 {
                 _Lcd_Chr:
                 ; .FSTART _Lcd_Chr
                 ; 0002 0086 unsigned char add;
                 ; 0002 0087 add = (row==1?0x80:0xC0);
000834 940e 0cd6 	CALL __SAVELOCR4
000836 2f0a      	MOV  R16,R26
000837 813c      	LDD  R19,Y+4
000838 812d      	LDD  R18,Y+5
                 ;	row -> R18
                 ;	column -> R19
                 ;	achar -> R16
                 ;	add -> R17
000839 3021      	CPI  R18,1
00083a f411      	BRNE _0x4004B
00083b e8e0      	LDI  R30,LOW(128)
00083c c001      	RJMP _0x4004C
                 _0x4004B:
00083d ece0      	LDI  R30,LOW(192)
                 _0x4004C:
00083e 2f1e      	MOV  R17,R30
                 ; 0002 0088 add += (column - 1);
00083f 2fe3      	MOV  R30,R19
000840 50e1      	SUBI R30,LOW(1)
000841 0f1e      	ADD  R17,R30
                 ; 0002 0089 Lcd_Cmd(add);
000842 2fa1      	MOV  R26,R17
000843 dfcc      	RCALL _Lcd_Cmd
                 ; 0002 008A Lcd_Chr_Cp(achar);
000844 2fa0      	MOV  R26,R16
000845 dfe3      	RCALL _Lcd_Chr_Cp
                 ; 0002 008B }
000846 940e 0cdd 	CALL __LOADLOCR4
                 _0x2000006:
000848 9626      	ADIW R28,6
000849 9508      	RET
                 ; .FEND
                 ;void Lcd_Out_Cp(unsigned char * str)
                 ; 0002 008E {
                 _Lcd_Out_Cp:
                 ; .FSTART _Lcd_Out_Cp
                 ; 0002 008F unsigned char i = 0;
                 ; 0002 0090 while(str[i])
00084a 940e 0cd6 	CALL __SAVELOCR4
00084c 019d      	MOVW R18,R26
                 ;	*str -> R18,R19
                 ;	i -> R17
00084d e010      	LDI  R17,0
                 _0x4004E:
00084e 01d9      	MOVW R26,R18
00084f 27ee      	CLR  R30
000850 0fa1      	ADD  R26,R17
000851 1fbe      	ADC  R27,R30
000852 91ec      	LD   R30,X
000853 30e0      	CPI  R30,0
000854 f041      	BREQ _0x40050
                 ; 0002 0091 {
                 ; 0002 0092 Lcd_Chr_Cp(str[i]);
000855 01d9      	MOVW R26,R18
000856 27ee      	CLR  R30
000857 0fa1      	ADD  R26,R17
000858 1fbe      	ADC  R27,R30
000859 91ac      	LD   R26,X
00085a dfce      	RCALL _Lcd_Chr_Cp
                 ; 0002 0093 i++;
00085b 5f1f      	SUBI R17,-1
                 ; 0002 0094 }
00085c cff1      	RJMP _0x4004E
                 _0x40050:
                 ; 0002 0095 }
00085d 940c 0910 	JMP  _0x2000002
                 ; .FEND
                 ;void Lcd_Out(unsigned char row, unsigned char column,
                 ; 0002 009D unsigned char* str)
                 ; 0002 009E {
                 _Lcd_Out:
                 ; .FSTART _Lcd_Out
                 ; 0002 009F unsigned char add;
                 ; 0002 00A0 add = (row==1?0x80:0xC0);
00085f 940e 0cd4 	CALL __SAVELOCR6
000861 019d      	MOVW R18,R26
000862 810e      	LDD  R16,Y+6
000863 815f      	LDD  R21,Y+7
                 ;	row -> R21
                 ;	column -> R16
                 ;	*str -> R18,R19
                 ;	add -> R17
000864 3051      	CPI  R21,1
000865 f411      	BRNE _0x40051
000866 e8e0      	LDI  R30,LOW(128)
000867 c001      	RJMP _0x40052
                 _0x40051:
000868 ece0      	LDI  R30,LOW(192)
                 _0x40052:
000869 2f1e      	MOV  R17,R30
                 ; 0002 00A1 add += (column - 1);
00086a 2fe0      	MOV  R30,R16
00086b 50e1      	SUBI R30,LOW(1)
00086c 0f1e      	ADD  R17,R30
                 ; 0002 00A2 Lcd_Cmd(add);
00086d 2fa1      	MOV  R26,R17
00086e dfa1      	RCALL _Lcd_Cmd
                 ; 0002 00A3 Lcd_Out_Cp(str);
00086f 01d9      	MOVW R26,R18
000870 dfd9      	RCALL _Lcd_Out_Cp
                 ; 0002 00A4 }
000871 940e 0cdb 	CALL __LOADLOCR6
000873 9628      	ADIW R28,8
000874 9508      	RET
                 ; .FEND
                 ;void Lcd_Custom_Chr(unsigned char location, unsigned char * lcd_char)
                 ; 0002 00B5 {
                 ; 0002 00B6 unsigned char i;
                 ; 0002 00B7 Lcd_Cmd(0x40+location*8);
                 ;	location -> R16
                 ;	*lcd_char -> R18,R19
                 ;	i -> R17
                 ; 0002 00B8 for (i = 0; i<=7; i++)
                 ; 0002 00B9 Lcd_Chr_Cp(lcd_char[i]);
                 ; 0002 00BA }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;unsigned int SHT20_Read_RH(void){ // Mode no hold master
                 ; 0003 0003 unsigned int SHT20_Read_RH(void){
                 
                 	.CSEG
                 _SHT20_Read_RH:
                 ; .FSTART _SHT20_Read_RH
                 ; 0003 0004 unsigned int do_am = 0;
                 ; 0003 0005 unsigned int do_am1 = 0;
                 ; 0003 0006 I2C_Start();
000875 940e 0cc5 	CALL SUBOPT_0x52
                 ;	do_am -> R16,R17
                 ;	do_am1 -> R18,R19
                 ; 0003 0007 I2C_Send_Byte(0x80);
                 ; 0003 0008 if(I2C_Wait_Ack() == 0){
000877 30e0      	CPI  R30,0
000878 f4c1      	BRNE _0x60003
                 ; 0003 0009 I2C_Send_Byte(0xF5); // gui lenh doc do am (xem trong datasheet)
000879 efa5      	LDI  R26,LOW(245)
00087a d32d      	RCALL SUBOPT_0x29
                 ; 0003 000A if(I2C_Wait_Ack() == 0){
00087b 30e0      	CPI  R30,0
00087c f4a1      	BRNE _0x60004
                 ; 0003 000B delay_us(20);
                +
00087d e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00087e 958a     +DEC R24
00087f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0003 000C I2C_Stop();
000880 d03d      	RCALL _I2C_Stop
                 ; 0003 000D 
                 ; 0003 000E // Cho cho den khi do xong (loi mo phong phai them delay 30 ms (xem datasheet))
                 ; 0003 000F delay_ms(29);
000881 e1ad      	LDI  R26,LOW(29)
000882 e0b0      	LDI  R27,0
000883 940e 0ec4 	CALL _delay_ms
                 ; 0003 0010 while(1){
                 _0x60005:
                 ; 0003 0011 I2C_Start();
000885 d032      	RCALL _I2C_Start
                 ; 0003 0012 I2C_Send_Byte(0x81);
000886 e8a1      	LDI  R26,LOW(129)
000887 d320      	RCALL SUBOPT_0x29
                 ; 0003 0013 if(I2C_Wait_Ack() == 0){
000888 30e0      	CPI  R30,0
000889 f011      	BREQ _0x60007
                 ; 0003 0014 
                 ; 0003 0015 break;
                 ; 0003 0016 }
                 ; 0003 0017 I2C_Stop();
00088a d033      	RCALL _I2C_Stop
                 ; 0003 0018 
                 ; 0003 0019 }
00088b cff9      	RJMP _0x60005
                 _0x60007:
                 ; 0003 001A 
                 ; 0003 001B 
                 ; 0003 001C do_am = I2C_Read_Byte(0);
00088c 940e 0ccd 	CALL SUBOPT_0x53
                 ; 0003 001D do_am <<= 8;
                 ; 0003 001E do_am1 = I2C_Read_Byte(1);
00088e 2733      	CLR  R19
                 ; 0003 001F do_am |= do_am1;
                +
00088f 2b02     +OR R16 , R18
000890 2b13     +OR R17 , R19
                 	__ORWRR 16,17,18,19
                 ; 0003 0020 
                 ; 0003 0021 
                 ; 0003 0022 //            I2C_Read_Byte(1);
                 ; 0003 0023 //            I2C_Wait_Ack();
                 ; 0003 0024 
                 ; 0003 0025 }
                 ; 0003 0026 }
                 _0x60004:
                 ; 0003 0027 I2C_Stop();
                 _0x60003:
000891 d02c      	RCALL _I2C_Stop
                 ; 0003 0028 return do_am;
000892 01f8      	MOVW R30,R16
000893 c07c      	RJMP _0x2000002
                 ; 0003 0029 }
                 ; .FEND
                 ;unsigned int SHT20_Read_T(void){ // Mode no hold master
                 ; 0003 002B unsigned int SHT20_Read_T(void){
                 _SHT20_Read_T:
                 ; .FSTART _SHT20_Read_T
                 ; 0003 002C unsigned int nhiet_do = 0;
                 ; 0003 002D unsigned int nhiet_do1 = 0;
                 ; 0003 002E I2C_Start();
000894 940e 0cc5 	CALL SUBOPT_0x52
                 ;	nhiet_do -> R16,R17
                 ;	nhiet_do1 -> R18,R19
                 ; 0003 002F I2C_Send_Byte(0x80);
                 ; 0003 0030 if(I2C_Wait_Ack() == 0){
000896 30e0      	CPI  R30,0
000897 f4c1      	BRNE _0x60009
                 ; 0003 0031 I2C_Send_Byte(0xF3); // gui lenh doc nhiet do (xem trong datasheet)
000898 efa3      	LDI  R26,LOW(243)
000899 d30e      	RCALL SUBOPT_0x29
                 ; 0003 0032 if(I2C_Wait_Ack() == 0){
00089a 30e0      	CPI  R30,0
00089b f4a1      	BRNE _0x6000A
                 ; 0003 0033 delay_us(20);
                +
00089c e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00089d 958a     +DEC R24
00089e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0003 0034 I2C_Stop();
00089f d01e      	RCALL _I2C_Stop
                 ; 0003 0035 
                 ; 0003 0036 // Cho cho den khi do xong (loi mo phong phai them delay 85 ms (xem datasheet))
                 ; 0003 0037 delay_ms(85);
0008a0 e5a5      	LDI  R26,LOW(85)
0008a1 e0b0      	LDI  R27,0
0008a2 940e 0ec4 	CALL _delay_ms
                 ; 0003 0038 while(1){
                 _0x6000B:
                 ; 0003 0039 I2C_Start();
0008a4 d013      	RCALL _I2C_Start
                 ; 0003 003A I2C_Send_Byte(0x81);
0008a5 e8a1      	LDI  R26,LOW(129)
0008a6 d301      	RCALL SUBOPT_0x29
                 ; 0003 003B if(I2C_Wait_Ack() == 0){
0008a7 30e0      	CPI  R30,0
0008a8 f011      	BREQ _0x6000D
                 ; 0003 003C 
                 ; 0003 003D break;
                 ; 0003 003E }
                 ; 0003 003F I2C_Stop();
0008a9 d014      	RCALL _I2C_Stop
                 ; 0003 0040 
                 ; 0003 0041 }
0008aa cff9      	RJMP _0x6000B
                 _0x6000D:
                 ; 0003 0042 
                 ; 0003 0043 
                 ; 0003 0044 nhiet_do = I2C_Read_Byte(0);
0008ab 940e 0ccd 	CALL SUBOPT_0x53
                 ; 0003 0045 nhiet_do <<= 8;
                 ; 0003 0046 nhiet_do1 = I2C_Read_Byte(1);
0008ad 2733      	CLR  R19
                 ; 0003 0047 nhiet_do |= nhiet_do1;
                +
0008ae 2b02     +OR R16 , R18
0008af 2b13     +OR R17 , R19
                 	__ORWRR 16,17,18,19
                 ; 0003 0048 
                 ; 0003 0049 //            I2C_Read_Byte(1);
                 ; 0003 004A //            I2C_Wait_Ack();
                 ; 0003 004B 
                 ; 0003 004C }
                 ; 0003 004D }
                 _0x6000A:
                 ; 0003 004E I2C_Stop();
                 _0x60009:
0008b0 d00d      	RCALL _I2C_Stop
                 ; 0003 004F return nhiet_do;
0008b1 01f8      	MOVW R30,R16
0008b2 c05d      	RJMP _0x2000002
                 ; 0003 0050 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void I2C_Init(void){
                 ; 0004 0003 void I2C_Init(void){
                 
                 	.CSEG
                 _I2C_Init:
                 ; .FSTART _I2C_Init
                 ; 0004 0004 // PORT C config
                 ; 0004 0005 DDRC |= (1<<DDC5) | (1<<DDC4);
0008b3 b1e7      	IN   R30,0x7
0008b4 63e0      	ORI  R30,LOW(0x30)
0008b5 b9e7      	OUT  0x7,R30
                 ; 0004 0006 
                 ; 0004 0007 I2C_SCL = 1;
0008b6 9a45      	SBI  0x8,5
                 ; 0004 0008 I2C_SDA = 1;
0008b7 c00c      	RJMP _0x2000005
                 ; 0004 0009 }
                 ; .FEND
                 ;void I2C_Start(void){
                 ; 0004 000A void I2C_Start(void){
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0004 000B SDA_OUT();
0008b8 9a3c      	SBI  0x7,4
                 ; 0004 000C I2C_SCL = 1;
0008b9 9a45      	SBI  0x8,5
                 ; 0004 000D I2C_SDA = 1;
0008ba 9a44      	SBI  0x8,4
                 ; 0004 000E delay_ms(1);
0008bb d090      	RCALL SUBOPT_0x3
                 ; 0004 000F I2C_SDA = 0;
0008bc 9844      	CBI  0x8,4
                 ; 0004 0010 delay_ms(1);
0008bd c02f      	RJMP _0x2000004
                 ; 0004 0011 I2C_SCL = 0;
                 ; 0004 0012 }
                 ; .FEND
                 ;void I2C_Stop(void){
                 ; 0004 0014 void I2C_Stop(void){
                 _I2C_Stop:
                 ; .FSTART _I2C_Stop
                 ; 0004 0015 SDA_OUT();
0008be 9a3c      	SBI  0x7,4
                 ; 0004 0016 I2C_SCL = 0;
0008bf 9845      	CBI  0x8,5
                 ; 0004 0017 I2C_SDA = 0;
0008c0 9844      	CBI  0x8,4
                 ; 0004 0018 delay_ms(1);
0008c1 d08a      	RCALL SUBOPT_0x3
                 ; 0004 0019 I2C_SCL = 1;
0008c2 9a45      	SBI  0x8,5
                 ; 0004 001A delay_ms(1);
0008c3 d088      	RCALL SUBOPT_0x3
                 ; 0004 001B I2C_SDA = 1;
                 _0x2000005:
0008c4 9a44      	SBI  0x8,4
                 ; 0004 001C }
0008c5 9508      	RET
                 ; .FEND
                 ;void I2C_Send_Byte(unsigned char txd){ // truyen tu bit cao den bit thap
                 ; 0004 0021 void I2C_Send_Byte(unsigned char txd){
                 _I2C_Send_Byte:
                 ; .FSTART _I2C_Send_Byte
                 ; 0004 0022 unsigned char i = 0;
                 ; 0004 0023 SDA_OUT();
0008c6 931a      	ST   -Y,R17
0008c7 930a      	ST   -Y,R16
0008c8 2f0a      	MOV  R16,R26
                 ;	txd -> R16
                 ;	i -> R17
0008c9 e010      	LDI  R17,0
0008ca 9a3c      	SBI  0x7,4
                 ; 0004 0024 I2C_SCL = 0;
0008cb 9845      	CBI  0x8,5
                 ; 0004 0025 for(i = 0; i < 8; i++){
0008cc e010      	LDI  R17,LOW(0)
                 _0x8001A:
0008cd 3018      	CPI  R17,8
0008ce f498      	BRSH _0x8001B
                 ; 0004 0026 I2C_SDA = (txd & 0x80) >> 7;
0008cf 2fe0      	MOV  R30,R16
0008d0 78e0      	ANDI R30,LOW(0x80)
0008d1 e0f0      	LDI  R31,0
0008d2 940e 0d03 	CALL __ASRW3
0008d4 940e 0d01 	CALL __ASRW4
0008d6 30e0      	CPI  R30,0
0008d7 f411      	BRNE _0x8001C
0008d8 9844      	CBI  0x8,4
0008d9 c001      	RJMP _0x8001D
                 _0x8001C:
0008da 9a44      	SBI  0x8,4
                 _0x8001D:
                 ; 0004 0027 txd <<= 1;
0008db 0f00      	LSL  R16
                 ; 0004 0028 delay_ms(1);
0008dc d06f      	RCALL SUBOPT_0x3
                 ; 0004 0029 I2C_SCL = 1;
0008dd 9a45      	SBI  0x8,5
                 ; 0004 002A delay_ms(1);
0008de d06d      	RCALL SUBOPT_0x3
                 ; 0004 002B I2C_SCL = 0;
0008df 9845      	CBI  0x8,5
                 ; 0004 002C }
0008e0 5f1f      	SUBI R17,-1
0008e1 cfeb      	RJMP _0x8001A
                 _0x8001B:
                 ; 0004 002D }
0008e2 c043      	RJMP _0x2000001
                 ; .FEND
                 ;void I2C_Ack(void){
                 ; 0004 002F void I2C_Ack(void){
                 _I2C_Ack:
                 ; .FSTART _I2C_Ack
                 ; 0004 0030 SDA_OUT();
0008e3 9a3c      	SBI  0x7,4
                 ; 0004 0031 I2C_SDA = 0;
0008e4 9844      	CBI  0x8,4
                 ; 0004 0032 delay_ms(1);
0008e5 c002      	RJMP _0x2000003
                 ; 0004 0033 I2C_SCL = 1;
                 ; 0004 0034 delay_ms(1);
                 ; 0004 0035 I2C_SCL = 0;
                 ; 0004 0036 }
                 ; .FEND
                 ;void I2C_NAck(void){
                 ; 0004 0038 void I2C_NAck(void){
                 _I2C_NAck:
                 ; .FSTART _I2C_NAck
                 ; 0004 0039 SDA_OUT();
0008e6 9a3c      	SBI  0x7,4
                 ; 0004 003A I2C_SDA = 1;
0008e7 9a44      	SBI  0x8,4
                 ; 0004 003B delay_ms(1);
                 _0x2000003:
0008e8 e0a1      	LDI  R26,LOW(1)
0008e9 e0b0      	LDI  R27,0
0008ea 940e 0ec4 	CALL _delay_ms
                 ; 0004 003C I2C_SCL = 1;
0008ec 9a45      	SBI  0x8,5
                 ; 0004 003D delay_ms(1);
                 _0x2000004:
0008ed e0a1      	LDI  R26,LOW(1)
0008ee e0b0      	LDI  R27,0
0008ef 940e 0ec4 	CALL _delay_ms
                 ; 0004 003E I2C_SCL = 0;
0008f1 9845      	CBI  0x8,5
                 ; 0004 003F }
0008f2 9508      	RET
                 ; .FEND
                 ;unsigned char I2C_Read_Byte(unsigned char ack){ // nhan tu bit cao den bit thap
                 ; 0004 0044 unsigned char I2C_Read_Byte(unsigned char ack){
                 _I2C_Read_Byte:
                 ; .FSTART _I2C_Read_Byte
                 ; 0004 0045 unsigned char i = 0;
                 ; 0004 0046 unsigned char dat = 0;
                 ; 0004 0047 SDA_OUT();
0008f3 d3e2      	RCALL __SAVELOCR4
0008f4 2f3a      	MOV  R19,R26
                 ;	ack -> R19
                 ;	i -> R17
                 ;	dat -> R16
0008f5 e010      	LDI  R17,0
0008f6 e000      	LDI  R16,0
0008f7 9a3c      	SBI  0x7,4
                 ; 0004 0048 I2C_SDA = 1; // san sang nhan du lieu
0008f8 9a44      	SBI  0x8,4
                 ; 0004 0049 SDA_IN();
0008f9 983c      	CBI  0x7,4
                 ; 0004 004A I2C_SCL = 0;
0008fa 9845      	CBI  0x8,5
                 ; 0004 004B for(i = 0; i < 8; i++){
0008fb e010      	LDI  R17,LOW(0)
                 _0x80033:
0008fc 3018      	CPI  R17,8
0008fd f460      	BRSH _0x80034
                 ; 0004 004C READ_SDA = 1; // cho SDA = 1 de san sang nhan du lieu
0008fe 9a34      	SBI  0x6,4
                 ; 0004 004D delay_ms(1);
0008ff d04c      	RCALL SUBOPT_0x3
                 ; 0004 004E I2C_SCL = 1;
000900 9a45      	SBI  0x8,5
                 ; 0004 004F delay_ms(1);
000901 d04a      	RCALL SUBOPT_0x3
                 ; 0004 0050 dat <<= 1;
000902 0f00      	LSL  R16
                 ; 0004 0051 dat |= READ_SDA; // muon doc du lieu tu SDA
000903 e0e0      	LDI  R30,0
000904 9934      	SBIC 0x6,4
000905 e0e1      	LDI  R30,1
000906 2b0e      	OR   R16,R30
                 ; 0004 0052 I2C_SCL = 0;
000907 9845      	CBI  0x8,5
                 ; 0004 0053 }
000908 5f1f      	SUBI R17,-1
000909 cff2      	RJMP _0x80033
                 _0x80034:
                 ; 0004 0054 // SDA = 0 -> ACK
                 ; 0004 0055 // SDA = 1 -> NACK
                 ; 0004 0056 if(ack == 0){
00090a 3030      	CPI  R19,0
00090b f411      	BRNE _0x8003B
                 ; 0004 0057 I2C_Ack();
00090c dfd6      	RCALL _I2C_Ack
                 ; 0004 0058 }
                 ; 0004 0059 else{
00090d c001      	RJMP _0x8003C
                 _0x8003B:
                 ; 0004 005A I2C_NAck();
00090e dfd7      	RCALL _I2C_NAck
                 ; 0004 005B }
                 _0x8003C:
                 ; 0004 005C return dat;
00090f 2fe0      	MOV  R30,R16
                 _0x2000002:
000910 d3cc      	RCALL __LOADLOCR4
000911 9624      	ADIW R28,4
000912 9508      	RET
                 ; 0004 005D }
                 ; .FEND
                 ;unsigned char I2C_Wait_Ack(void){
                 ; 0004 005F unsigned char I2C_Wait_Ack(void){
                 _I2C_Wait_Ack:
                 ; .FSTART _I2C_Wait_Ack
                 ; 0004 0060 unsigned char result = 0;
                 ; 0004 0061 unsigned char time = 0;
                 ; 0004 0062 SDA_IN();
000913 931a      	ST   -Y,R17
000914 930a      	ST   -Y,R16
                 ;	result -> R17
                 ;	time -> R16
000915 e010      	LDI  R17,0
000916 e000      	LDI  R16,0
000917 983c      	CBI  0x7,4
                 ; 0004 0063 I2C_SDA = 1;
000918 9a44      	SBI  0x8,4
                 ; 0004 0064 delay_ms(1);
000919 d032      	RCALL SUBOPT_0x3
                 ; 0004 0065 I2C_SCL = 1;
00091a 9a45      	SBI  0x8,5
                 ; 0004 0066 delay_ms(1);
00091b d030      	RCALL SUBOPT_0x3
                 ; 0004 0067 while(READ_SDA){ // muon doc du lieu tu SDA
                 _0x80041:
00091c 9b34      	SBIS 0x6,4
00091d c006      	RJMP _0x80043
                 ; 0004 0068 time++;
00091e 5f0f      	SUBI R16,-1
                 ; 0004 0069 if(time > 250){
00091f 3f0b      	CPI  R16,251
000920 f010      	BRLO _0x80044
                 ; 0004 006A result = 1;
000921 e011      	LDI  R17,LOW(1)
                 ; 0004 006B break;
000922 c001      	RJMP _0x80043
                 ; 0004 006C }
                 ; 0004 006D }
                 _0x80044:
000923 cff8      	RJMP _0x80041
                 _0x80043:
                 ; 0004 006E I2C_SCL = 0;
000924 9845      	CBI  0x8,5
                 ; 0004 006F return result;
000925 2fe1      	MOV  R30,R17
                 _0x2000001:
000926 9109      	LD   R16,Y+
000927 9119      	LD   R17,Y+
000928 9508      	RET
                 ; 0004 0070 }
                 ; .FEND
                 
                 	.DSEG
                 _a_date:
00034c           	.BYTE 0x1
                 _a_month:
00034d           	.BYTE 0x1
                 _a_year:
00034e           	.BYTE 0x1
                 _flag:
00034f           	.BYTE 0x1
                 _dayOfWeek:
000350           	.BYTE 0xE
                 _dayOfMonth:
00035e           	.BYTE 0x18
                 _change_mode:
000376           	.BYTE 0x1
                 _address:
000377           	.BYTE 0x1
                 _do_am:
000378           	.BYTE 0x2
                 _nhiet_do:
00037a           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000929 940e 0e32 	CALL __MULF12
00092b 01df      	MOVW R26,R30
00092c 01cb      	MOVW R24,R22
                +
00092d e0e0     +LDI R30 , LOW ( 0x47800000 )
00092e e0f0     +LDI R31 , HIGH ( 0x47800000 )
00092f e860     +LDI R22 , BYTE3 ( 0x47800000 )
000930 e477     +LDI R23 , BYTE4 ( 0x47800000 )
                 	__GETD1N 0x47800000
000931 940e 0e80 	CALL __DIVF21
000933 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000934 940e 0d77 	CALL __CFD1U
000936 93ed      	ST   X+,R30
000937 93fc      	ST   X,R31
000938 e0a1      	LDI  R26,LOW(1)
000939 e0b0      	LDI  R27,0
00093a 940c 0ec4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x2:
00093c e0e8      	LDI  R30,LOW(8)
00093d e0f0      	LDI  R31,HIGH(8)
00093e 93fa      	ST   -Y,R31
00093f 93ea      	ST   -Y,R30
000940 e0e7      	LDI  R30,LOW(7)
000941 e0f0      	LDI  R31,HIGH(7)
000942 93fa      	ST   -Y,R31
000943 93ea      	ST   -Y,R30
000944 e0ea      	LDI  R30,LOW(10)
000945 e0f0      	LDI  R31,HIGH(10)
000946 93fa      	ST   -Y,R31
000947 93ea      	ST   -Y,R30
000948 e0a9      	LDI  R26,LOW(9)
000949 e0b0      	LDI  R27,HIGH(9)
00094a 940c 04d4 	JMP  _DS1307_Get_Date
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3:
00094c e0a1      	LDI  R26,LOW(1)
00094d e0b0      	LDI  R27,0
00094e 940c 0ec4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x4:
000950 e0e3      	LDI  R30,LOW(3)
000951 e0f0      	LDI  R31,HIGH(3)
000952 93fa      	ST   -Y,R31
000953 93ea      	ST   -Y,R30
000954 e0e6      	LDI  R30,LOW(6)
000955 e0f0      	LDI  R31,HIGH(6)
000956 93fa      	ST   -Y,R31
000957 93ea      	ST   -Y,R30
000958 e0e5      	LDI  R30,LOW(5)
000959 e0f0      	LDI  R31,HIGH(5)
00095a 93fa      	ST   -Y,R31
00095b 93ea      	ST   -Y,R30
00095c e4af      	LDI  R26,LOW(_flag)
00095d e0b3      	LDI  R27,HIGH(_flag)
00095e 940c 0493 	JMP  _DS1307_Get_Time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5:
000960 e0e1      	LDI  R30,LOW(1)
000961 93ea      	ST   -Y,R30
000962 93ea      	ST   -Y,R30
000963 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:273 WORDS
                 SUBOPT_0x6:
000964 2da7      	MOV  R26,R7
000965 e0b0      	LDI  R27,0
000966 e0ea      	LDI  R30,LOW(10)
000967 e0f0      	LDI  R31,HIGH(10)
000968 940e 0d22 	CALL __DIVW21
00096a 5de0      	SUBI R30,-LOW(48)
00096b 2fae      	MOV  R26,R30
00096c 940e 0834 	CALL _Lcd_Chr
00096e 2da7      	MOV  R26,R7
00096f 27bb      	CLR  R27
000970 e0ea      	LDI  R30,LOW(10)
000971 e0f0      	LDI  R31,HIGH(10)
000972 940e 0d2a 	CALL __MODW21
000974 5de0      	SUBI R30,-LOW(48)
000975 2fae      	MOV  R26,R30
000976 940e 0829 	CALL _Lcd_Chr_Cp
000978 e2af      	LDI  R26,LOW(47)
000979 940e 0829 	CALL _Lcd_Chr_Cp
00097b 2daa      	MOV  R26,R10
00097c e0b0      	LDI  R27,0
00097d e0ea      	LDI  R30,LOW(10)
00097e e0f0      	LDI  R31,HIGH(10)
00097f 940e 0d22 	CALL __DIVW21
000981 5de0      	SUBI R30,-LOW(48)
000982 2fae      	MOV  R26,R30
000983 940e 0829 	CALL _Lcd_Chr_Cp
000985 2daa      	MOV  R26,R10
000986 27bb      	CLR  R27
000987 e0ea      	LDI  R30,LOW(10)
000988 e0f0      	LDI  R31,HIGH(10)
000989 940e 0d2a 	CALL __MODW21
00098b 5de0      	SUBI R30,-LOW(48)
00098c 2fae      	MOV  R26,R30
00098d 940e 0829 	CALL _Lcd_Chr_Cp
00098f e2af      	LDI  R26,LOW(47)
000990 940e 0829 	CALL _Lcd_Chr_Cp
000992 2da9      	MOV  R26,R9
000993 e0b0      	LDI  R27,0
000994 e0ea      	LDI  R30,LOW(10)
000995 e0f0      	LDI  R31,HIGH(10)
000996 940e 0d22 	CALL __DIVW21
000998 5de0      	SUBI R30,-LOW(48)
000999 2fae      	MOV  R26,R30
00099a 940e 0829 	CALL _Lcd_Chr_Cp
00099c 2da9      	MOV  R26,R9
00099d 27bb      	CLR  R27
00099e e0ea      	LDI  R30,LOW(10)
00099f e0f0      	LDI  R31,HIGH(10)
0009a0 940e 0d2a 	CALL __MODW21
0009a2 5de0      	SUBI R30,-LOW(48)
0009a3 2fae      	MOV  R26,R30
0009a4 940e 0829 	CALL _Lcd_Chr_Cp
0009a6 e2a0      	LDI  R26,LOW(32)
0009a7 940e 0829 	CALL _Lcd_Chr_Cp
0009a9 2da8      	MOV  R26,R8
0009aa 27bb      	CLR  R27
0009ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:75 WORDS
                 SUBOPT_0x7:
0009ac e0e7      	LDI  R30,LOW(7)
0009ad e0f0      	LDI  R31,HIGH(7)
0009ae 940e 0d2a 	CALL __MODW21
0009b0 e5a0      	LDI  R26,LOW(_dayOfWeek)
0009b1 e0b3      	LDI  R27,HIGH(_dayOfWeek)
0009b2 0fee      	LSL  R30
0009b3 1fff      	ROL  R31
0009b4 0fae      	ADD  R26,R30
0009b5 1fbf      	ADC  R27,R31
0009b6 91ed      	LD   R30,X+
0009b7 91fd      	LD   R31,X+
0009b8 01df      	MOVW R26,R30
0009b9 940c 084a 	JMP  _Lcd_Out_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
0009bb e0e2      	LDI  R30,LOW(2)
0009bc 93ea      	ST   -Y,R30
0009bd e0e1      	LDI  R30,LOW(1)
0009be 93ea      	ST   -Y,R30
0009bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x9:
0009c0 2da5      	MOV  R26,R5
0009c1 e0b0      	LDI  R27,0
0009c2 e0ea      	LDI  R30,LOW(10)
0009c3 e0f0      	LDI  R31,HIGH(10)
0009c4 940e 0d22 	CALL __DIVW21
0009c6 5de0      	SUBI R30,-LOW(48)
0009c7 2fae      	MOV  R26,R30
0009c8 940e 0834 	CALL _Lcd_Chr
0009ca 2da5      	MOV  R26,R5
0009cb 27bb      	CLR  R27
0009cc e0ea      	LDI  R30,LOW(10)
0009cd e0f0      	LDI  R31,HIGH(10)
0009ce 940e 0d2a 	CALL __MODW21
0009d0 5de0      	SUBI R30,-LOW(48)
0009d1 2fae      	MOV  R26,R30
0009d2 940c 0829 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:177 WORDS
                 SUBOPT_0xA:
0009d4 2da6      	MOV  R26,R6
0009d5 e0b0      	LDI  R27,0
0009d6 e0ea      	LDI  R30,LOW(10)
0009d7 e0f0      	LDI  R31,HIGH(10)
0009d8 940e 0d22 	CALL __DIVW21
0009da 5de0      	SUBI R30,-LOW(48)
0009db 2fae      	MOV  R26,R30
0009dc 940e 0829 	CALL _Lcd_Chr_Cp
0009de 2da6      	MOV  R26,R6
0009df 27bb      	CLR  R27
0009e0 e0ea      	LDI  R30,LOW(10)
0009e1 e0f0      	LDI  R31,HIGH(10)
0009e2 940e 0d2a 	CALL __MODW21
0009e4 5de0      	SUBI R30,-LOW(48)
0009e5 2fae      	MOV  R26,R30
0009e6 940e 0829 	CALL _Lcd_Chr_Cp
0009e8 e2a0      	LDI  R26,LOW(32)
0009e9 940e 0829 	CALL _Lcd_Chr_Cp
0009eb e3aa      	LDI  R26,LOW(58)
0009ec 940e 0829 	CALL _Lcd_Chr_Cp
0009ee e2a0      	LDI  R26,LOW(32)
0009ef 940e 0829 	CALL _Lcd_Chr_Cp
0009f1 2da3      	MOV  R26,R3
0009f2 e0b0      	LDI  R27,0
0009f3 e0ea      	LDI  R30,LOW(10)
0009f4 e0f0      	LDI  R31,HIGH(10)
0009f5 940e 0d22 	CALL __DIVW21
0009f7 5de0      	SUBI R30,-LOW(48)
0009f8 2fae      	MOV  R26,R30
0009f9 940e 0829 	CALL _Lcd_Chr_Cp
0009fb 2da3      	MOV  R26,R3
0009fc 27bb      	CLR  R27
0009fd e0ea      	LDI  R30,LOW(10)
0009fe e0f0      	LDI  R31,HIGH(10)
0009ff 940e 0d2a 	CALL __MODW21
000a01 5de0      	SUBI R30,-LOW(48)
000a02 2fae      	MOV  R26,R30
000a03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
000a04 91a0 037a 	LDS  R26,_nhiet_do
000a06 91b0 037b 	LDS  R27,_nhiet_do+1
000a08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000a09 e1e0      	LDI  R30,LOW(10000)
000a0a e2f7      	LDI  R31,HIGH(10000)
000a0b 940e 0d0f 	CALL __DIVW21U
000a0d 5de0      	SUBI R30,-LOW(48)
000a0e 2fae      	MOV  R26,R30
000a0f 940c 0834 	JMP  _Lcd_Chr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
000a11 eee8      	LDI  R30,LOW(1000)
000a12 e0f3      	LDI  R31,HIGH(1000)
000a13 940e 0d0f 	CALL __DIVW21U
000a15 01df      	MOVW R26,R30
000a16 e0ea      	LDI  R30,LOW(10)
000a17 e0f0      	LDI  R31,HIGH(10)
000a18 940e 0d27 	CALL __MODW21U
000a1a 5de0      	SUBI R30,-LOW(48)
000a1b 2fae      	MOV  R26,R30
000a1c 940c 0829 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000a1e 940e 0829 	CALL _Lcd_Chr_Cp
000a20 cfe3      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
000a21 e6e4      	LDI  R30,LOW(100)
000a22 e0f0      	LDI  R31,HIGH(100)
000a23 940e 0d0f 	CALL __DIVW21U
000a25 01df      	MOVW R26,R30
000a26 e0ea      	LDI  R30,LOW(10)
000a27 e0f0      	LDI  R31,HIGH(10)
000a28 940e 0d27 	CALL __MODW21U
000a2a 5de0      	SUBI R30,-LOW(48)
000a2b 2fae      	MOV  R26,R30
000a2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x10:
000a2d e0ea      	LDI  R30,LOW(10)
000a2e e0f0      	LDI  R31,HIGH(10)
000a2f 940e 0d0f 	CALL __DIVW21U
000a31 01df      	MOVW R26,R30
000a32 e0ea      	LDI  R30,LOW(10)
000a33 e0f0      	LDI  R31,HIGH(10)
000a34 940e 0d27 	CALL __MODW21U
000a36 5de0      	SUBI R30,-LOW(48)
000a37 2fae      	MOV  R26,R30
000a38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000a39 e0ea      	LDI  R30,LOW(10)
000a3a e0f0      	LDI  R31,HIGH(10)
000a3b 940e 0d27 	CALL __MODW21U
000a3d 5de0      	SUBI R30,-LOW(48)
000a3e 2fae      	MOV  R26,R30
000a3f 940c 0829 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000a41 91a0 0378 	LDS  R26,_do_am
000a43 91b0 0379 	LDS  R27,_do_am+1
000a45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x13:
000a46 920a      	ST   -Y,R0
000a47 921a      	ST   -Y,R1
000a48 92fa      	ST   -Y,R15
000a49 936a      	ST   -Y,R22
000a4a 937a      	ST   -Y,R23
000a4b 938a      	ST   -Y,R24
000a4c 939a      	ST   -Y,R25
000a4d 93aa      	ST   -Y,R26
000a4e 93ba      	ST   -Y,R27
000a4f 93ea      	ST   -Y,R30
000a50 93fa      	ST   -Y,R31
000a51 b7ef      	IN   R30,SREG
000a52 93ea      	ST   -Y,R30
000a53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x14:
000a54 e1a4      	LDI  R26,LOW(20)
000a55 e0b0      	LDI  R27,0
000a56 940c 0ec4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000a58 e3a2      	LDI  R26,LOW(50)
000a59 e0b0      	LDI  R27,0
000a5a 940c 0ec4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000a5c d277      	RCALL __SAVELOCR6
                +
000a5d e021     +LDI R18 , LOW ( 1 )
000a5e e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
000a5f e050      	LDI  R21,0
000a60 e14e      	LDI  R20,30
000a61 cff2      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000a62 940e 0449 	CALL _adjust
000a64 e0e0      	LDI  R30,LOW(0)
000a65 93e0 034f 	STS  _flag,R30
000a67 93e0 0376 	STS  _change_mode,R30
000a69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000a6a 940e 084a 	CALL _Lcd_Out_Cp
000a6c cf67      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000a6d e8a0      	LDI  R26,LOW(128)
000a6e 940e 0810 	CALL _Lcd_Cmd
000a70 e0af      	LDI  R26,LOW(15)
000a71 940e 0810 	CALL _Lcd_Cmd
                +
000a73 e021     +LDI R18 , LOW ( 1 )
000a74 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
000a75 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
000a76 e050      	LDI  R21,LOW(0)
000a77 2fe2      	MOV  R30,R18
000a78 58e1      	SUBI R30,-LOW(127)
000a79 93e0 0377 	STS  _address,R30
000a7b 91a0 0377 	LDS  R26,_address
000a7d 940c 0810 	JMP  _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1B:
000a7f e051      	LDI  R21,LOW(1)
000a80 2fe2      	MOV  R30,R18
000a81 54e1      	SUBI R30,-LOW(191)
000a82 93e0 0377 	STS  _address,R30
000a84 91a0 0377 	LDS  R26,_address
000a86 940c 0810 	JMP  _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1C:
000a88 91a0 0377 	LDS  R26,_address
000a8a 940c 0810 	JMP  _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1D:
000a8c 2dea      	MOV  R30,R10
000a8d e0f0      	LDI  R31,0
000a8e 9731      	SBIW R30,1
000a8f e5ae      	LDI  R26,LOW(_dayOfMonth)
000a90 e0b3      	LDI  R27,HIGH(_dayOfMonth)
000a91 0fee      	LSL  R30
000a92 1fff      	ROL  R31
000a93 0fae      	ADD  R26,R30
000a94 1fbf      	ADC  R27,R31
000a95 91ec      	LD   R30,X
000a96 5ee2      	SUBI R30,-LOW(30)
000a97 2f4e      	MOV  R20,R30
000a98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1E:
000a99 e0e8      	LDI  R30,LOW(8)
000a9a e0f0      	LDI  R31,HIGH(8)
000a9b 93fa      	ST   -Y,R31
000a9c 93ea      	ST   -Y,R30
000a9d e0e7      	LDI  R30,LOW(7)
000a9e e0f0      	LDI  R31,HIGH(7)
000a9f 93fa      	ST   -Y,R31
000aa0 93ea      	ST   -Y,R30
000aa1 e0ea      	LDI  R30,LOW(10)
000aa2 e0f0      	LDI  R31,HIGH(10)
000aa3 93fa      	ST   -Y,R31
000aa4 93ea      	ST   -Y,R30
000aa5 e0e9      	LDI  R30,LOW(9)
000aa6 e0f0      	LDI  R31,HIGH(9)
000aa7 93fa      	ST   -Y,R31
000aa8 93ea      	ST   -Y,R30
000aa9 934a      	ST   -Y,R20
000aaa 933a      	ST   -Y,R19
000aab 932a      	ST   -Y,R18
000aac 01d8      	MOVW R26,R16
000aad 940e 0502 	CALL _DS1307_Set_Date
000aaf ceb0      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1F:
000ab0 e0e3      	LDI  R30,LOW(3)
000ab1 e0f0      	LDI  R31,HIGH(3)
000ab2 93fa      	ST   -Y,R31
000ab3 93ea      	ST   -Y,R30
000ab4 e0e6      	LDI  R30,LOW(6)
000ab5 e0f0      	LDI  R31,HIGH(6)
000ab6 93fa      	ST   -Y,R31
000ab7 93ea      	ST   -Y,R30
000ab8 e0e5      	LDI  R30,LOW(5)
000ab9 e0f0      	LDI  R31,HIGH(5)
000aba 93fa      	ST   -Y,R31
000abb 93ea      	ST   -Y,R30
000abc 933a      	ST   -Y,R19
000abd 932a      	ST   -Y,R18
000abe 01d8      	MOVW R26,R16
000abf 940e 0682 	CALL _DS1307_Set_Time
000ac1 cef9      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:105 WORDS
                 SUBOPT_0x20:
000ac2 81ae      	LDD  R26,Y+6
000ac3 e0b0      	LDI  R27,0
000ac4 e0ea      	LDI  R30,LOW(10)
000ac5 e0f0      	LDI  R31,HIGH(10)
000ac6 940e 0d22 	CALL __DIVW21
000ac8 83ef      	STD  Y+7,R30
000ac9 95e2      	SWAP R30
000aca 7fe0      	ANDI R30,0xF0
000acb 83ef      	STD  Y+7,R30
000acc 81ae      	LDD  R26,Y+6
000acd 27bb      	CLR  R27
000ace e0ea      	LDI  R30,LOW(10)
000acf e0f0      	LDI  R31,HIGH(10)
000ad0 940e 0d2a 	CALL __MODW21
000ad2 81af      	LDD  R26,Y+7
000ad3 2bea      	OR   R30,R26
000ad4 83ef      	STD  Y+7,R30
000ad5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x21:
000ad6 93ea      	ST   -Y,R30
000ad7 85a8      	LDD  R26,Y+8
000ad8 940c 0436 	JMP  _DS1307_Receive
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
000ada e0ac      	LDI  R26,LOW(12)
000adb 940e 0810 	CALL _Lcd_Cmd
000add e0a1      	LDI  R26,LOW(1)
000ade 940e 0810 	CALL _Lcd_Cmd
000ae0 d1fa      	RCALL __LOADLOCR6
000ae1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x23:
000ae2 e0ed      	LDI  R30,LOW(13)
000ae3 e0f0      	LDI  R31,HIGH(13)
000ae4 93fa      	ST   -Y,R31
000ae5 93ea      	ST   -Y,R30
000ae6 e4ec      	LDI  R30,LOW(_a_date)
000ae7 e0f3      	LDI  R31,HIGH(_a_date)
000ae8 93fa      	ST   -Y,R31
000ae9 93ea      	ST   -Y,R30
000aea e4ed      	LDI  R30,LOW(_a_month)
000aeb e0f3      	LDI  R31,HIGH(_a_month)
000aec 93fa      	ST   -Y,R31
000aed 93ea      	ST   -Y,R30
000aee e4ee      	LDI  R30,LOW(_a_year)
000aef e0f3      	LDI  R31,HIGH(_a_year)
000af0 93fa      	ST   -Y,R31
000af1 93ea      	ST   -Y,R30
000af2 934a      	ST   -Y,R20
000af3 933a      	ST   -Y,R19
000af4 932a      	ST   -Y,R18
000af5 01d8      	MOVW R26,R16
000af6 940e 0502 	CALL _DS1307_Set_Date
000af8 ce67      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:72 WORDS
                 SUBOPT_0x24:
000af9 91a0 034c 	LDS  R26,_a_date
000afb e0b0      	LDI  R27,0
000afc e0ea      	LDI  R30,LOW(10)
000afd e0f0      	LDI  R31,HIGH(10)
000afe 940e 0d22 	CALL __DIVW21
000b00 5de0      	SUBI R30,-LOW(48)
000b01 2fae      	MOV  R26,R30
000b02 940e 0834 	CALL _Lcd_Chr
000b04 91a0 034c 	LDS  R26,_a_date
000b06 27bb      	CLR  R27
000b07 e0ea      	LDI  R30,LOW(10)
000b08 e0f0      	LDI  R31,HIGH(10)
000b09 940e 0d2a 	CALL __MODW21
000b0b 5de0      	SUBI R30,-LOW(48)
000b0c 2fae      	MOV  R26,R30
000b0d 940e 0829 	CALL _Lcd_Chr_Cp
000b0f e2af      	LDI  R26,LOW(47)
000b10 940e 0829 	CALL _Lcd_Chr_Cp
000b12 91a0 034d 	LDS  R26,_a_month
000b14 e0b0      	LDI  R27,0
000b15 e0ea      	LDI  R30,LOW(10)
000b16 e0f0      	LDI  R31,HIGH(10)
000b17 940e 0d22 	CALL __DIVW21
000b19 5de0      	SUBI R30,-LOW(48)
000b1a 2fae      	MOV  R26,R30
000b1b 940e 0829 	CALL _Lcd_Chr_Cp
000b1d 91a0 034d 	LDS  R26,_a_month
000b1f 27bb      	CLR  R27
000b20 e0ea      	LDI  R30,LOW(10)
000b21 e0f0      	LDI  R31,HIGH(10)
000b22 940e 0d2a 	CALL __MODW21
000b24 5de0      	SUBI R30,-LOW(48)
000b25 2fae      	MOV  R26,R30
000b26 940e 0829 	CALL _Lcd_Chr_Cp
000b28 e2af      	LDI  R26,LOW(47)
000b29 940e 0829 	CALL _Lcd_Chr_Cp
000b2b 91a0 034e 	LDS  R26,_a_year
000b2d e0b0      	LDI  R27,0
000b2e e0ea      	LDI  R30,LOW(10)
000b2f e0f0      	LDI  R31,HIGH(10)
000b30 940e 0d22 	CALL __DIVW21
000b32 5de0      	SUBI R30,-LOW(48)
000b33 2fae      	MOV  R26,R30
000b34 940e 0829 	CALL _Lcd_Chr_Cp
000b36 91a0 034e 	LDS  R26,_a_year
000b38 27bb      	CLR  R27
000b39 e0ea      	LDI  R30,LOW(10)
000b3a e0f0      	LDI  R31,HIGH(10)
000b3b 940e 0d2a 	CALL __MODW21
000b3d 5de0      	SUBI R30,-LOW(48)
000b3e 2fae      	MOV  R26,R30
000b3f 940e 0829 	CALL _Lcd_Chr_Cp
000b41 e2a0      	LDI  R26,LOW(32)
000b42 940e 0829 	CALL _Lcd_Chr_Cp
000b44 2dad      	MOV  R26,R13
000b45 27bb      	CLR  R27
000b46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x25:
000b47 e0ec      	LDI  R30,LOW(12)
000b48 e0f0      	LDI  R31,HIGH(12)
000b49 93fa      	ST   -Y,R31
000b4a 93ea      	ST   -Y,R30
000b4b e0eb      	LDI  R30,LOW(11)
000b4c e0f0      	LDI  R31,HIGH(11)
000b4d 93fa      	ST   -Y,R31
000b4e 93ea      	ST   -Y,R30
000b4f e0ee      	LDI  R30,LOW(14)
000b50 e0f0      	LDI  R31,HIGH(14)
000b51 93fa      	ST   -Y,R31
000b52 93ea      	ST   -Y,R30
000b53 933a      	ST   -Y,R19
000b54 932a      	ST   -Y,R18
000b55 01d8      	MOVW R26,R16
000b56 940e 0682 	CALL _DS1307_Set_Time
000b58 ce62      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x26:
000b59 2dae      	MOV  R26,R14
000b5a e0b0      	LDI  R27,0
000b5b e0ea      	LDI  R30,LOW(10)
000b5c e0f0      	LDI  R31,HIGH(10)
000b5d 940e 0d22 	CALL __DIVW21
000b5f 5de0      	SUBI R30,-LOW(48)
000b60 2fae      	MOV  R26,R30
000b61 940e 0834 	CALL _Lcd_Chr
000b63 2dae      	MOV  R26,R14
000b64 27bb      	CLR  R27
000b65 e0ea      	LDI  R30,LOW(10)
000b66 e0f0      	LDI  R31,HIGH(10)
000b67 940e 0d2a 	CALL __MODW21
000b69 5de0      	SUBI R30,-LOW(48)
000b6a 2fae      	MOV  R26,R30
000b6b 940c 0829 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:47 WORDS
                 SUBOPT_0x27:
000b6d 940e 084a 	CALL _Lcd_Out_Cp
000b6f 2dab      	MOV  R26,R11
000b70 e0b0      	LDI  R27,0
000b71 e0ea      	LDI  R30,LOW(10)
000b72 e0f0      	LDI  R31,HIGH(10)
000b73 940e 0d22 	CALL __DIVW21
000b75 5de0      	SUBI R30,-LOW(48)
000b76 2fae      	MOV  R26,R30
000b77 940e 0829 	CALL _Lcd_Chr_Cp
000b79 2dab      	MOV  R26,R11
000b7a 27bb      	CLR  R27
000b7b e0ea      	LDI  R30,LOW(10)
000b7c e0f0      	LDI  R31,HIGH(10)
000b7d 940e 0d2a 	CALL __MODW21
000b7f 5de0      	SUBI R30,-LOW(48)
000b80 2fae      	MOV  R26,R30
000b81 940e 0829 	CALL _Lcd_Chr_Cp
000b83 e2a0      	LDI  R26,LOW(32)
000b84 940e 0829 	CALL _Lcd_Chr_Cp
000b86 e3aa      	LDI  R26,LOW(58)
000b87 940e 0829 	CALL _Lcd_Chr_Cp
000b89 e2a0      	LDI  R26,LOW(32)
000b8a 940e 0829 	CALL _Lcd_Chr_Cp
000b8c 2dac      	MOV  R26,R12
000b8d e0b0      	LDI  R27,0
000b8e e0ea      	LDI  R30,LOW(10)
000b8f e0f0      	LDI  R31,HIGH(10)
000b90 940e 0d22 	CALL __DIVW21
000b92 5de0      	SUBI R30,-LOW(48)
000b93 2fae      	MOV  R26,R30
000b94 940e 0829 	CALL _Lcd_Chr_Cp
000b96 2dac      	MOV  R26,R12
000b97 27bb      	CLR  R27
000b98 e0ea      	LDI  R30,LOW(10)
000b99 e0f0      	LDI  R31,HIGH(10)
000b9a 940e 0d2a 	CALL __MODW21
000b9c 5de0      	SUBI R30,-LOW(48)
000b9d 2fae      	MOV  R26,R30
000b9e 940e 0829 	CALL _Lcd_Chr_Cp
000ba0 3050      	CPI  R21,0
000ba1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x28:
000ba2 dd15      	RCALL _I2C_Start
000ba3 eda0      	LDI  R26,LOW(208)
000ba4 dd21      	RCALL _I2C_Send_Byte
000ba5 dd6d      	RCALL _I2C_Wait_Ack
000ba6 30e0      	CPI  R30,0
000ba7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x29:
000ba8 dd1d      	RCALL _I2C_Send_Byte
000ba9 cd69      	RJMP _I2C_Wait_Ack
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2A:
000baa dd0d      	RCALL _I2C_Start
000bab eda1      	LDI  R26,LOW(209)
000bac cffb      	RJMP SUBOPT_0x29
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2B:
000bad 2fe0      	MOV  R30,R16
000bae 95e2      	SWAP R30
000baf 70ef      	ANDI R30,0xF
000bb0 e0aa      	LDI  R26,LOW(10)
000bb1 02ea      	MULS R30,R26
000bb2 01f0      	MOVW R30,R0
000bb3 2fae      	MOV  R26,R30
000bb4 2fe0      	MOV  R30,R16
000bb5 70ef      	ANDI R30,LOW(0xF)
000bb6 0fea      	ADD  R30,R26
000bb7 2f1e      	MOV  R17,R30
000bb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2C:
000bb9 2fa1      	MOV  R26,R17
000bba e0b0      	LDI  R27,0
000bbb e0ea      	LDI  R30,LOW(10)
000bbc e0f0      	LDI  R31,HIGH(10)
000bbd 940e 0d22 	CALL __DIVW21
000bbf 2f3e      	MOV  R19,R30
000bc0 9532      	SWAP R19
000bc1 7f30      	ANDI R19,0xF0
000bc2 2fa1      	MOV  R26,R17
000bc3 27bb      	CLR  R27
000bc4 e0ea      	LDI  R30,LOW(10)
000bc5 e0f0      	LDI  R31,HIGH(10)
000bc6 940e 0d2a 	CALL __MODW21
000bc8 2f2e      	MOV  R18,R30
000bc9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
000bca e0a0      	LDI  R26,LOW(0)
000bcb dd27      	RCALL _I2C_Read_Byte
000bcc 2f1e      	MOV  R17,R30
000bcd e0a0      	LDI  R26,LOW(0)
000bce dd24      	RCALL _I2C_Read_Byte
000bcf 2f0e      	MOV  R16,R30
000bd0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2E:
000bd1 95e2      	SWAP R30
000bd2 70ef      	ANDI R30,0xF
000bd3 e0aa      	LDI  R26,LOW(10)
000bd4 02ea      	MULS R30,R26
000bd5 01f0      	MOVW R30,R0
000bd6 2fae      	MOV  R26,R30
000bd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000bd8 85aa      	LDD  R26,Y+10
000bd9 85bb      	LDD  R27,Y+10+1
000bda 93ec      	ST   X,R30
000bdb 2fe0      	MOV  R30,R16
000bdc cff4      	RJMP SUBOPT_0x2E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x30:
000bdd 2fe0      	MOV  R30,R16
000bde 70ef      	ANDI R30,LOW(0xF)
000bdf 0fea      	ADD  R30,R26
000be0 85a8      	LDD  R26,Y+8
000be1 85b9      	LDD  R27,Y+8+1
000be2 93ec      	ST   X,R30
000be3 2fe3      	MOV  R30,R19
000be4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
000be5 2fe3      	MOV  R30,R19
000be6 70ef      	ANDI R30,LOW(0xF)
000be7 0fea      	ADD  R30,R26
000be8 81ae      	LDD  R26,Y+6
000be9 81bf      	LDD  R27,Y+6+1
000bea 93ec      	ST   X,R30
000beb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
000bec e0a1      	LDI  R26,LOW(1)
000bed dd05      	RCALL _I2C_Read_Byte
000bee 2f2e      	MOV  R18,R30
000bef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
000bf0 e0e1      	LDI  R30,LOW(1)
000bf1 e0f0      	LDI  R31,HIGH(1)
000bf2 17e2      	CP   R30,R18
000bf3 07f3      	CPC  R31,R19
000bf4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x34:
000bf5 85ad      	LDD  R26,Y+13
000bf6 85be      	LDD  R27,Y+13+1
000bf7 91ec      	LD   R30,X
000bf8 e0f0      	LDI  R31,0
000bf9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x35:
000bfa 1be5      	SUB  R30,R21
000bfb 85ad      	LDD  R26,Y+13
000bfc 85be      	LDD  R27,Y+13+1
000bfd 93ec      	ST   X,R30
000bfe 85ab      	LDD  R26,Y+11
000bff 85bc      	LDD  R27,Y+11+1
000c00 91ec      	LD   R30,X
000c01 5fef      	SUBI R30,-LOW(1)
000c02 93ec      	ST   X,R30
000c03 91ac      	LD   R26,X
000c04 30ad      	CPI  R26,LOW(0xD)
000c05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x36:
000c06 85ab      	LDD  R26,Y+11
000c07 85bc      	LDD  R27,Y+11+1
000c08 e0e1      	LDI  R30,LOW(1)
000c09 93ec      	ST   X,R30
000c0a 85a9      	LDD  R26,Y+9
000c0b 85ba      	LDD  R27,Y+9+1
000c0c 91ec      	LD   R30,X
000c0d 5fef      	SUBI R30,-LOW(1)
000c0e 93ec      	ST   X,R30
000c0f 91ac      	LD   R26,X
000c10 36a4      	CPI  R26,LOW(0x64)
000c11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x37:
000c12 85a9      	LDD  R26,Y+9
000c13 85ba      	LDD  R27,Y+9+1
000c14 91ec      	LD   R30,X
000c15 56e4      	SUBI R30,LOW(100)
000c16 93ec      	ST   X,R30
000c17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
000c18 e0e2      	LDI  R30,LOW(2)
000c19 e0f0      	LDI  R31,HIGH(2)
000c1a 17e2      	CP   R30,R18
000c1b 07f3      	CPC  R31,R19
000c1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x39:
000c1d 85ab      	LDD  R26,Y+11
000c1e 85bc      	LDD  R27,Y+11+1
000c1f 91ec      	LD   R30,X
000c20 e0f0      	LDI  R31,0
000c21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3A:
000c22 85ab      	LDD  R26,Y+11
000c23 85bc      	LDD  R27,Y+11+1
000c24 93ec      	ST   X,R30
000c25 85a9      	LDD  R26,Y+9
000c26 85ba      	LDD  R27,Y+9+1
000c27 91ec      	LD   R30,X
000c28 5fef      	SUBI R30,-LOW(1)
000c29 93ec      	ST   X,R30
000c2a 91ac      	LD   R26,X
000c2b 36a4      	CPI  R26,LOW(0x64)
000c2c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
000c2d e0e7      	LDI  R30,LOW(7)
000c2e e0f0      	LDI  R31,HIGH(7)
000c2f 17e2      	CP   R30,R18
000c30 07f3      	CPC  R31,R19
000c31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
000c32 85a9      	LDD  R26,Y+9
000c33 85ba      	LDD  R27,Y+9+1
000c34 91ec      	LD   R30,X
000c35 e0f0      	LDI  R31,0
000c36 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3D:
000c37 85af      	LDD  R26,Y+15
000c38 89b8      	LDD  R27,Y+15+1
000c39 01bd      	MOVW R22,R26
000c3a 91ac      	LD   R26,X
000c3b 27bb      	CLR  R27
000c3c e0e7      	LDI  R30,LOW(7)
000c3d e0f0      	LDI  R31,HIGH(7)
000c3e 940e 0d2a 	CALL __MODW21
000c40 01db      	MOVW R26,R22
000c41 93ec      	ST   X,R30
000c42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3E:
000c43 85ad      	LDD  R26,Y+13
000c44 85be      	LDD  R27,Y+13+1
000c45 93ec      	ST   X,R30
000c46 85ab      	LDD  R26,Y+11
000c47 85bc      	LDD  R27,Y+11+1
000c48 91ec      	LD   R30,X
000c49 50e1      	SUBI R30,LOW(1)
000c4a 93ec      	ST   X,R30
000c4b 30e0      	CPI  R30,0
000c4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
000c4d 85ab      	LDD  R26,Y+11
000c4e 85bc      	LDD  R27,Y+11+1
000c4f e0ec      	LDI  R30,LOW(12)
000c50 93ec      	ST   X,R30
000c51 85a9      	LDD  R26,Y+9
000c52 85ba      	LDD  R27,Y+9+1
000c53 91ec      	LD   R30,X
000c54 30e0      	CPI  R30,0
000c55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
000c56 85a9      	LDD  R26,Y+9
000c57 85ba      	LDD  R27,Y+9+1
000c58 e6e4      	LDI  R30,LOW(100)
000c59 93ec      	ST   X,R30
000c5a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
000c5b 85a9      	LDD  R26,Y+9
000c5c 85ba      	LDD  R27,Y+9+1
000c5d 91ec      	LD   R30,X
000c5e 50e1      	SUBI R30,LOW(1)
000c5f 93ec      	ST   X,R30
000c60 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
000c61 91ec      	LD   R30,X
000c62 e0f0      	LDI  R31,0
000c63 963a      	ADIW R30,10
000c64 01df      	MOVW R26,R30
000c65 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
000c66 91ec      	LD   R30,X
000c67 e0f0      	LDI  R31,0
000c68 9631      	ADIW R30,1
000c69 01df      	MOVW R26,R30
000c6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
000c6b 85aa      	LDD  R26,Y+10
000c6c 85bb      	LDD  R27,Y+10+1
000c6d 91ec      	LD   R30,X
000c6e e0f0      	LDI  R31,0
000c6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x45:
000c70 e3ec      	LDI  R30,LOW(60)
000c71 e0f0      	LDI  R31,HIGH(60)
000c72 940e 0d2a 	CALL __MODW21
000c74 85aa      	LDD  R26,Y+10
000c75 85bb      	LDD  R27,Y+10+1
000c76 93ec      	ST   X,R30
000c77 01da      	MOVW R26,R20
000c78 91ec      	LD   R30,X
000c79 5fef      	SUBI R30,-LOW(1)
000c7a 93ec      	ST   X,R30
000c7b 91ac      	LD   R26,X
000c7c 31a8      	CPI  R26,LOW(0x18)
000c7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
000c7e 85aa      	LDD  R26,Y+10
000c7f 85bb      	LDD  R27,Y+10+1
000c80 91ec      	LD   R30,X
000c81 5fef      	SUBI R30,-LOW(1)
000c82 93ec      	ST   X,R30
000c83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x47:
000c84 85ac      	LDD  R26,Y+12
000c85 85bd      	LDD  R27,Y+12+1
000c86 91ec      	LD   R30,X
000c87 e0f0      	LDI  R31,0
000c88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x48:
000c89 e3ec      	LDI  R30,LOW(60)
000c8a e0f0      	LDI  R31,HIGH(60)
000c8b 940e 0d2a 	CALL __MODW21
000c8d 85ac      	LDD  R26,Y+12
000c8e 85bd      	LDD  R27,Y+12+1
000c8f 93ec      	ST   X,R30
000c90 cfed      	RJMP SUBOPT_0x46
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x49:
000c91 85aa      	LDD  R26,Y+10
000c92 85bb      	LDD  R27,Y+10+1
000c93 e0e0      	LDI  R30,LOW(0)
000c94 93ec      	ST   X,R30
000c95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4A:
000c96 01da      	MOVW R26,R20
000c97 91ec      	LD   R30,X
000c98 5ee9      	SUBI R30,-LOW(23)
000c99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4B:
000c9a 85aa      	LDD  R26,Y+10
000c9b 85bb      	LDD  R27,Y+10+1
000c9c 93ec      	ST   X,R30
000c9d 01da      	MOVW R26,R20
000c9e 91ec      	LD   R30,X
000c9f 50e1      	SUBI R30,LOW(1)
000ca0 93ec      	ST   X,R30
000ca1 91ac      	LD   R26,X
000ca2 3faf      	CPI  R26,LOW(0xFF)
000ca3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4C:
000ca4 01da      	MOVW R26,R20
000ca5 e0e0      	LDI  R30,LOW(0)
000ca6 93ec      	ST   X,R30
000ca7 cfee      	RJMP SUBOPT_0x4A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
000ca8 85aa      	LDD  R26,Y+10
000ca9 85bb      	LDD  R27,Y+10+1
000caa 91ec      	LD   R30,X
000cab 5ce5      	SUBI R30,-LOW(59)
000cac cfed      	RJMP SUBOPT_0x4B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
000cad 85aa      	LDD  R26,Y+10
000cae 85bb      	LDD  R27,Y+10+1
000caf 91ec      	LD   R30,X
000cb0 50e1      	SUBI R30,LOW(1)
000cb1 93ec      	ST   X,R30
000cb2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
000cb3 e0a3      	LDI  R26,LOW(3)
000cb4 940e 07d6 	CALL _Lcd_Write_Low_Nibble
000cb6 9a2a      	SBI  0x5,2
000cb7 982a      	CBI  0x5,2
000cb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x50:
000cb9 940e 07d6 	CALL _Lcd_Write_Low_Nibble
000cbb 9a2a      	SBI  0x5,2
000cbc 982a      	CBI  0x5,2
000cbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x51:
000cbe 2fa1      	MOV  R26,R17
000cbf 940e 07bf 	CALL _Lcd_Write_High_Nibble
000cc1 9a2a      	SBI  0x5,2
000cc2 982a      	CBI  0x5,2
000cc3 2fa1      	MOV  R26,R17
000cc4 cff4      	RJMP SUBOPT_0x50
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x52:
000cc5 d010      	RCALL __SAVELOCR4
                +
000cc6 e000     +LDI R16 , LOW ( 0 )
000cc7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000cc8 e020     +LDI R18 , LOW ( 0 )
000cc9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000cca dbed      	RCALL _I2C_Start
000ccb e8a0      	LDI  R26,LOW(128)
000ccc cedb      	RJMP SUBOPT_0x29
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x53:
000ccd e0a0      	LDI  R26,LOW(0)
000cce dc24      	RCALL _I2C_Read_Byte
000ccf 2f0e      	MOV  R16,R30
000cd0 2711      	CLR  R17
000cd1 2f10      	MOV  R17,R16
000cd2 2700      	CLR  R16
000cd3 cf18      	RJMP SUBOPT_0x32
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000cd4 935a      	ST   -Y,R21
                 __SAVELOCR5:
000cd5 934a      	ST   -Y,R20
                 __SAVELOCR4:
000cd6 933a      	ST   -Y,R19
                 __SAVELOCR3:
000cd7 932a      	ST   -Y,R18
                 __SAVELOCR2:
000cd8 931a      	ST   -Y,R17
000cd9 930a      	ST   -Y,R16
000cda 9508      	RET
                 
                 __LOADLOCR6:
000cdb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000cdc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000cdd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000cde 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000cdf 8119      	LDD  R17,Y+1
000ce0 8108      	LD   R16,Y
000ce1 9508      	RET
                 
                 __ANEGW1:
000ce2 95f1      	NEG  R31
000ce3 95e1      	NEG  R30
000ce4 40f0      	SBCI R31,0
000ce5 9508      	RET
                 
                 __ANEGD1:
000ce6 95f0      	COM  R31
000ce7 9560      	COM  R22
000ce8 9570      	COM  R23
000ce9 95e1      	NEG  R30
000cea 4fff      	SBCI R31,-1
000ceb 4f6f      	SBCI R22,-1
000cec 4f7f      	SBCI R23,-1
000ced 9508      	RET
                 
                 __ASRW12:
000cee 23ee      	TST  R30
000cef 2e0e      	MOV  R0,R30
000cf0 e0e8      	LDI  R30,8
000cf1 2e1e      	MOV  R1,R30
000cf2 01fd      	MOVW R30,R26
000cf3 f061      	BREQ __ASRW12R
                 __ASRW12S8:
000cf4 1401      	CP   R0,R1
000cf5 f030      	BRLO __ASRW12L
000cf6 2fef      	MOV  R30,R31
000cf7 e0f0      	LDI  R31,0
000cf8 fde7      	SBRC R30,7
000cf9 efff      	LDI  R31,0xFF
000cfa 1801      	SUB  R0,R1
000cfb f021      	BREQ __ASRW12R
                 __ASRW12L:
000cfc 95f5      	ASR  R31
000cfd 95e7      	ROR  R30
000cfe 940a      	DEC  R0
000cff f7e1      	BRNE __ASRW12L
                 __ASRW12R:
000d00 9508      	RET
                 
                 __ASRW4:
000d01 95f5      	ASR  R31
000d02 95e7      	ROR  R30
                 __ASRW3:
000d03 95f5      	ASR  R31
000d04 95e7      	ROR  R30
                 __ASRW2:
000d05 95f5      	ASR  R31
000d06 95e7      	ROR  R30
000d07 95f5      	ASR  R31
000d08 95e7      	ROR  R30
000d09 9508      	RET
                 
                 __CWD1:
000d0a 2f6f      	MOV  R22,R31
000d0b 0f66      	ADD  R22,R22
000d0c 0b66      	SBC  R22,R22
000d0d 2f76      	MOV  R23,R22
000d0e 9508      	RET
                 
                 __DIVW21U:
000d0f 2400      	CLR  R0
000d10 2411      	CLR  R1
000d11 e190      	LDI  R25,16
                 __DIVW21U1:
000d12 0faa      	LSL  R26
000d13 1fbb      	ROL  R27
000d14 1c00      	ROL  R0
000d15 1c11      	ROL  R1
000d16 1a0e      	SUB  R0,R30
000d17 0a1f      	SBC  R1,R31
000d18 f418      	BRCC __DIVW21U2
000d19 0e0e      	ADD  R0,R30
000d1a 1e1f      	ADC  R1,R31
000d1b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000d1c 60a1      	SBR  R26,1
                 __DIVW21U3:
000d1d 959a      	DEC  R25
000d1e f799      	BRNE __DIVW21U1
000d1f 01fd      	MOVW R30,R26
000d20 01d0      	MOVW R26,R0
000d21 9508      	RET
                 
                 __DIVW21:
000d22 d015      	RCALL __CHKSIGNW
000d23 dfeb      	RCALL __DIVW21U
000d24 f40e      	BRTC __DIVW211
000d25 dfbc      	RCALL __ANEGW1
                 __DIVW211:
000d26 9508      	RET
                 
                 __MODW21U:
000d27 dfe7      	RCALL __DIVW21U
000d28 01fd      	MOVW R30,R26
000d29 9508      	RET
                 
                 __MODW21:
000d2a 94e8      	CLT
000d2b ffb7      	SBRS R27,7
000d2c c004      	RJMP __MODW211
000d2d 95b1      	NEG  R27
000d2e 95a1      	NEG  R26
000d2f 40b0      	SBCI R27,0
000d30 9468      	SET
                 __MODW211:
000d31 fdf7      	SBRC R31,7
000d32 dfaf      	RCALL __ANEGW1
000d33 dfdb      	RCALL __DIVW21U
000d34 01fd      	MOVW R30,R26
000d35 f40e      	BRTC __MODW212
000d36 dfab      	RCALL __ANEGW1
                 __MODW212:
000d37 9508      	RET
                 
                 __CHKSIGNW:
000d38 94e8      	CLT
000d39 fff7      	SBRS R31,7
000d3a c002      	RJMP __CHKSW1
000d3b dfa6      	RCALL __ANEGW1
000d3c 9468      	SET
                 __CHKSW1:
000d3d ffb7      	SBRS R27,7
000d3e c006      	RJMP __CHKSW2
000d3f 95b1      	NEG  R27
000d40 95a1      	NEG  R26
000d41 40b0      	SBCI R27,0
000d42 f800      	BLD  R0,0
000d43 9403      	INC  R0
000d44 fa00      	BST  R0,0
                 __CHKSW2:
000d45 9508      	RET
                 
                 __CPW01:
000d46 2400      	CLR  R0
000d47 160e      	CP   R0,R30
000d48 060f      	CPC  R0,R31
000d49 9508      	RET
                 
                 __ROUND_REPACK:
000d4a 2355      	TST  R21
000d4b f442      	BRPL __REPACK
000d4c 3850      	CPI  R21,0x80
000d4d f411      	BRNE __ROUND_REPACK0
000d4e ffe0      	SBRS R30,0
000d4f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000d50 9631      	ADIW R30,1
000d51 1f69      	ADC  R22,R25
000d52 1f79      	ADC  R23,R25
000d53 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000d54 e850      	LDI  R21,0x80
000d55 2757      	EOR  R21,R23
000d56 f411      	BRNE __REPACK0
000d57 935f      	PUSH R21
000d58 c0c8      	RJMP __ZERORES
                 __REPACK0:
000d59 3f5f      	CPI  R21,0xFF
000d5a f031      	BREQ __REPACK1
000d5b 0f66      	LSL  R22
000d5c 0c00      	LSL  R0
000d5d 9557      	ROR  R21
000d5e 9567      	ROR  R22
000d5f 2f75      	MOV  R23,R21
000d60 9508      	RET
                 __REPACK1:
000d61 935f      	PUSH R21
000d62 2000      	TST  R0
000d63 f00a      	BRMI __REPACK2
000d64 c0c7      	RJMP __MAXRES
                 __REPACK2:
000d65 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000d66 e850      	LDI  R21,0x80
000d67 2e19      	MOV  R1,R25
000d68 2215      	AND  R1,R21
000d69 0f88      	LSL  R24
000d6a 1f99      	ROL  R25
000d6b 2795      	EOR  R25,R21
000d6c 0f55      	LSL  R21
000d6d 9587      	ROR  R24
                 
                 __UNPACK1:
000d6e e850      	LDI  R21,0x80
000d6f 2e07      	MOV  R0,R23
000d70 2205      	AND  R0,R21
000d71 0f66      	LSL  R22
000d72 1f77      	ROL  R23
000d73 2775      	EOR  R23,R21
000d74 0f55      	LSL  R21
000d75 9567      	ROR  R22
000d76 9508      	RET
                 
                 __CFD1U:
000d77 9468      	SET
000d78 c001      	RJMP __CFD1U0
                 __CFD1:
000d79 94e8      	CLT
                 __CFD1U0:
000d7a 935f      	PUSH R21
000d7b dff2      	RCALL __UNPACK1
000d7c 3870      	CPI  R23,0x80
000d7d f018      	BRLO __CFD10
000d7e 3f7f      	CPI  R23,0xFF
000d7f f408      	BRCC __CFD10
000d80 c0a0      	RJMP __ZERORES
                 __CFD10:
000d81 e156      	LDI  R21,22
000d82 1b57      	SUB  R21,R23
000d83 f4aa      	BRPL __CFD11
000d84 9551      	NEG  R21
000d85 3058      	CPI  R21,8
000d86 f40e      	BRTC __CFD19
000d87 3059      	CPI  R21,9
                 __CFD19:
000d88 f030      	BRLO __CFD17
000d89 efef      	SER  R30
000d8a efff      	SER  R31
000d8b ef6f      	SER  R22
000d8c e77f      	LDI  R23,0x7F
000d8d f977      	BLD  R23,7
000d8e c01a      	RJMP __CFD15
                 __CFD17:
000d8f 2777      	CLR  R23
000d90 2355      	TST  R21
000d91 f0b9      	BREQ __CFD15
                 __CFD18:
000d92 0fee      	LSL  R30
000d93 1fff      	ROL  R31
000d94 1f66      	ROL  R22
000d95 1f77      	ROL  R23
000d96 955a      	DEC  R21
000d97 f7d1      	BRNE __CFD18
000d98 c010      	RJMP __CFD15
                 __CFD11:
000d99 2777      	CLR  R23
                 __CFD12:
000d9a 3058      	CPI  R21,8
000d9b f028      	BRLO __CFD13
000d9c 2fef      	MOV  R30,R31
000d9d 2ff6      	MOV  R31,R22
000d9e 2f67      	MOV  R22,R23
000d9f 5058      	SUBI R21,8
000da0 cff9      	RJMP __CFD12
                 __CFD13:
000da1 2355      	TST  R21
000da2 f031      	BREQ __CFD15
                 __CFD14:
000da3 9576      	LSR  R23
000da4 9567      	ROR  R22
000da5 95f7      	ROR  R31
000da6 95e7      	ROR  R30
000da7 955a      	DEC  R21
000da8 f7d1      	BRNE __CFD14
                 __CFD15:
000da9 2000      	TST  R0
000daa f40a      	BRPL __CFD16
000dab df3a      	RCALL __ANEGD1
                 __CFD16:
000dac 915f      	POP  R21
000dad 9508      	RET
                 
                 __CDF1U:
000dae 9468      	SET
000daf c001      	RJMP __CDF1U0
                 __CDF1:
000db0 94e8      	CLT
                 __CDF1U0:
000db1 9730      	SBIW R30,0
000db2 4060      	SBCI R22,0
000db3 4070      	SBCI R23,0
000db4 f0b1      	BREQ __CDF10
000db5 2400      	CLR  R0
000db6 f026      	BRTS __CDF11
000db7 2377      	TST  R23
000db8 f412      	BRPL __CDF11
000db9 9400      	COM  R0
000dba df2b      	RCALL __ANEGD1
                 __CDF11:
000dbb 2e17      	MOV  R1,R23
000dbc e17e      	LDI  R23,30
000dbd 2011      	TST  R1
                 __CDF12:
000dbe f032      	BRMI __CDF13
000dbf 957a      	DEC  R23
000dc0 0fee      	LSL  R30
000dc1 1fff      	ROL  R31
000dc2 1f66      	ROL  R22
000dc3 1c11      	ROL  R1
000dc4 cff9      	RJMP __CDF12
                 __CDF13:
000dc5 2fef      	MOV  R30,R31
000dc6 2ff6      	MOV  R31,R22
000dc7 2d61      	MOV  R22,R1
000dc8 935f      	PUSH R21
000dc9 df8a      	RCALL __REPACK
000dca 915f      	POP  R21
                 __CDF10:
000dcb 9508      	RET
                 
                 __SWAPACC:
000dcc 934f      	PUSH R20
000dcd 01af      	MOVW R20,R30
000dce 01fd      	MOVW R30,R26
000dcf 01da      	MOVW R26,R20
000dd0 01ab      	MOVW R20,R22
000dd1 01bc      	MOVW R22,R24
000dd2 01ca      	MOVW R24,R20
000dd3 2d40      	MOV  R20,R0
000dd4 2c01      	MOV  R0,R1
000dd5 2e14      	MOV  R1,R20
000dd6 914f      	POP  R20
000dd7 9508      	RET
                 
                 __UADD12:
000dd8 0fea      	ADD  R30,R26
000dd9 1ffb      	ADC  R31,R27
000dda 1f68      	ADC  R22,R24
000ddb 9508      	RET
                 
                 __NEGMAN1:
000ddc 95e0      	COM  R30
000ddd 95f0      	COM  R31
000dde 9560      	COM  R22
000ddf 5fef      	SUBI R30,-1
000de0 4fff      	SBCI R31,-1
000de1 4f6f      	SBCI R22,-1
000de2 9508      	RET
                 
                 __ADDF12:
000de3 935f      	PUSH R21
000de4 df81      	RCALL __UNPACK
000de5 3890      	CPI  R25,0x80
000de6 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000de7 3870      	CPI  R23,0x80
000de8 f121      	BREQ __ADDF128
                 __ADDF121:
000de9 2f57      	MOV  R21,R23
000dea 1b59      	SUB  R21,R25
000deb f12b      	BRVS __ADDF1211
000dec f412      	BRPL __ADDF122
000ded dfde      	RCALL __SWAPACC
000dee cffa      	RJMP __ADDF121
                 __ADDF122:
000def 3158      	CPI  R21,24
000df0 f018      	BRLO __ADDF123
000df1 27aa      	CLR  R26
000df2 27bb      	CLR  R27
000df3 2788      	CLR  R24
                 __ADDF123:
000df4 3058      	CPI  R21,8
000df5 f028      	BRLO __ADDF124
000df6 2fab      	MOV  R26,R27
000df7 2fb8      	MOV  R27,R24
000df8 2788      	CLR  R24
000df9 5058      	SUBI R21,8
000dfa cff9      	RJMP __ADDF123
                 __ADDF124:
000dfb 2355      	TST  R21
000dfc f029      	BREQ __ADDF126
                 __ADDF125:
000dfd 9586      	LSR  R24
000dfe 95b7      	ROR  R27
000dff 95a7      	ROR  R26
000e00 955a      	DEC  R21
000e01 f7d9      	BRNE __ADDF125
                 __ADDF126:
000e02 2d50      	MOV  R21,R0
000e03 2551      	EOR  R21,R1
000e04 f072      	BRMI __ADDF127
000e05 dfd2      	RCALL __UADD12
000e06 f438      	BRCC __ADDF129
000e07 9567      	ROR  R22
000e08 95f7      	ROR  R31
000e09 95e7      	ROR  R30
000e0a 9573      	INC  R23
000e0b f413      	BRVC __ADDF129
000e0c c01f      	RJMP __MAXRES
                 __ADDF128:
000e0d dfbe      	RCALL __SWAPACC
                 __ADDF129:
000e0e df45      	RCALL __REPACK
000e0f 915f      	POP  R21
000e10 9508      	RET
                 __ADDF1211:
000e11 f7d8      	BRCC __ADDF128
000e12 cffb      	RJMP __ADDF129
                 __ADDF127:
000e13 1bea      	SUB  R30,R26
000e14 0bfb      	SBC  R31,R27
000e15 0b68      	SBC  R22,R24
000e16 f051      	BREQ __ZERORES
000e17 f410      	BRCC __ADDF1210
000e18 9400      	COM  R0
000e19 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000e1a 2366      	TST  R22
000e1b f392      	BRMI __ADDF129
000e1c 0fee      	LSL  R30
000e1d 1fff      	ROL  R31
000e1e 1f66      	ROL  R22
000e1f 957a      	DEC  R23
000e20 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000e21 27ee      	CLR  R30
000e22 27ff      	CLR  R31
000e23 01bf      	MOVW R22,R30
000e24 915f      	POP  R21
000e25 9508      	RET
                 
                 __MINRES:
000e26 efef      	SER  R30
000e27 efff      	SER  R31
000e28 e76f      	LDI  R22,0x7F
000e29 ef7f      	SER  R23
000e2a 915f      	POP  R21
000e2b 9508      	RET
                 
                 __MAXRES:
000e2c efef      	SER  R30
000e2d efff      	SER  R31
000e2e e76f      	LDI  R22,0x7F
000e2f e77f      	LDI  R23,0x7F
000e30 915f      	POP  R21
000e31 9508      	RET
                 
                 __MULF12:
000e32 935f      	PUSH R21
000e33 df32      	RCALL __UNPACK
000e34 3870      	CPI  R23,0x80
000e35 f359      	BREQ __ZERORES
000e36 3890      	CPI  R25,0x80
000e37 f349      	BREQ __ZERORES
000e38 2401      	EOR  R0,R1
000e39 9408      	SEC
000e3a 1f79      	ADC  R23,R25
000e3b f423      	BRVC __MULF124
000e3c f324      	BRLT __ZERORES
                 __MULF125:
000e3d 2000      	TST  R0
000e3e f33a      	BRMI __MINRES
000e3f cfec      	RJMP __MAXRES
                 __MULF124:
000e40 920f      	PUSH R0
000e41 931f      	PUSH R17
000e42 932f      	PUSH R18
000e43 933f      	PUSH R19
000e44 934f      	PUSH R20
000e45 2711      	CLR  R17
000e46 2722      	CLR  R18
000e47 2799      	CLR  R25
000e48 9f68      	MUL  R22,R24
000e49 01a0      	MOVW R20,R0
000e4a 9f8f      	MUL  R24,R31
000e4b 2d30      	MOV  R19,R0
000e4c 0d41      	ADD  R20,R1
000e4d 1f59      	ADC  R21,R25
000e4e 9f6b      	MUL  R22,R27
000e4f 0d30      	ADD  R19,R0
000e50 1d41      	ADC  R20,R1
000e51 1f59      	ADC  R21,R25
000e52 9f8e      	MUL  R24,R30
000e53 d027      	RCALL __MULF126
000e54 9fbf      	MUL  R27,R31
000e55 d025      	RCALL __MULF126
000e56 9f6a      	MUL  R22,R26
000e57 d023      	RCALL __MULF126
000e58 9fbe      	MUL  R27,R30
000e59 d01d      	RCALL __MULF127
000e5a 9faf      	MUL  R26,R31
000e5b d01b      	RCALL __MULF127
000e5c 9fae      	MUL  R26,R30
000e5d 0d11      	ADD  R17,R1
000e5e 1f29      	ADC  R18,R25
000e5f 1f39      	ADC  R19,R25
000e60 1f49      	ADC  R20,R25
000e61 1f59      	ADC  R21,R25
000e62 2fe3      	MOV  R30,R19
000e63 2ff4      	MOV  R31,R20
000e64 2f65      	MOV  R22,R21
000e65 2f52      	MOV  R21,R18
000e66 914f      	POP  R20
000e67 913f      	POP  R19
000e68 912f      	POP  R18
000e69 911f      	POP  R17
000e6a 900f      	POP  R0
000e6b 2366      	TST  R22
000e6c f02a      	BRMI __MULF122
000e6d 0f55      	LSL  R21
000e6e 1fee      	ROL  R30
000e6f 1fff      	ROL  R31
000e70 1f66      	ROL  R22
000e71 c002      	RJMP __MULF123
                 __MULF122:
000e72 9573      	INC  R23
000e73 f24b      	BRVS __MULF125
                 __MULF123:
000e74 ded5      	RCALL __ROUND_REPACK
000e75 915f      	POP  R21
000e76 9508      	RET
                 
                 __MULF127:
000e77 0d10      	ADD  R17,R0
000e78 1d21      	ADC  R18,R1
000e79 1f39      	ADC  R19,R25
000e7a c002      	RJMP __MULF128
                 __MULF126:
000e7b 0d20      	ADD  R18,R0
000e7c 1d31      	ADC  R19,R1
                 __MULF128:
000e7d 1f49      	ADC  R20,R25
000e7e 1f59      	ADC  R21,R25
000e7f 9508      	RET
                 
                 __DIVF21:
000e80 935f      	PUSH R21
000e81 dee4      	RCALL __UNPACK
000e82 3870      	CPI  R23,0x80
000e83 f421      	BRNE __DIVF210
000e84 2011      	TST  R1
                 __DIVF211:
000e85 f40a      	BRPL __DIVF219
000e86 cf9f      	RJMP __MINRES
                 __DIVF219:
000e87 cfa4      	RJMP __MAXRES
                 __DIVF210:
000e88 3890      	CPI  R25,0x80
000e89 f409      	BRNE __DIVF218
                 __DIVF217:
000e8a cf96      	RJMP __ZERORES
                 __DIVF218:
000e8b 2401      	EOR  R0,R1
000e8c 9408      	SEC
000e8d 0b97      	SBC  R25,R23
000e8e f41b      	BRVC __DIVF216
000e8f f3d4      	BRLT __DIVF217
000e90 2000      	TST  R0
000e91 cff3      	RJMP __DIVF211
                 __DIVF216:
000e92 2f79      	MOV  R23,R25
000e93 931f      	PUSH R17
000e94 932f      	PUSH R18
000e95 933f      	PUSH R19
000e96 934f      	PUSH R20
000e97 2411      	CLR  R1
000e98 2711      	CLR  R17
000e99 2722      	CLR  R18
000e9a 2733      	CLR  R19
000e9b 01a9      	MOVW R20,R18
000e9c e290      	LDI  R25,32
                 __DIVF212:
000e9d 17ae      	CP   R26,R30
000e9e 07bf      	CPC  R27,R31
000e9f 0786      	CPC  R24,R22
000ea0 0741      	CPC  R20,R17
000ea1 f030      	BRLO __DIVF213
000ea2 1bae      	SUB  R26,R30
000ea3 0bbf      	SBC  R27,R31
000ea4 0b86      	SBC  R24,R22
000ea5 0b41      	SBC  R20,R17
000ea6 9408      	SEC
000ea7 c001      	RJMP __DIVF214
                 __DIVF213:
000ea8 9488      	CLC
                 __DIVF214:
000ea9 1f55      	ROL  R21
000eaa 1f22      	ROL  R18
000eab 1f33      	ROL  R19
000eac 1c11      	ROL  R1
000ead 1faa      	ROL  R26
000eae 1fbb      	ROL  R27
000eaf 1f88      	ROL  R24
000eb0 1f44      	ROL  R20
000eb1 959a      	DEC  R25
000eb2 f751      	BRNE __DIVF212
000eb3 01f9      	MOVW R30,R18
000eb4 2d61      	MOV  R22,R1
000eb5 914f      	POP  R20
000eb6 913f      	POP  R19
000eb7 912f      	POP  R18
000eb8 911f      	POP  R17
000eb9 2366      	TST  R22
000eba f032      	BRMI __DIVF215
000ebb 0f55      	LSL  R21
000ebc 1fee      	ROL  R30
000ebd 1fff      	ROL  R31
000ebe 1f66      	ROL  R22
000ebf 957a      	DEC  R23
000ec0 f24b      	BRVS __DIVF217
                 __DIVF215:
000ec1 de88      	RCALL __ROUND_REPACK
000ec2 915f      	POP  R21
000ec3 9508      	RET
                 
                 _delay_ms:
000ec4 9610      	adiw r26,0
000ec5 f039      	breq __delay_ms1
                 __delay_ms0:
000ec6 95a8      	wdr
                +
000ec7 ea80     +LDI R24 , LOW ( 0xFA0 )
000ec8 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000ec9 9701     +SBIW R24 , 1
000eca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000ecb 9711      	sbiw r26,1
000ecc f7c9      	brne __delay_ms0
                 __delay_ms1:
000ecd 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  51 r1 :  30 r2 :   0 r3 :   7 r4 :   2 r5 :   5 r6 :   5 r7 :   5 
r8 :   3 r9 :   5 r10:   6 r11:   5 r12:   5 r13:   3 r14:   5 r15:   2 
r16:  65 r17:  89 r18: 102 r19:  78 r20:  50 r21:  88 r22:  55 r23:  42 
r24:  45 r25:  39 r26: 370 r27: 175 r28:  11 r29:   1 r30: 814 r31: 198 
x  : 151 y  : 289 z  :   7 
Registers used: 34 out of 35 (97.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  23 
adiw  :  17 and   :   2 andi  :  28 asr   :   5 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  23 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :  24 brmi  :   7 brne  : 101 brpl  :  10 brsh  :   4 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  : 414 
cbi   :  31 cbr   :   0 clc   :   1 clh   :   0 cli   :   2 cln   :   0 
clr   :  51 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :  31 cpc   :  39 cpi   :  83 cpse  :   0 dec   :  14 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  45 ld    :  99 ldd   : 177 ldi   : 468 
lds   :  24 lpm   :   7 lsl   :  16 lsr   :   6 mov   : 178 movw  :  66 
mul   :   9 muls  :   2 mulsu :   0 neg   :   8 nop   :   0 or    :   7 
ori   :   3 out   :  24 pop   :  18 push  :  17 rcall :  77 ret   :  93 
reti  :   1 rjmp  : 209 rol   :  29 ror   :  17 sbc   :   8 sbci  :  14 
sbi   :  33 sbic  :  20 sbis  :  23 sbiw  :  29 sbr   :   1 sbrc  :  10 
sbrs  :   4 sec   :   3 seh   :   0 sei   :   2 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 154 std   :  10 sts   :  53 sub   :   7 subi  : 125 swap  :   7 
tst   :  19 wdr   :   1 
Instructions used: 80 out of 116 (69.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001d9c   7344    236   7580   32768  23.1%
[.dseg] 0x000100 0x00037c      0    124    124    2048   6.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 16 warnings
