
AVRASM ver. 2.1.30  D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm Mon Nov 13 16:23:36 2023

D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1085): warning: Register r4 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1086): warning: Register r3 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1087): warning: Register r6 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1089): warning: Register r8 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1091): warning: Register r10 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1093): warning: Register r12 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1095): warning: Register r14 already defined by the .DEF directive
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sec=R4
                 	.DEF _min=R3
                 	.DEF _hour=R6
                 	.DEF _day=R5
                 	.DEF _date=R8
                 	.DEF _month=R7
                 	.DEF _year=R10
                 	.DEF _a_sec=R9
                 	.DEF _a_min=R12
                 	.DEF _a_hour=R11
                 	.DEF _a_day=R14
                 	.DEF _a_date=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a1 	JMP  __RESET
000002 940c 0194 	JMP  _ext_int0_isr
000004 940c 029b 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0171 	JMP  _pin_change_isr2
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0063
000035 6363      	.DB  0x63,0x0,0x63,0x63
000036 6363      	.DB  0x63,0x63
                 
                 _0x3:
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1141): warning: .cseg .db misalignment - padding zero byte
000037 0063      	.DB  0x63
                 _0x4:
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1143): warning: .cseg .db misalignment - padding zero byte
000038 0064      	.DB  0x64
                 _0x6:
000039 0300
00003a 0304
00003b 0308
00003c 030c      	.DB  LOW(_0x5),HIGH(_0x5),LOW(_0x5+4),HIGH(_0x5+4),LOW(_0x5+8),HIGH(_0x5+8),LOW(_0x5+12),HIGH(_0x5+12)
00003d 0310
00003e 0314
00003f 0318      	.DB  LOW(_0x5+16),HIGH(_0x5+16),LOW(_0x5+20),HIGH(_0x5+20),LOW(_0x5+24),HIGH(_0x5+24)
                 _0x7:
000040 0001
000041 0000
000042 0001
000043 0000      	.DB  0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x0
000044 0001
000045 0000
000046 0001
000047 0001      	.DB  0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x0
000048 0000
000049 0001
00004a 0000
D:\Nhung\ATmega\ATmega328p\Project\ATmega328p_DS1307_SHT20\Code\Debug\List\Project1.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004b 0001      	.DB  0x0,0x0,0x1,0x0,0x0,0x0,0x1
                 _0x0:
00004c 6153
00004d 0074
00004e 7553
00004f 006e      	.DB  0x53,0x61,0x74,0x0,0x53,0x75,0x6E,0x0
000050 6f4d
000051 006e
000052 7554
000053 0065      	.DB  0x4D,0x6F,0x6E,0x0,0x54,0x75,0x65,0x0
000054 6557
000055 0064
000056 6854
000057 0075      	.DB  0x57,0x65,0x64,0x0,0x54,0x68,0x75,0x0
000058 7246
000059 0069
00005a 4120
00005b 204d      	.DB  0x46,0x72,0x69,0x0,0x20,0x41,0x4D,0x20
00005c 203a
00005d 2000
00005e 4d50
00005f 3a20      	.DB  0x3A,0x20,0x0,0x20,0x50,0x4D,0x20,0x3A
000060 0020      	.DB  0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000061 0006      	.DW  0x06
000062 0009      	.DW  0x09
000063 0068      	.DW  __REG_VARS*2
                 
000064 0001      	.DW  0x01
000065 0346      	.DW  _a_month
000066 006e      	.DW  _0x3*2
                 
000067 0001      	.DW  0x01
000068 0347      	.DW  _a_year
000069 0070      	.DW  _0x4*2
                 
00006a 0004      	.DW  0x04
00006b 0300      	.DW  _0x5
00006c 0098      	.DW  _0x0*2
                 
00006d 0004      	.DW  0x04
00006e 0304      	.DW  _0x5+4
00006f 009c      	.DW  _0x0*2+4
                 
000070 0004      	.DW  0x04
000071 0308      	.DW  _0x5+8
000072 00a0      	.DW  _0x0*2+8
                 
000073 0004      	.DW  0x04
000074 030c      	.DW  _0x5+12
000075 00a4      	.DW  _0x0*2+12
                 
000076 0004      	.DW  0x04
000077 0310      	.DW  _0x5+16
000078 00a8      	.DW  _0x0*2+16
                 
000079 0004      	.DW  0x04
00007a 0314      	.DW  _0x5+20
00007b 00ac      	.DW  _0x0*2+20
                 
00007c 0004      	.DW  0x04
00007d 0318      	.DW  _0x5+24
00007e 00b0      	.DW  _0x0*2+24
                 
00007f 000e      	.DW  0x0E
000080 0349      	.DW  _dayOfWeek
000081 0072      	.DW  _0x6*2
                 
000082 0017      	.DW  0x17
000083 0357      	.DW  _dayOfMonth
000084 0080      	.DW  _0x7*2
                 
000085 0007      	.DW  0x07
000086 031c      	.DW  _0xA
000087 00b4      	.DW  _0x0*2+28
                 
000088 0007      	.DW  0x07
000089 0323      	.DW  _0xA+7
00008a 00bb      	.DW  _0x0*2+35
                 
00008b 0004      	.DW  0x04
00008c 032a      	.DW  _0xA+14
00008d 00b7      	.DW  _0x0*2+31
                 
00008e 0004      	.DW  0x04
00008f 032e      	.DW  _0x18
000090 00b7      	.DW  _0x0*2+31
                 
000091 0004      	.DW  0x04
000092 0332      	.DW  _0x18+4
000093 00b7      	.DW  _0x0*2+31
                 
000094 0004      	.DW  0x04
000095 0336      	.DW  _0x18+8
000096 00b7      	.DW  _0x0*2+31
                 
000097 0004      	.DW  0x04
000098 033a      	.DW  _0x4F
000099 00b7      	.DW  _0x0*2+31
                 
00009a 0004      	.DW  0x04
00009b 033e      	.DW  _0x4F+4
00009c 00b7      	.DW  _0x0*2+31
                 
00009d 0004      	.DW  0x04
00009e 0342      	.DW  _0x4F+8
00009f 00b7      	.DW  _0x0*2+31
                 
                 _0xFFFFFFFF:
0000a0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a1 94f8      	CLI
0000a2 27ee      	CLR  R30
0000a3 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a4 e0f1      	LDI  R31,1
0000a5 bff5      	OUT  MCUCR,R31
0000a6 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000a7 e08d      	LDI  R24,(14-2)+1
0000a8 e0a2      	LDI  R26,2
0000a9 27bb      	CLR  R27
                 __CLEAR_REG:
0000aa 93ed      	ST   X+,R30
0000ab 958a      	DEC  R24
0000ac f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ad e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ae e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000af e0a0      	LDI  R26,LOW(__SRAM_START)
0000b0 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000b1 93ed      	ST   X+,R30
0000b2 9701      	SBIW R24,1
0000b3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b4 ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b5 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b6 9185      	LPM  R24,Z+
0000b7 9195      	LPM  R25,Z+
0000b8 9700      	SBIW R24,0
0000b9 f061      	BREQ __GLOBAL_INI_END
0000ba 91a5      	LPM  R26,Z+
0000bb 91b5      	LPM  R27,Z+
0000bc 9005      	LPM  R0,Z+
0000bd 9015      	LPM  R1,Z+
0000be 01bf      	MOVW R22,R30
0000bf 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c0 9005      	LPM  R0,Z+
0000c1 920d      	ST   X+,R0
0000c2 9701      	SBIW R24,1
0000c3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c4 01fb      	MOVW R30,R22
0000c5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000c6 e0e0      	LDI  R30,__GPIOR0_INIT
0000c7 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c8 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c9 bfed      	OUT  SPL,R30
0000ca e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000cb bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cc e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000cd e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ce 940c 0387 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;unsigned char sec, min, hour, day, date, month, year;
                 ;unsigned char a_sec = 99, a_min = 99, a_hour = 99, a_day = 99, a_date = 99, a_mo ...
                 
                 	.DSEG
                 ;unsigned char flag = 0;
                 ;unsigned char* dayOfWeek[] = {"Sat","Sun", "Mon", "Tue", "Wed", "Thu", "Fri"};
                 _0x5:
000300           	.BYTE 0x1C
                 ;unsigned int dayOfMonth[] = {1,0,1,0,1,0,1,1,0,1,0,1};
                 ;char change_mode = 0;
                 ;unsigned char address;
                 ;unsigned int do_am, nhiet_do;
                 ;void display(){
                 ; 0000 0038 void display(){
                 
                 	.CSEG
                 _display:
                 ; .FSTART _display
                 ; 0000 0039 // CHAY CA 2 TRUOC -> KHONG BI GHI DE DU LIEU KHI XAY RA NGAT
                 ; 0000 003A // tinh toan do am
                 ; 0000 003B do_am = (-6 + 125 * (SHT20_Read_RH()*1.0f / 65536));
0000d0 940e 0815 	CALL _SHT20_Read_RH
0000d2 2766      	CLR  R22
0000d3 2777      	CLR  R23
0000d4 940e 0d48 	CALL __CDF1
                +
0000d6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0000d7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0000d8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0000d9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0000da 940e 08c9 	CALL SUBOPT_0x0
                +
0000dc e0a0     +LDI R26 , LOW ( 0x42FA0000 )
0000dd e0b0     +LDI R27 , HIGH ( 0x42FA0000 )
0000de ef8a     +LDI R24 , BYTE3 ( 0x42FA0000 )
0000df e492     +LDI R25 , BYTE4 ( 0x42FA0000 )
                 	__GETD2N 0x42FA0000
0000e0 940e 0dca 	CALL __MULF12
                +
0000e2 e0a0     +LDI R26 , LOW ( 0xC0C00000 )
0000e3 e0b0     +LDI R27 , HIGH ( 0xC0C00000 )
0000e4 ec80     +LDI R24 , BYTE3 ( 0xC0C00000 )
0000e5 ec90     +LDI R25 , BYTE4 ( 0xC0C00000 )
                 	__GETD2N 0xC0C00000
0000e6 940e 0d7b 	CALL __ADDF12
0000e8 e7a1      	LDI  R26,LOW(_do_am)
0000e9 e0b3      	LDI  R27,HIGH(_do_am)
0000ea 940e 08d4 	CALL SUBOPT_0x1
                 ; 0000 003C delay_ms(1);
                 ; 0000 003D // tinh toan nhiet do
                 ; 0000 003E nhiet_do = (-46.85 + 0.17572 * (SHT20_Read_T() * 1000.0f / 65536.0)) * 1000;
0000ec 940e 0834 	CALL _SHT20_Read_T
0000ee 2766      	CLR  R22
0000ef 2777      	CLR  R23
0000f0 940e 0d48 	CALL __CDF1
                +
0000f2 e0a0     +LDI R26 , LOW ( 0x447A0000 )
0000f3 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
0000f4 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
0000f5 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
0000f6 940e 08c9 	CALL SUBOPT_0x0
                +
0000f8 efa2     +LDI R26 , LOW ( 0x3E33EFF2 )
0000f9 eebf     +LDI R27 , HIGH ( 0x3E33EFF2 )
0000fa e383     +LDI R24 , BYTE3 ( 0x3E33EFF2 )
0000fb e39e     +LDI R25 , BYTE4 ( 0x3E33EFF2 )
                 	__GETD2N 0x3E33EFF2
0000fc 940e 0dca 	CALL __MULF12
                +
0000fe e6a6     +LDI R26 , LOW ( 0xC23B6666 )
0000ff e6b6     +LDI R27 , HIGH ( 0xC23B6666 )
000100 e38b     +LDI R24 , BYTE3 ( 0xC23B6666 )
000101 ec92     +LDI R25 , BYTE4 ( 0xC23B6666 )
                 	__GETD2N 0xC23B6666
000102 940e 0d7b 	CALL __ADDF12
                +
000104 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000105 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000106 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
000107 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
000108 940e 0dca 	CALL __MULF12
00010a e7a3      	LDI  R26,LOW(_nhiet_do)
00010b e0b3      	LDI  R27,HIGH(_nhiet_do)
00010c 940e 08d4 	CALL SUBOPT_0x1
                 ; 0000 003F delay_ms(1);
                 ; 0000 0040 DS1307_Get_Date(&day, &date, &month, &year);
00010e 940e 08dc 	CALL SUBOPT_0x2
                 ; 0000 0041 delay_ms(1);
000110 940e 08ec 	CALL SUBOPT_0x3
                 ; 0000 0042 DS1307_Get_Time(&sec, &min, &hour, &flag);
000112 940e 08f0 	CALL SUBOPT_0x4
                 ; 0000 0043 delay_ms(1);
000114 940e 08ec 	CALL SUBOPT_0x3
                 ; 0000 0044 
                 ; 0000 0045 if(change_mode < 2){
000116 91a0 036f 	LDS  R26,_change_mode
000118 30a2      	CPI  R26,LOW(0x2)
000119 f4f8      	BRSH _0x8
                 ; 0000 0046 Lcd_Chr(1,1, date/10+0x30);
00011a 940e 0900 	CALL SUBOPT_0x5
00011c 940e 0904 	CALL SUBOPT_0x6
                 ; 0000 0047 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 0048 Lcd_Chr_Cp('/');
                 ; 0000 0049 Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 004A Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 004B Lcd_Chr_Cp('/');
                 ; 0000 004C Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 004D Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 004E Lcd_Chr_Cp(' ');
                 ; 0000 004F Lcd_Out_Cp(dayOfWeek[day%7]);
00011e 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 0050 
                 ; 0000 0051 
                 ; 0000 0052 Lcd_Chr(2,1, hour/10+0x30);
000120 940e 095b 	CALL SUBOPT_0x8
000122 940e 0960 	CALL SUBOPT_0x9
                 ; 0000 0053 Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 0054 if(flag == 1)
000124 91a0 0348 	LDS  R26,_flag
000126 30a1      	CPI  R26,LOW(0x1)
000127 f419      	BRNE _0x9
                 ; 0000 0055 Lcd_Out_Cp(" AM : ");
                +
000128 e1ac     +LDI R26 , LOW ( _0xA + ( 0 ) )
000129 e0b3     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
00012a c009      	RJMP _0x8C
                 ; 0000 0056 else if (flag == 2)
                 _0x9:
00012b 91a0 0348 	LDS  R26,_flag
00012d 30a2      	CPI  R26,LOW(0x2)
00012e f419      	BRNE _0xC
                 ; 0000 0057 Lcd_Out_Cp(" PM : ");
                +
00012f e2a3     +LDI R26 , LOW ( _0xA + ( 7 ) )
000130 e0b3     +LDI R27 , HIGH ( _0xA + ( 7 ) )
                 	__POINTW2MN _0xA,7
000131 c002      	RJMP _0x8C
                 ; 0000 0058 else
                 _0xC:
                 ; 0000 0059 Lcd_Out_Cp(" : ");
                +
000132 e2aa     +LDI R26 , LOW ( _0xA + ( 14 ) )
000133 e0b3     +LDI R27 , HIGH ( _0xA + ( 14 ) )
                 	__POINTW2MN _0xA,14
                 _0x8C:
000134 940e 0800 	CALL _Lcd_Out_Cp
                 ; 0000 005A Lcd_Chr_Cp(min/10+0x30);
000136 940e 0974 	CALL SUBOPT_0xA
                 ; 0000 005B Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 005C Lcd_Chr_Cp(' ');
                 ; 0000 005D Lcd_Chr_Cp(':');
                 ; 0000 005E Lcd_Chr_Cp(' ');
                 ; 0000 005F Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 0060 Lcd_Chr_Cp(sec%10+0x30);
000138 c035      	RJMP _0x8D
                 ; 0000 0061 }
                 ; 0000 0062 else{
                 _0x8:
                 ; 0000 0063 
                 ; 0000 0064 Lcd_Chr(1,1,nhiet_do/10000 + 0x30);
000139 940e 0900 	CALL SUBOPT_0x5
00013b 940e 09a4 	CALL SUBOPT_0xB
00013d 940e 09a9 	CALL SUBOPT_0xC
                 ; 0000 0065 Lcd_Chr_Cp(nhiet_do/1000 % 10 + 0x30);
00013f 940e 09a4 	CALL SUBOPT_0xB
000141 940e 09b1 	CALL SUBOPT_0xD
                 ; 0000 0066 Lcd_Chr_Cp('.');
000143 e2ae      	LDI  R26,LOW(46)
000144 940e 09be 	CALL SUBOPT_0xE
                 ; 0000 0067 Lcd_Chr_Cp(nhiet_do/100 % 10 + 0x30);
000146 940e 09c1 	CALL SUBOPT_0xF
000148 940e 09be 	CALL SUBOPT_0xE
                 ; 0000 0068 Lcd_Chr_Cp(nhiet_do/10 % 10 + 0x30);
00014a 940e 09cd 	CALL SUBOPT_0x10
00014c 940e 09be 	CALL SUBOPT_0xE
                 ; 0000 0069 Lcd_Chr_Cp(nhiet_do%10 + 0x30);
00014e 940e 09d9 	CALL SUBOPT_0x11
                 ; 0000 006A Lcd_Chr_Cp('C');
000150 e4a3      	LDI  R26,LOW(67)
000151 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 006B 
                 ; 0000 006C Lcd_Chr(2,1,do_am/10000 + 0x30);
000153 940e 095b 	CALL SUBOPT_0x8
000155 940e 09e1 	CALL SUBOPT_0x12
000157 940e 09a9 	CALL SUBOPT_0xC
                 ; 0000 006D Lcd_Chr_Cp(do_am/1000 % 10 + 0x30);
000159 940e 09e1 	CALL SUBOPT_0x12
00015b 940e 09b1 	CALL SUBOPT_0xD
                 ; 0000 006E Lcd_Chr_Cp(do_am/100 % 10 + 0x30);
00015d 940e 09e1 	CALL SUBOPT_0x12
00015f 940e 09c1 	CALL SUBOPT_0xF
000161 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 006F Lcd_Chr_Cp(do_am/10 % 10 + 0x30);
000163 940e 09e1 	CALL SUBOPT_0x12
000165 940e 09cd 	CALL SUBOPT_0x10
000167 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 0070 Lcd_Chr_Cp(do_am%10 + 0x30);
000169 940e 09e1 	CALL SUBOPT_0x12
00016b 940e 09d9 	CALL SUBOPT_0x11
                 ; 0000 0071 Lcd_Chr_Cp('%');
00016d e2a5      	LDI  R26,LOW(37)
                 _0x8D:
00016e 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 0072 }
                 ; 0000 0073 }
000170 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
00031c           	.BYTE 0x12
                 ;interrupt [PC_INT2] void pin_change_isr2(void)
                 ; 0000 0078 {
                 
                 	.CSEG
                 _pin_change_isr2:
                 ; .FSTART _pin_change_isr2
000171 940e 09e6 	CALL SUBOPT_0x13
                 ; 0000 0079 // Place your code here
                 ; 0000 007A delay_ms(20);
000173 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 007B while(MODE == 0);
                 _0xF:
000175 9b4f      	SBIS 0x9,7
000176 cffe      	RJMP _0xF
                 ; 0000 007C if(change_mode == 2){
000177 91a0 036f 	LDS  R26,_change_mode
000179 30a2      	CPI  R26,LOW(0x2)
00017a f421      	BRNE _0x12
                 ; 0000 007D change_mode = -1;
00017b efef      	LDI  R30,LOW(255)
00017c 93e0 036f 	STS  _change_mode,R30
                 ; 0000 007E adjust();
00017e c004      	RJMP _0x8E
                 ; 0000 007F }
                 ; 0000 0080 else if(change_mode == 0){
                 _0x12:
00017f 91e0 036f 	LDS  R30,_change_mode
000181 30e0      	CPI  R30,0
000182 f409      	BRNE _0x14
                 ; 0000 0081 adjust();
                 _0x8E:
000183 d27b      	RCALL _adjust
                 ; 0000 0082 }
                 ; 0000 0083 Lcd_Cmd(_LCD_CLEAR);
                 _0x14:
000184 e0a1      	LDI  R26,LOW(1)
000185 940e 07c6 	CALL _Lcd_Cmd
                 ; 0000 0084 change_mode ++;
000187 91e0 036f 	LDS  R30,_change_mode
000189 5fef      	SUBI R30,-LOW(1)
00018a 93e0 036f 	STS  _change_mode,R30
                 ; 0000 0085 delay_ms(50);
00018c e3a2      	LDI  R26,LOW(50)
00018d e0b0      	LDI  R27,0
00018e 940e 0e5c 	CALL _delay_ms
                 ; 0000 0086 Lcd_Cmd(_LCD_CLEAR);
000190 e0a1      	LDI  R26,LOW(1)
000191 940e 07c6 	CALL _Lcd_Cmd
                 ; 0000 0087 }
000193 c1e5      	RJMP _0x9C
                 ; .FEND
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 008C {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000194 940e 09e6 	CALL SUBOPT_0x13
                 ; 0000 008D // Place your code here
                 ; 0000 008E // Bien thay doi vi tri
                 ; 0000 008F int inOrde;
                 ; 0000 0090 int position = 1;
                 ; 0000 0091 unsigned char row = 0;
                 ; 0000 0092 unsigned char max_day = 30;
                 ; 0000 0093 
                 ; 0000 0094 // Bien dung doi sang bcd
                 ; 0000 0095 unsigned char bcd_convert;
                 ; 0000 0096 unsigned char t;
                 ; 0000 0097 
                 ; 0000 0098 delay_ms(20);
000196 9722      	SBIW R28,2
000197 940e 09f8 	CALL SUBOPT_0x15
                 ;	inOrde -> R16,R17
                 ;	position -> R18,R19
                 ;	row -> R21
                 ;	max_day -> R20
                 ;	bcd_convert -> Y+7
                 ;	t -> Y+6
                 ; 0000 0099 if(change_mode != 0){
000199 91e0 036f 	LDS  R30,_change_mode
00019b 30e0      	CPI  R30,0
00019c f019      	BREQ _0x15
                 ; 0000 009A if(change_mode == 1){
                 ; 0000 009B adjust();
                 ; 0000 009C }
                 ; 0000 009D else{
                 ; 0000 009E adjust();
                 _0x8F:
00019d d261      	RCALL _adjust
                 ; 0000 009F }
                 ; 0000 00A0 flag = 0;
00019e 940e 09fe 	CALL SUBOPT_0x16
                 ; 0000 00A1 change_mode = 0;
                 ; 0000 00A2 }
                 ; 0000 00A3 
                 ; 0000 00A4 Lcd_Cmd(_LCD_CLEAR);
                 _0x15:
0001a0 e0a1      	LDI  R26,LOW(1)
0001a1 940e 07c6 	CALL _Lcd_Cmd
                 ; 0000 00A5 
                 ; 0000 00A6 DS1307_Get_Date(&day, &date, &month, &year);
0001a3 940e 08dc 	CALL SUBOPT_0x2
                 ; 0000 00A7 Lcd_Chr(1,1, date/10+0x30);
0001a5 940e 0900 	CALL SUBOPT_0x5
0001a7 940e 0904 	CALL SUBOPT_0x6
                 ; 0000 00A8 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 00A9 Lcd_Chr_Cp('/');
                 ; 0000 00AA Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 00AB Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 00AC Lcd_Chr_Cp('/');
                 ; 0000 00AD Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 00AE Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 00AF Lcd_Chr_Cp(' ');
                 ; 0000 00B0 Lcd_Out_Cp(dayOfWeek[day%7]);
0001a9 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 00B1 
                 ; 0000 00B2 DS1307_Get_Time(&sec, &min, &hour, &flag);
0001ab 940e 08f0 	CALL SUBOPT_0x4
                 ; 0000 00B3 Lcd_Chr(2,1, hour/10+0x30);
0001ad 940e 095b 	CALL SUBOPT_0x8
0001af 940e 0960 	CALL SUBOPT_0x9
                 ; 0000 00B4 Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 00B5 Lcd_Out_Cp(" : ");
                +
0001b1 e2ae     +LDI R26 , LOW ( _0x18 + ( 0 ) )
0001b2 e0b3     +LDI R27 , HIGH ( _0x18 + ( 0 ) )
                 	__POINTW2MN _0x18,0
0001b3 940e 0a04 	CALL SUBOPT_0x17
                 ; 0000 00B6 Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 00B7 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 00B8 Lcd_Chr_Cp(' ');
                 ; 0000 00B9 Lcd_Chr_Cp(':');
                 ; 0000 00BA Lcd_Chr_Cp(' ');
                 ; 0000 00BB Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 00BC Lcd_Chr_Cp(sec%10+0x30);
0001b5 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 00BD 
                 ; 0000 00BE Lcd_Cmd(_LCD_FIRST_ROW); // _LCD_FIRST_ROW
0001b7 940e 0a07 	CALL SUBOPT_0x18
                 ; 0000 00BF Lcd_Cmd(_LCD_BLINK_CURSOR_ON); // _LCD_BLINK_CURSOR_ON
                 ; 0000 00C0 position = 1;
                 ; 0000 00C1 while(CHANGE_MODE == 0){
                 _0x19:
0001b9 994a      	SBIC 0x9,2
0001ba c0b2      	RJMP _0x1B
                 ; 0000 00C2 if(LEN == 0){
0001bb 994d      	SBIC 0x9,5
0001bc c006      	RJMP _0x1C
                 ; 0000 00C3 delay_ms(20);
0001bd 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 00C4 row = 0;
0001bf 940e 0a10 	CALL SUBOPT_0x19
                 ; 0000 00C5 
                 ; 0000 00C6 address = 0x80 + position - 1;
                 ; 0000 00C7 Lcd_Cmd(address);
                 ; 0000 00C8 
                 ; 0000 00C9 while(LEN == 0);
                 _0x1D:
0001c1 9b4d      	SBIS 0x9,5
0001c2 cffe      	RJMP _0x1D
                 ; 0000 00CA }
                 ; 0000 00CB if(XUONG == 0){
                 _0x1C:
0001c3 994e      	SBIC 0x9,6
0001c4 c006      	RJMP _0x20
                 ; 0000 00CC delay_ms(20);
0001c5 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 00CD row = 1;
0001c7 940e 0a19 	CALL SUBOPT_0x1A
                 ; 0000 00CE 
                 ; 0000 00CF address = 0xC0 + position - 1;
                 ; 0000 00D0 Lcd_Cmd(address);
                 ; 0000 00D1 
                 ; 0000 00D2 while(XUONG == 0);
                 _0x21:
0001c9 9b4e      	SBIS 0x9,6
0001ca cffe      	RJMP _0x21
                 ; 0000 00D3 }
                 ; 0000 00D4 if(RIGHT == 0){
                 _0x20:
0001cb 994c      	SBIC 0x9,4
0001cc c019      	RJMP _0x24
                 ; 0000 00D5 delay_ms(20);
0001cd 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 00D6 if(position > 0){
0001cf 2400      	CLR  R0
0001d0 1602      	CP   R0,R18
0001d1 0603      	CPC  R0,R19
0001d2 f48c      	BRGE _0x25
                 ; 0000 00D7 position ++;
                +
0001d3 5f2f     +SUBI R18 , LOW ( - 1 )
0001d4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00D8 if(row == 0){
0001d5 3050      	CPI  R21,0
0001d6 f419      	BRNE _0x26
                 ; 0000 00D9 address = 0x80 + position - 1;
0001d7 2fe2      	MOV  R30,R18
0001d8 58e1      	SUBI R30,-LOW(127)
0001d9 c002      	RJMP _0x90
                 ; 0000 00DA }
                 ; 0000 00DB else{
                 _0x26:
                 ; 0000 00DC address = 0xC0 + position - 1;
0001da 2fe2      	MOV  R30,R18
0001db 54e1      	SUBI R30,-LOW(191)
                 _0x90:
0001dc 93e0 0370 	STS  _address,R30
                 ; 0000 00DD }
                 ; 0000 00DE if(position <= 16){
                +
0001de 3121     +CPI R18 , LOW ( 17 )
0001df e0e0     +LDI R30 , HIGH ( 17 )
0001e0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
0001e1 f414      	BRGE _0x28
                 ; 0000 00DF Lcd_Cmd(address);
0001e2 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 00E0 }
                 ; 0000 00E1 }
                 _0x28:
                 ; 0000 00E2 while(RIGHT == 0);
                 _0x25:
                 _0x29:
0001e4 9b4c      	SBIS 0x9,4
0001e5 cffe      	RJMP _0x29
                 ; 0000 00E3 }
                 ; 0000 00E4 if(LEFT == 0){
                 _0x24:
0001e6 9933      	SBIC 0x6,3
0001e7 c01b      	RJMP _0x2C
                 ; 0000 00E5 delay_ms(20);
0001e8 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 00E6 if(position > 1){
                +
0001ea 3022     +CPI R18 , LOW ( 2 )
0001eb e0e0     +LDI R30 , HIGH ( 2 )
0001ec 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0001ed f09c      	BRLT _0x2D
                 ; 0000 00E7 position --;
                +
0001ee 5021     +SUBI R18 , LOW ( 1 )
0001ef 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 00E8 if(position < 1)
                +
0001f0 3021     +CPI R18 , LOW ( 1 )
0001f1 e0e0     +LDI R30 , HIGH ( 1 )
0001f2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
0001f3 f414      	BRGE _0x2E
                 ; 0000 00E9 position = 1;
                +
0001f4 e021     +LDI R18 , LOW ( 1 )
0001f5 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00EA if(row == 0){
                 _0x2E:
0001f6 3050      	CPI  R21,0
0001f7 f419      	BRNE _0x2F
                 ; 0000 00EB address = 0x80 + position - 1;
0001f8 2fe2      	MOV  R30,R18
0001f9 58e1      	SUBI R30,-LOW(127)
0001fa c002      	RJMP _0x91
                 ; 0000 00EC }
                 ; 0000 00ED else{
                 _0x2F:
                 ; 0000 00EE address = 0xC0 + position - 1;
0001fb 2fe2      	MOV  R30,R18
0001fc 54e1      	SUBI R30,-LOW(191)
                 _0x91:
0001fd 93e0 0370 	STS  _address,R30
                 ; 0000 00EF }
                 ; 0000 00F0 Lcd_Cmd(address);
0001ff 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 00F1 }
                 ; 0000 00F2 while(LEFT == 0);
                 _0x2D:
                 _0x31:
000201 9b33      	SBIS 0x6,3
000202 cffe      	RJMP _0x31
                 ; 0000 00F3 }
                 ; 0000 00F4 
                 ; 0000 00F5 
                 ; 0000 00F6 
                 ; 0000 00F7 if(row == 0){
                 _0x2C:
000203 3050      	CPI  R21,0
000204 f589      	BRNE _0x34
                 ; 0000 00F8 max_day = dayOfMonth[month-1] + 30;
000205 940e 0a26 	CALL SUBOPT_0x1C
                 ; 0000 00F9 if(TANG == 0){
000207 9931      	SBIC 0x6,1
000208 c015      	RJMP _0x35
                 ; 0000 00FA inOrde = 1;
                +
000209 e001     +LDI R16 , LOW ( 1 )
00020a e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 00FB DS1307_Set_Date(&day, &date, &month, &year, max_day, position, inOrde);
00020b 940e 0a33 	CALL SUBOPT_0x1D
                 ; 0000 00FC 
                 ; 0000 00FD Lcd_Chr(1,1, date/10+0x30);
00020d 940e 0904 	CALL SUBOPT_0x6
                 ; 0000 00FE Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 00FF Lcd_Chr_Cp('/');
                 ; 0000 0100 Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 0101 Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 0102 Lcd_Chr_Cp('/');
                 ; 0000 0103 Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 0104 Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 0105 Lcd_Chr_Cp(' ');
                 ; 0000 0106 Lcd_Out_Cp(dayOfWeek[day%7]);
00020f 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 0107 
                 ; 0000 0108 if(row == 0){
000211 3050      	CPI  R21,0
000212 f419      	BRNE _0x36
                 ; 0000 0109 address = 0x80 + position - 1;
000213 2fe2      	MOV  R30,R18
000214 58e1      	SUBI R30,-LOW(127)
000215 c002      	RJMP _0x92
                 ; 0000 010A }
                 ; 0000 010B else{
                 _0x36:
                 ; 0000 010C address = 0xC0 + position - 1;
000216 2fe2      	MOV  R30,R18
000217 54e1      	SUBI R30,-LOW(191)
                 _0x92:
000218 93e0 0370 	STS  _address,R30
                 ; 0000 010D }
                 ; 0000 010E Lcd_Cmd(address);
00021a 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 010F 
                 ; 0000 0110 while(TANG == 0);
                 _0x38:
00021c 9b31      	SBIS 0x6,1
00021d cffe      	RJMP _0x38
                 ; 0000 0111 }
                 ; 0000 0112 
                 ; 0000 0113 if(GIAM == 0){
                 _0x35:
00021e 9932      	SBIC 0x6,2
00021f c015      	RJMP _0x3B
                 ; 0000 0114 inOrde = 0;
                +
000220 e000     +LDI R16 , LOW ( 0 )
000221 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0115 DS1307_Set_Date(&day, &date, &month, &year, max_day, position, inOrde);
000222 940e 0a33 	CALL SUBOPT_0x1D
                 ; 0000 0116 
                 ; 0000 0117 Lcd_Chr(1,1, date/10+0x30);
000224 940e 0904 	CALL SUBOPT_0x6
                 ; 0000 0118 Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 0119 Lcd_Chr_Cp('/');
                 ; 0000 011A Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 011B Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 011C Lcd_Chr_Cp('/');
                 ; 0000 011D Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 011E Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 011F Lcd_Chr_Cp(' ');
                 ; 0000 0120 Lcd_Out_Cp(dayOfWeek[day%7]);
000226 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 0121 
                 ; 0000 0122 if(row == 0){
000228 3050      	CPI  R21,0
000229 f419      	BRNE _0x3C
                 ; 0000 0123 address = 0x80 + position - 1;
00022a 2fe2      	MOV  R30,R18
00022b 58e1      	SUBI R30,-LOW(127)
00022c c002      	RJMP _0x93
                 ; 0000 0124 }
                 ; 0000 0125 else{
                 _0x3C:
                 ; 0000 0126 address = 0xC0 + position - 1;
00022d 2fe2      	MOV  R30,R18
00022e 54e1      	SUBI R30,-LOW(191)
                 _0x93:
00022f 93e0 0370 	STS  _address,R30
                 ; 0000 0127 }
                 ; 0000 0128 Lcd_Cmd(address);
000231 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 0129 
                 ; 0000 012A while(GIAM == 0);
                 _0x3E:
000233 9b32      	SBIS 0x6,2
000234 cffe      	RJMP _0x3E
                 ; 0000 012B }
                 ; 0000 012C }
                 _0x3B:
                 ; 0000 012D 
                 ; 0000 012E else{
000235 c036      	RJMP _0x41
                 _0x34:
                 ; 0000 012F if(TANG == 0){
000236 9931      	SBIC 0x6,1
000237 c019      	RJMP _0x42
                 ; 0000 0130 inOrde = 1;
                +
000238 e001     +LDI R16 , LOW ( 1 )
000239 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0131 DS1307_Set_Time(&sec, &min, &hour, position, inOrde);
00023a 940e 0a4a 	CALL SUBOPT_0x1E
                 ; 0000 0132 
                 ; 0000 0133 Lcd_Chr(2,1, hour/10+0x30);
00023c 940e 0960 	CALL SUBOPT_0x9
                 ; 0000 0134 Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 0135 Lcd_Out_Cp(" : ");
                +
00023e e3a2     +LDI R26 , LOW ( _0x18 + ( 4 ) )
00023f e0b3     +LDI R27 , HIGH ( _0x18 + ( 4 ) )
                 	__POINTW2MN _0x18,4
000240 940e 0a04 	CALL SUBOPT_0x17
                 ; 0000 0136 Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 0137 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 0138 Lcd_Chr_Cp(' ');
                 ; 0000 0139 Lcd_Chr_Cp(':');
                 ; 0000 013A Lcd_Chr_Cp(' ');
                 ; 0000 013B Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 013C Lcd_Chr_Cp(sec%10+0x30);
000242 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 013D 
                 ; 0000 013E if(row == 0){
000244 3050      	CPI  R21,0
000245 f419      	BRNE _0x43
                 ; 0000 013F address = 0x80 + position - 1;
000246 2fe2      	MOV  R30,R18
000247 58e1      	SUBI R30,-LOW(127)
000248 c002      	RJMP _0x94
                 ; 0000 0140 }
                 ; 0000 0141 else{
                 _0x43:
                 ; 0000 0142 address = 0xC0 + position - 1;
000249 2fe2      	MOV  R30,R18
00024a 54e1      	SUBI R30,-LOW(191)
                 _0x94:
00024b 93e0 0370 	STS  _address,R30
                 ; 0000 0143 }
                 ; 0000 0144 Lcd_Cmd(address);
00024d 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 0145 
                 ; 0000 0146 while(TANG == 0);
                 _0x45:
00024f 9b31      	SBIS 0x6,1
000250 cffe      	RJMP _0x45
                 ; 0000 0147 }
                 ; 0000 0148 if(GIAM == 0){
                 _0x42:
000251 9932      	SBIC 0x6,2
000252 c019      	RJMP _0x48
                 ; 0000 0149 inOrde = 0;
                +
000253 e000     +LDI R16 , LOW ( 0 )
000254 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 014A DS1307_Set_Time(&sec, &min, &hour, position, inOrde);
000255 940e 0a4a 	CALL SUBOPT_0x1E
                 ; 0000 014B 
                 ; 0000 014C Lcd_Chr(2,1, hour/10+0x30);
000257 940e 0960 	CALL SUBOPT_0x9
                 ; 0000 014D Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 014E Lcd_Out_Cp(" : ");
                +
000259 e3a6     +LDI R26 , LOW ( _0x18 + ( 8 ) )
00025a e0b3     +LDI R27 , HIGH ( _0x18 + ( 8 ) )
                 	__POINTW2MN _0x18,8
00025b 940e 0a04 	CALL SUBOPT_0x17
                 ; 0000 014F Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 0150 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 0151 Lcd_Chr_Cp(' ');
                 ; 0000 0152 Lcd_Chr_Cp(':');
                 ; 0000 0153 Lcd_Chr_Cp(' ');
                 ; 0000 0154 Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 0155 Lcd_Chr_Cp(sec%10+0x30);
00025d 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 0156 
                 ; 0000 0157 if(row == 0){
00025f 3050      	CPI  R21,0
000260 f419      	BRNE _0x49
                 ; 0000 0158 address = 0x80 + position - 1;
000261 2fe2      	MOV  R30,R18
000262 58e1      	SUBI R30,-LOW(127)
000263 c002      	RJMP _0x95
                 ; 0000 0159 }
                 ; 0000 015A else{
                 _0x49:
                 ; 0000 015B address = 0xC0 + position - 1;
000264 2fe2      	MOV  R30,R18
000265 54e1      	SUBI R30,-LOW(191)
                 _0x95:
000266 93e0 0370 	STS  _address,R30
                 ; 0000 015C }
                 ; 0000 015D Lcd_Cmd(address);
000268 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 015E 
                 ; 0000 015F while(GIAM == 0);
                 _0x4B:
00026a 9b32      	SBIS 0x6,2
00026b cffe      	RJMP _0x4B
                 ; 0000 0160 }
                 ; 0000 0161 }
                 _0x48:
                 _0x41:
                 ; 0000 0162 }
00026c cf4c      	RJMP _0x19
                 _0x1B:
                 ; 0000 0163 
                 ; 0000 0164 // Doi sang BCD r chuyen cho DS1307
                 ; 0000 0165 t = sec;
                +
00026d 824e     +STD Y + 6 , R4
                 	__PUTBSR 4,6
                 ; 0000 0166 bcd_convert = t / 10;
00026e 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 0167 bcd_convert <<= 4;
                 ; 0000 0168 bcd_convert |= t%10;
                 ; 0000 0169 DS1307_Receive(0, bcd_convert);
000270 e0e0      	LDI  R30,LOW(0)
000271 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 016A 
                 ; 0000 016B t = min;
                +
000273 823e     +STD Y + 6 , R3
                 	__PUTBSR 3,6
                 ; 0000 016C bcd_convert = t / 10;
000274 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 016D bcd_convert <<= 4;
                 ; 0000 016E bcd_convert |= t%10;
                 ; 0000 016F DS1307_Receive(1, bcd_convert);
000276 e0e1      	LDI  R30,LOW(1)
000277 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 0170 
                 ; 0000 0171 t = hour;
                +
000279 826e     +STD Y + 6 , R6
                 	__PUTBSR 6,6
                 ; 0000 0172 bcd_convert = t / 10;
00027a 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 0173 bcd_convert <<= 4;
                 ; 0000 0174 bcd_convert |= t%10;
                 ; 0000 0175 DS1307_Receive(2, bcd_convert);
00027c e0e2      	LDI  R30,LOW(2)
00027d 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 0176 
                 ; 0000 0177 t = day;
                +
00027f 825e     +STD Y + 6 , R5
                 	__PUTBSR 5,6
                 ; 0000 0178 bcd_convert = t / 10;
000280 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 0179 bcd_convert <<= 4;
                 ; 0000 017A bcd_convert |= t%10;
                 ; 0000 017B DS1307_Receive(3, bcd_convert);
000282 e0e3      	LDI  R30,LOW(3)
000283 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 017C 
                 ; 0000 017D t = date;
                +
000285 828e     +STD Y + 6 , R8
                 	__PUTBSR 8,6
                 ; 0000 017E bcd_convert = t / 10;
000286 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 017F bcd_convert <<= 4;
                 ; 0000 0180 bcd_convert |= t%10;
                 ; 0000 0181 DS1307_Receive(4, bcd_convert);
000288 e0e4      	LDI  R30,LOW(4)
000289 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 0182 
                 ; 0000 0183 t = month;
                +
00028b 827e     +STD Y + 6 , R7
                 	__PUTBSR 7,6
                 ; 0000 0184 bcd_convert = t / 10;
00028c 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 0185 bcd_convert <<= 4;
                 ; 0000 0186 bcd_convert |= t%10;
                 ; 0000 0187 DS1307_Receive(5, bcd_convert);
00028e e0e5      	LDI  R30,LOW(5)
00028f 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 0188 
                 ; 0000 0189 t = year;
                +
000291 82ae     +STD Y + 6 , R10
                 	__PUTBSR 10,6
                 ; 0000 018A bcd_convert = t / 10;
000292 940e 0a5c 	CALL SUBOPT_0x1F
                 ; 0000 018B bcd_convert <<= 4;
                 ; 0000 018C bcd_convert |= t%10;
                 ; 0000 018D DS1307_Receive(6, bcd_convert);
000294 e0e6      	LDI  R30,LOW(6)
000295 940e 0a70 	CALL SUBOPT_0x20
                 ; 0000 018E 
                 ; 0000 018F Lcd_Cmd(_LCD_CURSOR_OFF); // _LCD_CURSOR_OFF
000297 940e 0a74 	CALL SUBOPT_0x21
                 ; 0000 0190 Lcd_Cmd(_LCD_CLEAR);
                 ; 0000 0191 }
000299 9628      	ADIW R28,8
00029a c0de      	RJMP _0x9C
                 ; .FEND
                 
                 	.DSEG
                 _0x18:
00032e           	.BYTE 0xC
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0196 {
                 
                 	.CSEG
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00029b 940e 09e6 	CALL SUBOPT_0x13
                 ; 0000 0197 // Place your code here
                 ; 0000 0198 // Bien thay doi vi tri
                 ; 0000 0199 int inOrde;
                 ; 0000 019A int position = 1;
                 ; 0000 019B unsigned char row = 0;
                 ; 0000 019C unsigned char max_day = 30;
                 ; 0000 019D 
                 ; 0000 019E 
                 ; 0000 019F delay_ms(20);
00029d 940e 09f8 	CALL SUBOPT_0x15
                 ;	inOrde -> R16,R17
                 ;	position -> R18,R19
                 ;	row -> R21
                 ;	max_day -> R20
                 ; 0000 01A0 if(change_mode != 0){
00029f 91e0 036f 	LDS  R30,_change_mode
0002a1 30e0      	CPI  R30,0
0002a2 f019      	BREQ _0x4E
                 ; 0000 01A1 adjust();
0002a3 d15b      	RCALL _adjust
                 ; 0000 01A2 flag = 0;
0002a4 940e 09fe 	CALL SUBOPT_0x16
                 ; 0000 01A3 change_mode = 0;
                 ; 0000 01A4 }
                 ; 0000 01A5 
                 ; 0000 01A6 Lcd_Cmd(_LCD_CLEAR);
                 _0x4E:
0002a6 e0a1      	LDI  R26,LOW(1)
0002a7 940e 07c6 	CALL _Lcd_Cmd
                 ; 0000 01A7 
                 ; 0000 01A8 DS1307_Get_Date(&day, &date, &month, &year);
0002a9 940e 08dc 	CALL SUBOPT_0x2
                 ; 0000 01A9 Lcd_Chr(1,1, date/10+0x30);
0002ab 940e 0900 	CALL SUBOPT_0x5
0002ad 940e 0904 	CALL SUBOPT_0x6
                 ; 0000 01AA Lcd_Chr_Cp(date%10+0x30);
                 ; 0000 01AB Lcd_Chr_Cp('/');
                 ; 0000 01AC Lcd_Chr_Cp(month/10+0x30);
                 ; 0000 01AD Lcd_Chr_Cp(month%10+0x30);
                 ; 0000 01AE Lcd_Chr_Cp('/');
                 ; 0000 01AF Lcd_Chr_Cp(year/10+0x30);
                 ; 0000 01B0 Lcd_Chr_Cp(year%10+0x30);
                 ; 0000 01B1 Lcd_Chr_Cp(' ');
                 ; 0000 01B2 Lcd_Out_Cp(dayOfWeek[day%7]);
0002af 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 01B3 
                 ; 0000 01B4 DS1307_Get_Time(&sec, &min, &hour, &flag);
0002b1 940e 08f0 	CALL SUBOPT_0x4
                 ; 0000 01B5 Lcd_Chr(2,1, hour/10+0x30);
0002b3 940e 095b 	CALL SUBOPT_0x8
0002b5 940e 0960 	CALL SUBOPT_0x9
                 ; 0000 01B6 Lcd_Chr_Cp(hour%10+0x30);
                 ; 0000 01B7 Lcd_Out_Cp(" : ");
                +
0002b7 e3aa     +LDI R26 , LOW ( _0x4F + ( 0 ) )
0002b8 e0b3     +LDI R27 , HIGH ( _0x4F + ( 0 ) )
                 	__POINTW2MN _0x4F,0
0002b9 940e 0a04 	CALL SUBOPT_0x17
                 ; 0000 01B8 Lcd_Chr_Cp(min/10+0x30);
                 ; 0000 01B9 Lcd_Chr_Cp(min%10+0x30);
                 ; 0000 01BA Lcd_Chr_Cp(' ');
                 ; 0000 01BB Lcd_Chr_Cp(':');
                 ; 0000 01BC Lcd_Chr_Cp(' ');
                 ; 0000 01BD Lcd_Chr_Cp(sec/10+0x30);
                 ; 0000 01BE Lcd_Chr_Cp(sec%10+0x30);
0002bb 940e 07df 	CALL _Lcd_Chr_Cp
                 ; 0000 01BF 
                 ; 0000 01C0 a_sec = sec;
0002bd 2c94      	MOV  R9,R4
                 ; 0000 01C1 a_min = min;
0002be 2cc3      	MOV  R12,R3
                 ; 0000 01C2 a_hour = hour;
0002bf 2cb6      	MOV  R11,R6
                 ; 0000 01C3 a_day = day;
0002c0 2ce5      	MOV  R14,R5
                 ; 0000 01C4 a_date = date;
0002c1 2cd8      	MOV  R13,R8
                 ; 0000 01C5 a_month = month;
0002c2 9270 0346 	STS  _a_month,R7
                 ; 0000 01C6 a_year = year;
0002c4 92a0 0347 	STS  _a_year,R10
                 ; 0000 01C7 
                 ; 0000 01C8 Lcd_Cmd(_LCD_FIRST_ROW); // _LCD_FIRST_ROW
0002c6 940e 0a07 	CALL SUBOPT_0x18
                 ; 0000 01C9 Lcd_Cmd(_LCD_BLINK_CURSOR_ON); // _LCD_BLINK_CURSOR_ON
                 ; 0000 01CA position = 1;
                 ; 0000 01CB while(ALARM_MODE == 0){
                 _0x50:
0002c8 994b      	SBIC 0x9,3
0002c9 c0ac      	RJMP _0x52
                 ; 0000 01CC if(LEN == 0){
0002ca 994d      	SBIC 0x9,5
0002cb c006      	RJMP _0x53
                 ; 0000 01CD delay_ms(20);
0002cc 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 01CE row = 0;
0002ce 940e 0a10 	CALL SUBOPT_0x19
                 ; 0000 01CF 
                 ; 0000 01D0 address = 0x80 + position - 1;
                 ; 0000 01D1 Lcd_Cmd(address);
                 ; 0000 01D2 
                 ; 0000 01D3 while(LEN == 0);
                 _0x54:
0002d0 9b4d      	SBIS 0x9,5
0002d1 cffe      	RJMP _0x54
                 ; 0000 01D4 }
                 ; 0000 01D5 if(XUONG == 0){
                 _0x53:
0002d2 994e      	SBIC 0x9,6
0002d3 c006      	RJMP _0x57
                 ; 0000 01D6 delay_ms(20);
0002d4 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 01D7 row = 1;
0002d6 940e 0a19 	CALL SUBOPT_0x1A
                 ; 0000 01D8 
                 ; 0000 01D9 address = 0xC0 + position - 1;
                 ; 0000 01DA Lcd_Cmd(address);
                 ; 0000 01DB 
                 ; 0000 01DC while(XUONG == 0);
                 _0x58:
0002d8 9b4e      	SBIS 0x9,6
0002d9 cffe      	RJMP _0x58
                 ; 0000 01DD }
                 ; 0000 01DE if(RIGHT == 0){
                 _0x57:
0002da 994c      	SBIC 0x9,4
0002db c019      	RJMP _0x5B
                 ; 0000 01DF delay_ms(20);
0002dc 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 01E0 if(position > 0){
0002de 2400      	CLR  R0
0002df 1602      	CP   R0,R18
0002e0 0603      	CPC  R0,R19
0002e1 f48c      	BRGE _0x5C
                 ; 0000 01E1 position ++;
                +
0002e2 5f2f     +SUBI R18 , LOW ( - 1 )
0002e3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 01E2 if(row == 0){
0002e4 3050      	CPI  R21,0
0002e5 f419      	BRNE _0x5D
                 ; 0000 01E3 address = 0x80 + position - 1;
0002e6 2fe2      	MOV  R30,R18
0002e7 58e1      	SUBI R30,-LOW(127)
0002e8 c002      	RJMP _0x96
                 ; 0000 01E4 }
                 ; 0000 01E5 else{
                 _0x5D:
                 ; 0000 01E6 address = 0xC0 + position - 1;
0002e9 2fe2      	MOV  R30,R18
0002ea 54e1      	SUBI R30,-LOW(191)
                 _0x96:
0002eb 93e0 0370 	STS  _address,R30
                 ; 0000 01E7 }
                 ; 0000 01E8 if(position <= 16){
                +
0002ed 3121     +CPI R18 , LOW ( 17 )
0002ee e0e0     +LDI R30 , HIGH ( 17 )
0002ef 073e     +CPC R19 , R30
                 	__CPWRN 18,19,17
0002f0 f414      	BRGE _0x5F
                 ; 0000 01E9 Lcd_Cmd(address);
0002f1 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 01EA }
                 ; 0000 01EB }
                 _0x5F:
                 ; 0000 01EC while(RIGHT == 0);
                 _0x5C:
                 _0x60:
0002f3 9b4c      	SBIS 0x9,4
0002f4 cffe      	RJMP _0x60
                 ; 0000 01ED }
                 ; 0000 01EE if(LEFT == 0){
                 _0x5B:
0002f5 9933      	SBIC 0x6,3
0002f6 c01b      	RJMP _0x63
                 ; 0000 01EF delay_ms(20);
0002f7 940e 09f4 	CALL SUBOPT_0x14
                 ; 0000 01F0 if(position > 1){
                +
0002f9 3022     +CPI R18 , LOW ( 2 )
0002fa e0e0     +LDI R30 , HIGH ( 2 )
0002fb 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0002fc f09c      	BRLT _0x64
                 ; 0000 01F1 position --;
                +
0002fd 5021     +SUBI R18 , LOW ( 1 )
0002fe 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 01F2 if(position < 1)
                +
0002ff 3021     +CPI R18 , LOW ( 1 )
000300 e0e0     +LDI R30 , HIGH ( 1 )
000301 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1
000302 f414      	BRGE _0x65
                 ; 0000 01F3 position = 1;
                +
000303 e021     +LDI R18 , LOW ( 1 )
000304 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 01F4 if(row == 0){
                 _0x65:
000305 3050      	CPI  R21,0
000306 f419      	BRNE _0x66
                 ; 0000 01F5 address = 0x80 + position - 1;
000307 2fe2      	MOV  R30,R18
000308 58e1      	SUBI R30,-LOW(127)
000309 c002      	RJMP _0x97
                 ; 0000 01F6 }
                 ; 0000 01F7 else{
                 _0x66:
                 ; 0000 01F8 address = 0xC0 + position - 1;
00030a 2fe2      	MOV  R30,R18
00030b 54e1      	SUBI R30,-LOW(191)
                 _0x97:
00030c 93e0 0370 	STS  _address,R30
                 ; 0000 01F9 }
                 ; 0000 01FA Lcd_Cmd(address);
00030e 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 01FB }
                 ; 0000 01FC while(LEFT == 0);
                 _0x64:
                 _0x68:
000310 9b33      	SBIS 0x6,3
000311 cffe      	RJMP _0x68
                 ; 0000 01FD }
                 ; 0000 01FE 
                 ; 0000 01FF 
                 ; 0000 0200 
                 ; 0000 0201 if(row == 0){
                 _0x63:
000312 3050      	CPI  R21,0
000313 f589      	BRNE _0x6B
                 ; 0000 0202 max_day = dayOfMonth[month-1] + 30;
000314 940e 0a26 	CALL SUBOPT_0x1C
                 ; 0000 0203 if(TANG == 0){
000316 9931      	SBIC 0x6,1
000317 c015      	RJMP _0x6C
                 ; 0000 0204 inOrde = 1;
                +
000318 e001     +LDI R16 , LOW ( 1 )
000319 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0205 DS1307_Set_Date(&a_day, &a_date, &a_month, &a_year, max_day, position, inOrde);
00031a 940e 0a7c 	CALL SUBOPT_0x22
                 ; 0000 0206 
                 ; 0000 0207 Lcd_Chr(1,1, a_date/10+0x30);
00031c 940e 0a93 	CALL SUBOPT_0x23
                 ; 0000 0208 Lcd_Chr_Cp(a_date%10+0x30);
                 ; 0000 0209 Lcd_Chr_Cp('/');
                 ; 0000 020A Lcd_Chr_Cp(a_month/10+0x30);
                 ; 0000 020B Lcd_Chr_Cp(a_month%10+0x30);
                 ; 0000 020C Lcd_Chr_Cp('/');
                 ; 0000 020D Lcd_Chr_Cp(a_year/10+0x30);
                 ; 0000 020E Lcd_Chr_Cp(a_year%10+0x30);
                 ; 0000 020F Lcd_Chr_Cp(' ');
                 ; 0000 0210 Lcd_Out_Cp(dayOfWeek[a_day%7]);
00031e 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 0211 
                 ; 0000 0212 if(row == 0){
000320 3050      	CPI  R21,0
000321 f419      	BRNE _0x6D
                 ; 0000 0213 address = 0x80 + position - 1;
000322 2fe2      	MOV  R30,R18
000323 58e1      	SUBI R30,-LOW(127)
000324 c002      	RJMP _0x98
                 ; 0000 0214 }
                 ; 0000 0215 else{
                 _0x6D:
                 ; 0000 0216 address = 0xC0 + position - 1;
000325 2fe2      	MOV  R30,R18
000326 54e1      	SUBI R30,-LOW(191)
                 _0x98:
000327 93e0 0370 	STS  _address,R30
                 ; 0000 0217 }
                 ; 0000 0218 Lcd_Cmd(address);
000329 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 0219 
                 ; 0000 021A while(TANG == 0);
                 _0x6F:
00032b 9b31      	SBIS 0x6,1
00032c cffe      	RJMP _0x6F
                 ; 0000 021B }
                 ; 0000 021C 
                 ; 0000 021D if(GIAM == 0){
                 _0x6C:
00032d 9932      	SBIC 0x6,2
00032e c015      	RJMP _0x72
                 ; 0000 021E inOrde = 0;
                +
00032f e000     +LDI R16 , LOW ( 0 )
000330 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 021F DS1307_Set_Date(&a_day, &a_date, &a_month, &a_year, max_day, position, inOrde);
000331 940e 0a7c 	CALL SUBOPT_0x22
                 ; 0000 0220 
                 ; 0000 0221 Lcd_Chr(1,1, a_date/10+0x30);
000333 940e 0a93 	CALL SUBOPT_0x23
                 ; 0000 0222 Lcd_Chr_Cp(a_date%10+0x30);
                 ; 0000 0223 Lcd_Chr_Cp('/');
                 ; 0000 0224 Lcd_Chr_Cp(a_month/10+0x30);
                 ; 0000 0225 Lcd_Chr_Cp(a_month%10+0x30);
                 ; 0000 0226 Lcd_Chr_Cp('/');
                 ; 0000 0227 Lcd_Chr_Cp(a_year/10+0x30);
                 ; 0000 0228 Lcd_Chr_Cp(a_year%10+0x30);
                 ; 0000 0229 Lcd_Chr_Cp(' ');
                 ; 0000 022A Lcd_Out_Cp(dayOfWeek[a_day%7]);
000335 940e 094c 	CALL SUBOPT_0x7
                 ; 0000 022B 
                 ; 0000 022C if(row == 0){
000337 3050      	CPI  R21,0
000338 f419      	BRNE _0x73
                 ; 0000 022D address = 0x80 + position - 1;
000339 2fe2      	MOV  R30,R18
00033a 58e1      	SUBI R30,-LOW(127)
00033b c002      	RJMP _0x99
                 ; 0000 022E }
                 ; 0000 022F else{
                 _0x73:
                 ; 0000 0230 address = 0xC0 + position - 1;
00033c 2fe2      	MOV  R30,R18
00033d 54e1      	SUBI R30,-LOW(191)
                 _0x99:
00033e 93e0 0370 	STS  _address,R30
                 ; 0000 0231 }
                 ; 0000 0232 Lcd_Cmd(address);
000340 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 0233 
                 ; 0000 0234 while(GIAM == 0);
                 _0x75:
000342 9b32      	SBIS 0x6,2
000343 cffe      	RJMP _0x75
                 ; 0000 0235 }
                 ; 0000 0236 }
                 _0x72:
                 ; 0000 0237 
                 ; 0000 0238 else{
000344 c030      	RJMP _0x78
                 _0x6B:
                 ; 0000 0239 if(TANG == 0){
000345 9931      	SBIC 0x6,1
000346 c016      	RJMP _0x79
                 ; 0000 023A inOrde = 1;
                +
000347 e001     +LDI R16 , LOW ( 1 )
000348 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 023B DS1307_Set_Time(&a_sec, &a_min, &a_hour, position, inOrde);
000349 940e 0adf 	CALL SUBOPT_0x24
                 ; 0000 023C 
                 ; 0000 023D Lcd_Chr(2,1, a_hour/10+0x30);
00034b 940e 0af1 	CALL SUBOPT_0x25
                 ; 0000 023E Lcd_Chr_Cp(a_hour%10+0x30);
                 ; 0000 023F Lcd_Out_Cp(" : ");
                +
00034d e3ae     +LDI R26 , LOW ( _0x4F + ( 4 ) )
00034e e0b3     +LDI R27 , HIGH ( _0x4F + ( 4 ) )
                 	__POINTW2MN _0x4F,4
00034f 940e 0b05 	CALL SUBOPT_0x26
                 ; 0000 0240 Lcd_Chr_Cp(a_min/10+0x30);
                 ; 0000 0241 Lcd_Chr_Cp(a_min%10+0x30);
                 ; 0000 0242 Lcd_Chr_Cp(' ');
                 ; 0000 0243 Lcd_Chr_Cp(':');
                 ; 0000 0244 Lcd_Chr_Cp(' ');
                 ; 0000 0245 Lcd_Chr_Cp(a_sec/10+0x30);
                 ; 0000 0246 Lcd_Chr_Cp(a_sec%10+0x30);
                 ; 0000 0247 
                 ; 0000 0248 if(row == 0){
000351 f419      	BRNE _0x7A
                 ; 0000 0249 address = 0x80 + position - 1;
000352 2fe2      	MOV  R30,R18
000353 58e1      	SUBI R30,-LOW(127)
000354 c002      	RJMP _0x9A
                 ; 0000 024A }
                 ; 0000 024B else{
                 _0x7A:
                 ; 0000 024C address = 0xC0 + position - 1;
000355 2fe2      	MOV  R30,R18
000356 54e1      	SUBI R30,-LOW(191)
                 _0x9A:
000357 93e0 0370 	STS  _address,R30
                 ; 0000 024D }
                 ; 0000 024E Lcd_Cmd(address);
000359 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 024F 
                 ; 0000 0250 while(TANG == 0);
                 _0x7C:
00035b 9b31      	SBIS 0x6,1
00035c cffe      	RJMP _0x7C
                 ; 0000 0251 }
                 ; 0000 0252 if(GIAM == 0){
                 _0x79:
00035d 9932      	SBIC 0x6,2
00035e c016      	RJMP _0x7F
                 ; 0000 0253 inOrde = 0;
                +
00035f e000     +LDI R16 , LOW ( 0 )
000360 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0254 DS1307_Set_Time(&a_sec, &a_min, &a_hour, position, inOrde);
000361 940e 0adf 	CALL SUBOPT_0x24
                 ; 0000 0255 
                 ; 0000 0256 Lcd_Chr(2,1, a_hour/10+0x30);
000363 940e 0af1 	CALL SUBOPT_0x25
                 ; 0000 0257 Lcd_Chr_Cp(a_hour%10+0x30);
                 ; 0000 0258 Lcd_Out_Cp(" : ");
                +
000365 e4a2     +LDI R26 , LOW ( _0x4F + ( 8 ) )
000366 e0b3     +LDI R27 , HIGH ( _0x4F + ( 8 ) )
                 	__POINTW2MN _0x4F,8
000367 940e 0b05 	CALL SUBOPT_0x26
                 ; 0000 0259 Lcd_Chr_Cp(a_min/10+0x30);
                 ; 0000 025A Lcd_Chr_Cp(a_min%10+0x30);
                 ; 0000 025B Lcd_Chr_Cp(' ');
                 ; 0000 025C Lcd_Chr_Cp(':');
                 ; 0000 025D Lcd_Chr_Cp(' ');
                 ; 0000 025E Lcd_Chr_Cp(a_sec/10+0x30);
                 ; 0000 025F Lcd_Chr_Cp(a_sec%10+0x30);
                 ; 0000 0260 
                 ; 0000 0261 if(row == 0){
000369 f419      	BRNE _0x80
                 ; 0000 0262 address = 0x80 + position - 1;
00036a 2fe2      	MOV  R30,R18
00036b 58e1      	SUBI R30,-LOW(127)
00036c c002      	RJMP _0x9B
                 ; 0000 0263 }
                 ; 0000 0264 else{
                 _0x80:
                 ; 0000 0265 address = 0xC0 + position - 1;
00036d 2fe2      	MOV  R30,R18
00036e 54e1      	SUBI R30,-LOW(191)
                 _0x9B:
00036f 93e0 0370 	STS  _address,R30
                 ; 0000 0266 }
                 ; 0000 0267 Lcd_Cmd(address);
000371 940e 0a22 	CALL SUBOPT_0x1B
                 ; 0000 0268 
                 ; 0000 0269 while(GIAM == 0);
                 _0x82:
000373 9b32      	SBIS 0x6,2
000374 cffe      	RJMP _0x82
                 ; 0000 026A }
                 ; 0000 026B }
                 _0x7F:
                 _0x78:
                 ; 0000 026C }
000375 cf52      	RJMP _0x50
                 _0x52:
                 ; 0000 026D 
                 ; 0000 026E Lcd_Cmd(_LCD_CURSOR_OFF); // _LCD_CURSOR_OFF
000376 940e 0a74 	CALL SUBOPT_0x21
                 ; 0000 026F Lcd_Cmd(_LCD_CLEAR);
                 ; 0000 0270 }
000378 9626      	ADIW R28,6
                 _0x9C:
000379 91e9      	LD   R30,Y+
00037a bfef      	OUT  SREG,R30
00037b 91f9      	LD   R31,Y+
00037c 91e9      	LD   R30,Y+
00037d 91b9      	LD   R27,Y+
00037e 91a9      	LD   R26,Y+
00037f 9199      	LD   R25,Y+
000380 9189      	LD   R24,Y+
000381 9179      	LD   R23,Y+
000382 9169      	LD   R22,Y+
000383 90f9      	LD   R15,Y+
000384 9019      	LD   R1,Y+
000385 9009      	LD   R0,Y+
000386 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x4F:
00033a           	.BYTE 0xC
                 ;void main(void)
                 ; 0000 0273 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0274 // Declare your local variables here
                 ; 0000 0275 
                 ; 0000 0276 // Crystal Oscillator division factor: 1
                 ; 0000 0277 #pragma optsize-
                 ; 0000 0278 CLKPR=(1<<CLKPCE);
000387 e8e0      	LDI  R30,LOW(128)
000388 93e0 0061 	STS  97,R30
                 ; 0000 0279 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00038a e0e0      	LDI  R30,LOW(0)
00038b 93e0 0061 	STS  97,R30
                 ; 0000 027A #ifdef _OPTIMIZE_SIZE_
                 ; 0000 027B #pragma optsize+
                 ; 0000 027C #endif
                 ; 0000 027D 
                 ; 0000 027E // Input/Output Ports initialization
                 ; 0000 027F // Port B initialization
                 ; 0000 0280 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=O ...
                 ; 0000 0281 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1< ...
00038d e3ef      	LDI  R30,LOW(63)
00038e b9e4      	OUT  0x4,R30
                 ; 0000 0282 // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0283 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
00038f e0e0      	LDI  R30,LOW(0)
000390 b9e5      	OUT  0x5,R30
                 ; 0000 0284 
                 ; 0000 0285 // Port C initialization
                 ; 0000 0286 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0287 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1< ...
000391 e0e1      	LDI  R30,LOW(1)
000392 b9e7      	OUT  0x7,R30
                 ; 0000 0288 // State: Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=P Bit0=0
                 ; 0000 0289 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<< ...
000393 e0ee      	LDI  R30,LOW(14)
000394 b9e8      	OUT  0x8,R30
                 ; 0000 028A 
                 ; 0000 028B // Port D initialization
                 ; 0000 028C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 028D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
000395 e0e0      	LDI  R30,LOW(0)
000396 b9ea      	OUT  0xA,R30
                 ; 0000 028E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 028F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
000397 b9eb      	OUT  0xB,R30
                 ; 0000 0290 
                 ; 0000 0291 // Timer/Counter 0 initialization
                 ; 0000 0292 // Clock source: System Clock
                 ; 0000 0293 // Clock value: Timer 0 Stopped
                 ; 0000 0294 // Mode: Normal top=0xFF
                 ; 0000 0295 // OC0A output: Disconnected
                 ; 0000 0296 // OC0B output: Disconnected
                 ; 0000 0297 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<< ...
000398 bde4      	OUT  0x24,R30
                 ; 0000 0298 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000399 bde5      	OUT  0x25,R30
                 ; 0000 0299 TCNT0=0x00;
00039a bde6      	OUT  0x26,R30
                 ; 0000 029A OCR0A=0x00;
00039b bde7      	OUT  0x27,R30
                 ; 0000 029B OCR0B=0x00;
00039c bde8      	OUT  0x28,R30
                 ; 0000 029C 
                 ; 0000 029D // Timer/Counter 1 initialization
                 ; 0000 029E // Clock source: System Clock
                 ; 0000 029F // Clock value: Timer1 Stopped
                 ; 0000 02A0 // Mode: Normal top=0xFFFF
                 ; 0000 02A1 // OC1A output: Disconnected
                 ; 0000 02A2 // OC1B output: Disconnected
                 ; 0000 02A3 // Noise Canceler: Off
                 ; 0000 02A4 // Input Capture on Falling Edge
                 ; 0000 02A5 // Timer1 Overflow Interrupt: Off
                 ; 0000 02A6 // Input Capture Interrupt: Off
                 ; 0000 02A7 // Compare A Match Interrupt: Off
                 ; 0000 02A8 // Compare B Match Interrupt: Off
                 ; 0000 02A9 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
00039d 93e0 0080 	STS  128,R30
                 ; 0000 02AA TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
00039f 93e0 0081 	STS  129,R30
                 ; 0000 02AB TCNT1H=0x00;
0003a1 93e0 0085 	STS  133,R30
                 ; 0000 02AC TCNT1L=0x00;
0003a3 93e0 0084 	STS  132,R30
                 ; 0000 02AD ICR1H=0x00;
0003a5 93e0 0087 	STS  135,R30
                 ; 0000 02AE ICR1L=0x00;
0003a7 93e0 0086 	STS  134,R30
                 ; 0000 02AF OCR1AH=0x00;
0003a9 93e0 0089 	STS  137,R30
                 ; 0000 02B0 OCR1AL=0x00;
0003ab 93e0 0088 	STS  136,R30
                 ; 0000 02B1 OCR1BH=0x00;
0003ad 93e0 008b 	STS  139,R30
                 ; 0000 02B2 OCR1BL=0x00;
0003af 93e0 008a 	STS  138,R30
                 ; 0000 02B3 
                 ; 0000 02B4 // Timer/Counter 2 initialization
                 ; 0000 02B5 // Clock source: System Clock
                 ; 0000 02B6 // Clock value: Timer2 Stopped
                 ; 0000 02B7 // Mode: Normal top=0xFF
                 ; 0000 02B8 // OC2A output: Disconnected
                 ; 0000 02B9 // OC2B output: Disconnected
                 ; 0000 02BA ASSR=(0<<EXCLK) | (0<<AS2);
0003b1 93e0 00b6 	STS  182,R30
                 ; 0000 02BB TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<< ...
0003b3 93e0 00b0 	STS  176,R30
                 ; 0000 02BC TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0003b5 93e0 00b1 	STS  177,R30
                 ; 0000 02BD TCNT2=0x00;
0003b7 93e0 00b2 	STS  178,R30
                 ; 0000 02BE OCR2A=0x00;
0003b9 93e0 00b3 	STS  179,R30
                 ; 0000 02BF OCR2B=0x00;
0003bb 93e0 00b4 	STS  180,R30
                 ; 0000 02C0 
                 ; 0000 02C1 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 02C2 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0003bd 93e0 006e 	STS  110,R30
                 ; 0000 02C3 
                 ; 0000 02C4 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 02C5 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0003bf 93e0 006f 	STS  111,R30
                 ; 0000 02C6 
                 ; 0000 02C7 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 02C8 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0003c1 93e0 0070 	STS  112,R30
                 ; 0000 02C9 
                 ; 0000 02CA // External Interrupt(s) initialization
                 ; 0000 02CB // INT0: On
                 ; 0000 02CC // INT0 Mode: Falling Edge
                 ; 0000 02CD // INT1: On
                 ; 0000 02CE // INT1 Mode: Falling Edge
                 ; 0000 02CF // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 02D0 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 02D1 // Interrupt on any change on pins PCINT16-23: On
                 ; 0000 02D2 EICRA=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0003c3 e0ea      	LDI  R30,LOW(10)
0003c4 93e0 0069 	STS  105,R30
                 ; 0000 02D3 EIMSK=(1<<INT1) | (1<<INT0);
0003c6 e0e3      	LDI  R30,LOW(3)
0003c7 bbed      	OUT  0x1D,R30
                 ; 0000 02D4 EIFR=(1<<INTF1) | (1<<INTF0);
0003c8 bbec      	OUT  0x1C,R30
                 ; 0000 02D5 PCICR=(1<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0003c9 e0e4      	LDI  R30,LOW(4)
0003ca 93e0 0068 	STS  104,R30
                 ; 0000 02D6 PCMSK2=(1<<PCINT23) | (0<<PCINT22) | (0<<PCINT21) | (0<<PCINT20) | (0<<PCINT19)  ...
0003cc e8e0      	LDI  R30,LOW(128)
0003cd 93e0 006d 	STS  109,R30
                 ; 0000 02D7 PCIFR=(1<<PCIF2) | (0<<PCIF1) | (0<<PCIF0);
0003cf e0e4      	LDI  R30,LOW(4)
0003d0 bbeb      	OUT  0x1B,R30
                 ; 0000 02D8 
                 ; 0000 02D9 // USART initialization
                 ; 0000 02DA // USART disabled
                 ; 0000 02DB UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<U ...
0003d1 e0e0      	LDI  R30,LOW(0)
0003d2 93e0 00c1 	STS  193,R30
                 ; 0000 02DC 
                 ; 0000 02DD // Analog Comparator initialization
                 ; 0000 02DE // Analog Comparator: Off
                 ; 0000 02DF // The Analog Comparator's positive input is
                 ; 0000 02E0 // connected to the AIN0 pin
                 ; 0000 02E1 // The Analog Comparator's negative input is
                 ; 0000 02E2 // connected to the AIN1 pin
                 ; 0000 02E3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
0003d4 e8e0      	LDI  R30,LOW(128)
0003d5 bfe0      	OUT  0x30,R30
                 ; 0000 02E4 ADCSRB=(0<<ACME);
0003d6 e0e0      	LDI  R30,LOW(0)
0003d7 93e0 007b 	STS  123,R30
                 ; 0000 02E5 // Digital input buffer on AIN0: On
                 ; 0000 02E6 // Digital input buffer on AIN1: On
                 ; 0000 02E7 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0003d9 93e0 007f 	STS  127,R30
                 ; 0000 02E8 
                 ; 0000 02E9 // ADC initialization
                 ; 0000 02EA // ADC disabled
                 ; 0000 02EB ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
0003db 93e0 007a 	STS  122,R30
                 ; 0000 02EC 
                 ; 0000 02ED // SPI initialization
                 ; 0000 02EE // SPI disabled
                 ; 0000 02EF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
0003dd bdec      	OUT  0x2C,R30
                 ; 0000 02F0 
                 ; 0000 02F1 // TWI initialization
                 ; 0000 02F2 // TWI disabled
                 ; 0000 02F3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0003de 93e0 00bc 	STS  188,R30
                 ; 0000 02F4 
                 ; 0000 02F5 // Globally enable interrupts
                 ; 0000 02F6 #asm("sei")
0003e0 9478      	SEI
                 ; 0000 02F7 Lcd_Init();
0003e1 940e 07a3 	CALL _Lcd_Init
                 ; 0000 02F8 I2C_Init();
0003e3 940e 0853 	CALL _I2C_Init
                 ; 0000 02F9 
                 ; 0000 02FA while (1)
                 _0x85:
                 ; 0000 02FB {
                 ; 0000 02FC // Place your code here
                 ; 0000 02FD display();
0003e5 dcea      	RCALL _display
                 ; 0000 02FE if(year == a_year && month == a_month && date == a_date && hour == a_hour && min ...
                 ; 0000 02FF // CODE CHO ALARM
                 ; 0000 0300 
                 ; 0000 0301 }
                 ; 0000 0302 delay_ms(1000);
0003e6 eea8      	LDI  R26,LOW(1000)
0003e7 e0b3      	LDI  R27,HIGH(1000)
0003e8 940e 0e5c 	CALL _delay_ms
                 ; 0000 0303 }
0003ea cffa      	RJMP _0x85
                 ; 0000 0304 }
                 _0x8B:
0003eb cfff      	RJMP _0x8B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void DS1307_Receive(unsigned char add, unsigned char dat){
                 ; 0001 0003 void DS1307_Receive(unsigned char add, unsigned char dat){
                 
                 	.CSEG
                 _DS1307_Receive:
                 ; .FSTART _DS1307_Receive
                 ; 0001 0004 I2C_Start();
0003ec 931a      	ST   -Y,R17
0003ed 930a      	ST   -Y,R16
0003ee 2f1a      	MOV  R17,R26
0003ef 810a      	LDD  R16,Y+2
                 ;	add -> R16
                 ;	dat -> R17
0003f0 940e 0b3a 	CALL SUBOPT_0x27
                 ; 0001 0005 I2C_Send_Byte(0xD0);
                 ; 0001 0006 if(I2C_Wait_Ack() == 0){
0003f2 f431      	BRNE _0x20003
                 ; 0001 0007 I2C_Send_Byte(add);
0003f3 2fa0      	MOV  R26,R16
0003f4 940e 0b40 	CALL SUBOPT_0x28
                 ; 0001 0008 I2C_Wait_Ack();
                 ; 0001 0009 I2C_Send_Byte(dat);
0003f6 2fa1      	MOV  R26,R17
0003f7 940e 0b40 	CALL SUBOPT_0x28
                 ; 0001 000A I2C_Wait_Ack();
                 ; 0001 000B }
                 ; 0001 000C I2C_Stop();
                 _0x20003:
0003f9 940e 085e 	CALL _I2C_Stop
                 ; 0001 000D }
0003fb 8119      	LDD  R17,Y+1
0003fc 8108      	LDD  R16,Y+0
0003fd 9623      	ADIW R28,3
0003fe 9508      	RET
                 ; .FEND
                 ;void adjust(void){
                 ; 0001 000F void adjust(void){
                 _adjust:
                 ; .FSTART _adjust
                 ; 0001 0010 unsigned char t;
                 ; 0001 0011 unsigned char hour,c,dv;
                 ; 0001 0012 unsigned char p;
                 ; 0001 0013 // Lay gia tri o dia chi 0x02
                 ; 0001 0014 I2C_Start();
0003ff 940e 0c6c 	CALL __SAVELOCR6
                 ;	t -> R17
                 ;	hour -> R16
                 ;	c -> R19
                 ;	dv -> R18
                 ;	p -> R21
000401 940e 0b3a 	CALL SUBOPT_0x27
                 ; 0001 0015 I2C_Send_Byte(0xD0);
                 ; 0001 0016 if(I2C_Wait_Ack() == 0){
000403 f009      	BREQ PC+2
000404 c040      	RJMP _0x20004
                 ; 0001 0017 I2C_Send_Byte(0x02);
000405 e0a2      	LDI  R26,LOW(2)
000406 940e 0b40 	CALL SUBOPT_0x28
                 ; 0001 0018 I2C_Wait_Ack();
                 ; 0001 0019 I2C_Start();
000408 940e 0b42 	CALL SUBOPT_0x29
                 ; 0001 001A I2C_Send_Byte(0xD1);
                 ; 0001 001B I2C_Wait_Ack();
                 ; 0001 001C hour = I2C_Read_Byte(1);
00040a e0a1      	LDI  R26,LOW(1)
00040b 940e 0893 	CALL _I2C_Read_Byte
00040d 2f0e      	MOV  R16,R30
                 ; 0001 001D I2C_Stop();
00040e 940e 085e 	CALL _I2C_Stop
                 ; 0001 001E 
                 ; 0001 001F 
                 ; 0001 0020 
                 ; 0001 0021 // Neu dang o che do 24 mode
                 ; 0001 0022 if(((hour>>6) & 0x01) == 0){
000410 2fa0      	MOV  R26,R16
000411 e0b0      	LDI  R27,0
000412 e0e6      	LDI  R30,LOW(6)
000413 940e 0c86 	CALL __ASRW12
000415 70e1      	ANDI R30,LOW(0x1)
000416 f4a9      	BRNE _0x20005
                 ; 0001 0023 t = (hour >> 4)*10 + (hour & 0x0F);
000417 940e 0b45 	CALL SUBOPT_0x2A
                 ; 0001 0024 hour &= 0x00;
000419 7000      	ANDI R16,LOW(0)
                 ; 0001 0025 // set pm hoac am
                 ; 0001 0026 if(t >= 12){
00041a 301c      	CPI  R17,12
00041b f010      	BRLO _0x20006
                 ; 0001 0027 hour |= 0x20;
00041c 6200      	ORI  R16,LOW(32)
                 ; 0001 0028 }
                 ; 0001 0029 else{
00041d c001      	RJMP _0x20007
                 _0x20006:
                 ; 0001 002A hour |= 0x00;
00041e 6000      	ORI  R16,LOW(0)
                 ; 0001 002B }
                 _0x20007:
                 ; 0001 002C t %= 12;
00041f 2fa1      	MOV  R26,R17
000420 27bb      	CLR  R27
000421 e0ec      	LDI  R30,LOW(12)
000422 e0f0      	LDI  R31,HIGH(12)
000423 940e 0cc2 	CALL __MODW21
000425 2f1e      	MOV  R17,R30
                 ; 0001 002D c = t / 10;
000426 940e 0b51 	CALL SUBOPT_0x2B
                 ; 0001 002E c <<= 4;
                 ; 0001 002F dv = t % 10;
                 ; 0001 0030 hour |= 0x40+dv+c; // set bit6 len 1
000428 2fe2      	MOV  R30,R18
000429 5ce0      	SUBI R30,-LOW(64)
00042a 0fe3      	ADD  R30,R19
00042b c014      	RJMP _0x20090
                 ; 0001 0031 
                 ; 0001 0032 DS1307_Receive(0x02, hour);
                 ; 0001 0033 }
                 ; 0001 0034 // Neu dang o che do 12 mode
                 ; 0001 0035 else{
                 _0x20005:
                 ; 0001 0036 p = ((hour>>5) & 0x01);
00042c 2fe0      	MOV  R30,R16
00042d 95e2      	SWAP R30
00042e 70ef      	ANDI R30,0xF
00042f 95e6      	LSR  R30
000430 70e1      	ANDI R30,LOW(0x1)
000431 2f5e      	MOV  R21,R30
                 ; 0001 0037 hour &= 0x1F;
000432 710f      	ANDI R16,LOW(31)
                 ; 0001 0038 t = (hour >> 4)*10 + (hour & 0x0F);
000433 940e 0b45 	CALL SUBOPT_0x2A
                 ; 0001 0039 if(p == 1){
000435 3051      	CPI  R21,1
000436 f421      	BRNE _0x20009
                 ; 0001 003A t += 12;
000437 5f14      	SUBI R17,-LOW(12)
                 ; 0001 003B if(hour == 24){
000438 3108      	CPI  R16,24
000439 f409      	BRNE _0x2000A
                 ; 0001 003C t = 0;
00043a e010      	LDI  R17,LOW(0)
                 ; 0001 003D }
                 ; 0001 003E }
                 _0x2000A:
                 ; 0001 003F c = t / 10;
                 _0x20009:
00043b 940e 0b51 	CALL SUBOPT_0x2B
                 ; 0001 0040 c <<= 4;
                 ; 0001 0041 dv = t % 10;
                 ; 0001 0042 hour &= 0x00;
00043d 7000      	ANDI R16,LOW(0)
                 ; 0001 0043 hour |= dv+c;
00043e 2fe3      	MOV  R30,R19
00043f 0fe2      	ADD  R30,R18
                 _0x20090:
000440 2b0e      	OR   R16,R30
                 ; 0001 0044 DS1307_Receive(0x02, hour);
000441 e0e2      	LDI  R30,LOW(2)
000442 93ea      	ST   -Y,R30
000443 2fa0      	MOV  R26,R16
000444 dfa7      	RCALL _DS1307_Receive
                 ; 0001 0045 }
                 ; 0001 0046 }
                 ; 0001 0047 
                 ; 0001 0048 }
                 _0x20004:
000445 940e 0c73 	CALL __LOADLOCR6
000447 940c 07fe 	JMP  _0x2000006
                 ; .FEND
                 ;void DS1307_Get_Time(unsigned char *sec, unsigned char *min, unsigned char *hour ...
                 ; 0001 004A void DS1307_Get_Time(unsigned char *sec, unsigned char *min, unsigned char *hour, unsigned char *flag){
                 _DS1307_Get_Time:
                 ; .FSTART _DS1307_Get_Time
                 ; 0001 004B unsigned char t_sec, t_min, t_hour;
                 ; 0001 004C unsigned char temp;
                 ; 0001 004D // Lay du lieu tu DS1307
                 ; 0001 004E I2C_Start();
000449 940e 0c6c 	CALL __SAVELOCR6
00044b 01ad      	MOVW R20,R26
                 ;	*sec -> Y+10
                 ;	*min -> Y+8
                 ;	*hour -> Y+6
                 ;	*flag -> R20,R21
                 ;	t_sec -> R17
                 ;	t_min -> R16
                 ;	t_hour -> R19
                 ;	temp -> R18
00044c 940e 0b3a 	CALL SUBOPT_0x27
                 ; 0001 004F I2C_Send_Byte(0xD0);
                 ; 0001 0050 if(I2C_Wait_Ack() == 0){
00044e f5d1      	BRNE _0x2000B
                 ; 0001 0051 I2C_Send_Byte(0x00); // bat dau doc tu dia chi cua sec
00044f e0a0      	LDI  R26,LOW(0)
000450 940e 0b40 	CALL SUBOPT_0x28
                 ; 0001 0052 I2C_Wait_Ack();
                 ; 0001 0053 I2C_Start();
000452 940e 0b42 	CALL SUBOPT_0x29
                 ; 0001 0054 I2C_Send_Byte(0xD1);
                 ; 0001 0055 I2C_Wait_Ack();
                 ; 0001 0056 t_sec = I2C_Read_Byte(0);
000454 940e 0b62 	CALL SUBOPT_0x2C
                 ; 0001 0057 t_min = I2C_Read_Byte(0);
                 ; 0001 0058 t_hour = I2C_Read_Byte(1);
000456 e0a1      	LDI  R26,LOW(1)
000457 940e 0893 	CALL _I2C_Read_Byte
000459 2f3e      	MOV  R19,R30
                 ; 0001 0059 I2C_Stop();
00045a 940e 085e 	CALL _I2C_Stop
                 ; 0001 005A 
                 ; 0001 005B 
                 ; 0001 005C // Xoa cac bit du
                 ; 0001 005D t_sec &= 0x7F;
00045c 771f      	ANDI R17,LOW(127)
                 ; 0001 005E t_min &= 0x7F;
00045d 770f      	ANDI R16,LOW(127)
                 ; 0001 005F 
                 ; 0001 0060 // Chuyen tu BCD sang thap phan
                 ; 0001 0061 *sec =  (t_sec >> 4)*10 + (t_sec & 0x0F);
00045e 2fe1      	MOV  R30,R17
00045f 940e 0b69 	CALL SUBOPT_0x2D
000461 2fe1      	MOV  R30,R17
000462 70ef      	ANDI R30,LOW(0xF)
000463 0fea      	ADD  R30,R26
000464 940e 0b70 	CALL SUBOPT_0x2E
                 ; 0001 0062 *min = (t_min >> 4)*10 + (t_min & 0x0F);
000466 940e 0b75 	CALL SUBOPT_0x2F
                 ; 0001 0063 
                 ; 0001 0064 // Kiem tra mode dang hoat dong la 24 hay 12
                 ; 0001 0065 temp = ((t_hour>>6) & 0x01);
000468 95e2      	SWAP R30
000469 70ef      	ANDI R30,0xF
00046a 95e6      	LSR  R30
00046b 95e6      	LSR  R30
00046c 70e1      	ANDI R30,LOW(0x1)
00046d 2f2e      	MOV  R18,R30
                 ; 0001 0066 // Mode 12
                 ; 0001 0067 if(temp == 0x01){
00046e 3021      	CPI  R18,1
00046f f481      	BRNE _0x2000C
                 ; 0001 0068 temp = ((t_hour>>5) & 0x01);
000470 2fe3      	MOV  R30,R19
000471 95e2      	SWAP R30
000472 70ef      	ANDI R30,0xF
000473 95e6      	LSR  R30
000474 70e1      	ANDI R30,LOW(0x1)
000475 2f2e      	MOV  R18,R30
                 ; 0001 0069 // PM
                 ; 0001 006A if(temp == 1){
000476 3021      	CPI  R18,1
000477 f419      	BRNE _0x2000D
                 ; 0001 006B *flag = 2;
000478 01da      	MOVW R26,R20
000479 e0e2      	LDI  R30,LOW(2)
00047a c002      	RJMP _0x20091
                 ; 0001 006C }
                 ; 0001 006D // AM
                 ; 0001 006E else{
                 _0x2000D:
                 ; 0001 006F *flag = 1;
00047b 01da      	MOVW R26,R20
00047c e0e1      	LDI  R30,LOW(1)
                 _0x20091:
00047d 93ec      	ST   X,R30
                 ; 0001 0070 }
                 ; 0001 0071 t_hour &= 0x1F;
00047e 713f      	ANDI R19,LOW(31)
                 ; 0001 0072 *hour = (t_hour >> 4)*10 + (t_hour & 0x0F);
00047f c004      	RJMP _0x20092
                 ; 0001 0073 }
                 ; 0001 0074 // Mode 24
                 ; 0001 0075 else{
                 _0x2000C:
                 ; 0001 0076 *flag = 0;
000480 01da      	MOVW R26,R20
000481 e0e0      	LDI  R30,LOW(0)
000482 93ec      	ST   X,R30
                 ; 0001 0077 t_hour &= 0x3F;
000483 733f      	ANDI R19,LOW(63)
                 ; 0001 0078 *hour = (t_hour >> 4)*10 + (t_hour & 0x0F);
                 _0x20092:
000484 2fe3      	MOV  R30,R19
000485 940e 0b69 	CALL SUBOPT_0x2D
000487 940e 0b7d 	CALL SUBOPT_0x30
                 ; 0001 0079 }
                 ; 0001 007A }
                 ; 0001 007B }
                 _0x2000B:
000489 c02a      	RJMP _0x2000008
                 ; .FEND
                 ;void DS1307_Get_Date(unsigned char *day, unsigned char *date, unsigned char *mon ...
                 ; 0001 007D void DS1307_Get_Date(unsigned char *day, unsigned char *date, unsigned char *month, unsigned char *year){
                 _DS1307_Get_Date:
                 ; .FSTART _DS1307_Get_Date
                 ; 0001 007E unsigned char t_day, t_date, t_month, t_year;
                 ; 0001 007F // Lay du lieu tu DS1307
                 ; 0001 0080 I2C_Start();
00048a 940e 0c6c 	CALL __SAVELOCR6
00048c 01ad      	MOVW R20,R26
                 ;	*day -> Y+10
                 ;	*date -> Y+8
                 ;	*month -> Y+6
                 ;	*year -> R20,R21
                 ;	t_day -> R17
                 ;	t_date -> R16
                 ;	t_month -> R19
                 ;	t_year -> R18
00048d 940e 0b3a 	CALL SUBOPT_0x27
                 ; 0001 0081 I2C_Send_Byte(0xD0);
                 ; 0001 0082 if(I2C_Wait_Ack() == 0){
00048f f521      	BRNE _0x20010
                 ; 0001 0083 I2C_Send_Byte(0x03); // bat dau doc tu dia chi cua day
000490 e0a3      	LDI  R26,LOW(3)
000491 940e 0b40 	CALL SUBOPT_0x28
                 ; 0001 0084 I2C_Wait_Ack();
                 ; 0001 0085 I2C_Start();
000493 940e 0b42 	CALL SUBOPT_0x29
                 ; 0001 0086 I2C_Send_Byte(0xD1);
                 ; 0001 0087 I2C_Wait_Ack();
                 ; 0001 0088 t_day = I2C_Read_Byte(0);
000495 940e 0b62 	CALL SUBOPT_0x2C
                 ; 0001 0089 t_date = I2C_Read_Byte(0);
                 ; 0001 008A t_month = I2C_Read_Byte(0);
000497 e0a0      	LDI  R26,LOW(0)
000498 940e 0893 	CALL _I2C_Read_Byte
00049a 2f3e      	MOV  R19,R30
                 ; 0001 008B t_year = I2C_Read_Byte(1);
00049b 940e 0b84 	CALL SUBOPT_0x31
                 ; 0001 008C I2C_Stop();
00049d 940e 085e 	CALL _I2C_Stop
                 ; 0001 008D 
                 ; 0001 008E // Xoa cac bit du
                 ; 0001 008F t_day &= 0x0F;
00049f 701f      	ANDI R17,LOW(15)
                 ; 0001 0090 t_date &= 0x3F;
0004a0 730f      	ANDI R16,LOW(63)
                 ; 0001 0091 t_month &= 0x1F;
0004a1 713f      	ANDI R19,LOW(31)
                 ; 0001 0092 
                 ; 0001 0093 // Chuyen tu BCD sang thap phan
                 ; 0001 0094 *day = (t_day & 0x0F);
0004a2 2fe1      	MOV  R30,R17
0004a3 70ef      	ANDI R30,LOW(0xF)
0004a4 940e 0b70 	CALL SUBOPT_0x2E
                 ; 0001 0095 *date = (t_date >> 4)*10 + (t_date & 0x0F);
0004a6 940e 0b75 	CALL SUBOPT_0x2F
                 ; 0001 0096 *month = (t_month >> 4)*10 + (t_month & 0x0F);
0004a8 940e 0b69 	CALL SUBOPT_0x2D
0004aa 940e 0b7d 	CALL SUBOPT_0x30
                 ; 0001 0097 *year = (t_year >> 4)*10 + (t_year & 0x0F);
0004ac 2fe2      	MOV  R30,R18
0004ad 940e 0b69 	CALL SUBOPT_0x2D
0004af 2fe2      	MOV  R30,R18
0004b0 70ef      	ANDI R30,LOW(0xF)
0004b1 0fea      	ADD  R30,R26
0004b2 01da      	MOVW R26,R20
0004b3 93ec      	ST   X,R30
                 ; 0001 0098 }
                 ; 0001 0099 }
                 _0x20010:
                 _0x2000008:
0004b4 940e 0c73 	CALL __LOADLOCR6
0004b6 962c      	ADIW R28,12
0004b7 9508      	RET
                 ; .FEND
                 ;void DS1307_Set_Date(unsigned char *day, unsigned char *date, unsigned char *mon ...
                 ; 0001 009C void DS1307_Set_Date(unsigned char *day, unsigned char *date, unsigned char *month, unsigned char *year, unsigned char max_day, int position,    int inOrde){
                 _DS1307_Set_Date:
                 ; .FSTART _DS1307_Set_Date
                 ; 0001 009D if(inOrde == 1){
0004b8 940e 0c6c 	CALL __SAVELOCR6
0004ba 018d      	MOVW R16,R26
                +
0004bb 812e     +LDD R18 , Y + 6
0004bc 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
0004bd 8558      	LDD  R21,Y+8
                 ;	*day -> Y+15
                 ;	*date -> Y+13
                 ;	*month -> Y+11
                 ;	*year -> Y+9
                 ;	max_day -> R21
                 ;	position -> R18,R19
                 ;	inOrde -> R16,R17
0004be e0e1      	LDI  R30,LOW(1)
0004bf e0f0      	LDI  R31,HIGH(1)
0004c0 17e0      	CP   R30,R16
0004c1 07f1      	CPC  R31,R17
0004c2 f009      	BREQ PC+2
0004c3 c0ad      	RJMP _0x20011
                 ; 0001 009E if(position == 1){
0004c4 940e 0b88 	CALL SUBOPT_0x32
0004c6 f4e1      	BRNE _0x20012
                 ; 0001 009F if(*date + 10 > max_day){
0004c7 940e 0b8d 	CALL SUBOPT_0x33
0004c9 963a      	ADIW R30,10
0004ca 01df      	MOVW R26,R30
0004cb 2fe5      	MOV  R30,R21
0004cc e0f0      	LDI  R31,0
0004cd 17ea      	CP   R30,R26
0004ce 07fb      	CPC  R31,R27
0004cf f46c      	BRGE _0x20013
                 ; 0001 00A0 *date = *date + 10 - max_day;
0004d0 85ad      	LDD  R26,Y+13
0004d1 85be      	LDD  R27,Y+13+1
0004d2 91ec      	LD   R30,X
0004d3 5fe6      	SUBI R30,-LOW(10)
0004d4 940e 0b92 	CALL SUBOPT_0x34
                 ; 0001 00A1 *month += 1;
                 ; 0001 00A2 if(*month > 12){
0004d6 f028      	BRLO _0x20014
                 ; 0001 00A3 *month = 1;
0004d7 940e 0b9e 	CALL SUBOPT_0x35
                 ; 0001 00A4 *year += 1;
                 ; 0001 00A5 if(*year > 99)
0004d9 f010      	BRLO _0x20015
                 ; 0001 00A6 *year -= 100;
0004da 940e 0baa 	CALL SUBOPT_0x36
                 ; 0001 00A7 }
                 _0x20015:
                 ; 0001 00A8 }
                 _0x20014:
                 ; 0001 00A9 else{
0004dc c005      	RJMP _0x20016
                 _0x20013:
                 ; 0001 00AA *date += 10;
0004dd 85ad      	LDD  R26,Y+13
0004de 85be      	LDD  R27,Y+13+1
0004df 91ec      	LD   R30,X
0004e0 5fe6      	SUBI R30,-LOW(10)
0004e1 93ec      	ST   X,R30
                 ; 0001 00AB }
                 _0x20016:
                 ; 0001 00AC }
                 ; 0001 00AD else if(position == 2){
0004e2 c08d      	RJMP _0x20017
                 _0x20012:
0004e3 940e 0bb0 	CALL SUBOPT_0x37
0004e5 f4e1      	BRNE _0x20018
                 ; 0001 00AE if(*date + 1 > max_day){
0004e6 940e 0b8d 	CALL SUBOPT_0x33
0004e8 9631      	ADIW R30,1
0004e9 01df      	MOVW R26,R30
0004ea 2fe5      	MOV  R30,R21
0004eb e0f0      	LDI  R31,0
0004ec 17ea      	CP   R30,R26
0004ed 07fb      	CPC  R31,R27
0004ee f46c      	BRGE _0x20019
                 ; 0001 00AF *date = *date + 1 - max_day;
0004ef 85ad      	LDD  R26,Y+13
0004f0 85be      	LDD  R27,Y+13+1
0004f1 91ec      	LD   R30,X
0004f2 5fef      	SUBI R30,-LOW(1)
0004f3 940e 0b92 	CALL SUBOPT_0x34
                 ; 0001 00B0 *month += 1;
                 ; 0001 00B1 if(*month > 12){
0004f5 f028      	BRLO _0x2001A
                 ; 0001 00B2 *month = 1;
0004f6 940e 0b9e 	CALL SUBOPT_0x35
                 ; 0001 00B3 *year += 1;
                 ; 0001 00B4 if(*year > 99)
0004f8 f010      	BRLO _0x2001B
                 ; 0001 00B5 *year -= 100;
0004f9 940e 0baa 	CALL SUBOPT_0x36
                 ; 0001 00B6 }
                 _0x2001B:
                 ; 0001 00B7 }
                 _0x2001A:
                 ; 0001 00B8 else{
0004fb c005      	RJMP _0x2001C
                 _0x20019:
                 ; 0001 00B9 *date += 1;
0004fc 85ad      	LDD  R26,Y+13
0004fd 85be      	LDD  R27,Y+13+1
0004fe 91ec      	LD   R30,X
0004ff 5fef      	SUBI R30,-LOW(1)
000500 93ec      	ST   X,R30
                 ; 0001 00BA }
                 _0x2001C:
                 ; 0001 00BB }
                 ; 0001 00BC else if(position == 4){
000501 c06e      	RJMP _0x2001D
                 _0x20018:
000502 e0e4      	LDI  R30,LOW(4)
000503 e0f0      	LDI  R31,HIGH(4)
000504 17e2      	CP   R30,R18
000505 07f3      	CPC  R31,R19
000506 f4a1      	BRNE _0x2001E
                 ; 0001 00BD if(*month + 10 > 12){
000507 940e 0bb5 	CALL SUBOPT_0x38
000509 9733      	SBIW R30,3
00050a f054      	BRLT _0x2001F
                 ; 0001 00BE *month = *month + 10 - 12;
00050b 85ab      	LDD  R26,Y+11
00050c 85bc      	LDD  R27,Y+11+1
00050d 91ec      	LD   R30,X
00050e 50e2      	SUBI R30,LOW(2)
00050f 940e 0bba 	CALL SUBOPT_0x39
                 ; 0001 00BF *year += 1;
                 ; 0001 00C0 if(*year > 99)
000511 f010      	BRLO _0x20020
                 ; 0001 00C1 *year -= 100;
000512 940e 0baa 	CALL SUBOPT_0x36
                 ; 0001 00C2 }
                 _0x20020:
                 ; 0001 00C3 else{
000514 c005      	RJMP _0x20021
                 _0x2001F:
                 ; 0001 00C4 *month += 10;
000515 85ab      	LDD  R26,Y+11
000516 85bc      	LDD  R27,Y+11+1
000517 91ec      	LD   R30,X
000518 5fe6      	SUBI R30,-LOW(10)
000519 93ec      	ST   X,R30
                 ; 0001 00C5 }
                 _0x20021:
                 ; 0001 00C6 }
                 ; 0001 00C7 else if(position == 5){
00051a c055      	RJMP _0x20022
                 _0x2001E:
00051b e0e5      	LDI  R30,LOW(5)
00051c e0f0      	LDI  R31,HIGH(5)
00051d 17e2      	CP   R30,R18
00051e 07f3      	CPC  R31,R19
00051f f4a1      	BRNE _0x20023
                 ; 0001 00C8 if(*month + 1 > 12){
000520 940e 0bb5 	CALL SUBOPT_0x38
000522 973c      	SBIW R30,12
000523 f054      	BRLT _0x20024
                 ; 0001 00C9 *month = *month + 1 - 12;
000524 85ab      	LDD  R26,Y+11
000525 85bc      	LDD  R27,Y+11+1
000526 91ec      	LD   R30,X
000527 50eb      	SUBI R30,LOW(11)
000528 940e 0bba 	CALL SUBOPT_0x39
                 ; 0001 00CA *year += 1;
                 ; 0001 00CB if(*year > 99)
00052a f010      	BRLO _0x20025
                 ; 0001 00CC *year -= 100;
00052b 940e 0baa 	CALL SUBOPT_0x36
                 ; 0001 00CD }
                 _0x20025:
                 ; 0001 00CE else{
00052d c005      	RJMP _0x20026
                 _0x20024:
                 ; 0001 00CF *month += 1;
00052e 85ab      	LDD  R26,Y+11
00052f 85bc      	LDD  R27,Y+11+1
000530 91ec      	LD   R30,X
000531 5fef      	SUBI R30,-LOW(1)
000532 93ec      	ST   X,R30
                 ; 0001 00D0 }
                 _0x20026:
                 ; 0001 00D1 }
                 ; 0001 00D2 else if(position == 7){
000533 c03c      	RJMP _0x20027
                 _0x20023:
000534 940e 0bc5 	CALL SUBOPT_0x3A
000536 f491      	BRNE _0x20028
                 ; 0001 00D3 if(*year + 10 > 99){
000537 940e 0bca 	CALL SUBOPT_0x3B
000539 963a      	ADIW R30,10
00053a 36e4      	CPI  R30,LOW(0x64)
00053b e0a0      	LDI  R26,HIGH(0x64)
00053c 07fa      	CPC  R31,R26
00053d f02c      	BRLT _0x20029
                 ; 0001 00D4 *year = *year + 10 - 100;
00053e 85a9      	LDD  R26,Y+9
00053f 85ba      	LDD  R27,Y+9+1
000540 91ec      	LD   R30,X
000541 55ea      	SUBI R30,LOW(90)
000542 c004      	RJMP _0x20093
                 ; 0001 00D5 }
                 ; 0001 00D6 else{
                 _0x20029:
                 ; 0001 00D7 *year += 10;
000543 85a9      	LDD  R26,Y+9
000544 85ba      	LDD  R27,Y+9+1
000545 91ec      	LD   R30,X
000546 5fe6      	SUBI R30,-LOW(10)
                 _0x20093:
000547 93ec      	ST   X,R30
                 ; 0001 00D8 }
                 ; 0001 00D9 }
                 ; 0001 00DA else if(position == 8){
000548 c027      	RJMP _0x2002B
                 _0x20028:
000549 e0e8      	LDI  R30,LOW(8)
00054a e0f0      	LDI  R31,HIGH(8)
00054b 17e2      	CP   R30,R18
00054c 07f3      	CPC  R31,R19
00054d f491      	BRNE _0x2002C
                 ; 0001 00DB if(*year + 1 >= 99){
00054e 940e 0bca 	CALL SUBOPT_0x3B
000550 9631      	ADIW R30,1
000551 36e3      	CPI  R30,LOW(0x63)
000552 e0a0      	LDI  R26,HIGH(0x63)
000553 07fa      	CPC  R31,R26
000554 f02c      	BRLT _0x2002D
                 ; 0001 00DC *year = *year + 1 - 100;
000555 85a9      	LDD  R26,Y+9
000556 85ba      	LDD  R27,Y+9+1
000557 91ec      	LD   R30,X
000558 56e3      	SUBI R30,LOW(99)
000559 c004      	RJMP _0x20094
                 ; 0001 00DD }
                 ; 0001 00DE else{
                 _0x2002D:
                 ; 0001 00DF *year += 1;
00055a 85a9      	LDD  R26,Y+9
00055b 85ba      	LDD  R27,Y+9+1
00055c 91ec      	LD   R30,X
00055d 5fef      	SUBI R30,-LOW(1)
                 _0x20094:
00055e 93ec      	ST   X,R30
                 ; 0001 00E0 }
                 ; 0001 00E1 }
                 ; 0001 00E2 else if(position >= 10 && position <= 12){
00055f c010      	RJMP _0x2002F
                 _0x2002C:
                +
000560 302a     +CPI R18 , LOW ( 10 )
000561 e0e0     +LDI R30 , HIGH ( 10 )
000562 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
000563 f024      	BRLT _0x20031
                +
000564 302d     +CPI R18 , LOW ( 13 )
000565 e0e0     +LDI R30 , HIGH ( 13 )
000566 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
000567 f00c      	BRLT _0x20032
                 _0x20031:
000568 c007      	RJMP _0x20030
                 _0x20032:
                 ; 0001 00E3 *day += 1;
000569 85af      	LDD  R26,Y+15
00056a 89b8      	LDD  R27,Y+15+1
00056b 91ec      	LD   R30,X
00056c 5fef      	SUBI R30,-LOW(1)
00056d 93ec      	ST   X,R30
                 ; 0001 00E4 *day %= 7;
00056e 940e 0bcf 	CALL SUBOPT_0x3C
                 ; 0001 00E5 }
                 ; 0001 00E6 }
                 _0x20030:
                 _0x2002F:
                 _0x2002B:
                 _0x20027:
                 _0x20022:
                 _0x2001D:
                 _0x20017:
                 ; 0001 00E7 else{
000570 c0c3      	RJMP _0x20033
                 _0x20011:
                 ; 0001 00E8 if(position == 1){
000571 940e 0b88 	CALL SUBOPT_0x32
000573 f4e1      	BRNE _0x20034
                 ; 0001 00E9 if(*date - 10 <= 0){
000574 940e 0b8d 	CALL SUBOPT_0x33
000576 973a      	SBIW R30,10
000577 940e 0cde 	CALL __CPW01
000579 f084      	BRLT _0x20035
                 ; 0001 00EA *date = *date + max_day - 10;
00057a 85ad      	LDD  R26,Y+13
00057b 85be      	LDD  R27,Y+13+1
00057c 91ec      	LD   R30,X
00057d 0fe5      	ADD  R30,R21
00057e 50ea      	SUBI R30,LOW(10)
00057f 940e 0bdb 	CALL SUBOPT_0x3D
                 ; 0001 00EB *month -= 1;
                 ; 0001 00EC if(*month == 0){
000581 f439      	BRNE _0x20036
                 ; 0001 00ED *month = 12;
000582 940e 0be5 	CALL SUBOPT_0x3E
                 ; 0001 00EE if(*year == 0)
000584 f411      	BRNE _0x20037
                 ; 0001 00EF *year = 100;
000585 940e 0bee 	CALL SUBOPT_0x3F
                 ; 0001 00F0 *year -= 1;
                 _0x20037:
000587 940e 0bf3 	CALL SUBOPT_0x40
                 ; 0001 00F1 }
                 ; 0001 00F2 }
                 _0x20036:
                 ; 0001 00F3 else{
000589 c005      	RJMP _0x20038
                 _0x20035:
                 ; 0001 00F4 *date -= 10;
00058a 85ad      	LDD  R26,Y+13
00058b 85be      	LDD  R27,Y+13+1
00058c 91ec      	LD   R30,X
00058d 50ea      	SUBI R30,LOW(10)
00058e 93ec      	ST   X,R30
                 ; 0001 00F5 }
                 _0x20038:
                 ; 0001 00F6 }
                 ; 0001 00F7 else if(position == 2){
00058f c0a4      	RJMP _0x20039
                 _0x20034:
000590 940e 0bb0 	CALL SUBOPT_0x37
000592 f4e1      	BRNE _0x2003A
                 ; 0001 00F8 if(*date - 1 <= 0){
000593 940e 0b8d 	CALL SUBOPT_0x33
000595 9731      	SBIW R30,1
000596 940e 0cde 	CALL __CPW01
000598 f084      	BRLT _0x2003B
                 ; 0001 00F9 *date = *date + max_day - 1;
000599 85ad      	LDD  R26,Y+13
00059a 85be      	LDD  R27,Y+13+1
00059b 91ec      	LD   R30,X
00059c 0fe5      	ADD  R30,R21
00059d 50e1      	SUBI R30,LOW(1)
00059e 940e 0bdb 	CALL SUBOPT_0x3D
                 ; 0001 00FA *month -= 1;
                 ; 0001 00FB if(*month == 0){
0005a0 f439      	BRNE _0x2003C
                 ; 0001 00FC *month = 12;
0005a1 940e 0be5 	CALL SUBOPT_0x3E
                 ; 0001 00FD if(*year == 0)
0005a3 f411      	BRNE _0x2003D
                 ; 0001 00FE *year = 100;
0005a4 940e 0bee 	CALL SUBOPT_0x3F
                 ; 0001 00FF *year -= 1;
                 _0x2003D:
0005a6 940e 0bf3 	CALL SUBOPT_0x40
                 ; 0001 0100 }
                 ; 0001 0101 }
                 _0x2003C:
                 ; 0001 0102 else{
0005a8 c005      	RJMP _0x2003E
                 _0x2003B:
                 ; 0001 0103 *date -= 1;
0005a9 85ad      	LDD  R26,Y+13
0005aa 85be      	LDD  R27,Y+13+1
0005ab 91ec      	LD   R30,X
0005ac 50e1      	SUBI R30,LOW(1)
0005ad 93ec      	ST   X,R30
                 ; 0001 0104 }
                 _0x2003E:
                 ; 0001 0105 }
                 ; 0001 0106 else if(position == 4){
0005ae c085      	RJMP _0x2003F
                 _0x2003A:
0005af e0e4      	LDI  R30,LOW(4)
0005b0 e0f0      	LDI  R31,HIGH(4)
0005b1 17e2      	CP   R30,R18
0005b2 07f3      	CPC  R31,R19
0005b3 f4e9      	BRNE _0x20040
                 ; 0001 0107 if(*month - 10 <= 0){
0005b4 940e 0bb5 	CALL SUBOPT_0x38
0005b6 973a      	SBIW R30,10
0005b7 940e 0cde 	CALL __CPW01
0005b9 f08c      	BRLT _0x20041
                 ; 0001 0108 *month = *month + 12 - 10;
0005ba 85ab      	LDD  R26,Y+11
0005bb 85bc      	LDD  R27,Y+11+1
0005bc 91ec      	LD   R30,X
0005bd 5fee      	SUBI R30,-LOW(2)
0005be 93ec      	ST   X,R30
                 ; 0001 0109 if(*year == 0)
0005bf 85a9      	LDD  R26,Y+9
0005c0 85ba      	LDD  R27,Y+9+1
0005c1 91ec      	LD   R30,X
0005c2 30e0      	CPI  R30,0
0005c3 f411      	BRNE _0x20042
                 ; 0001 010A *year = 100;
0005c4 940e 0bee 	CALL SUBOPT_0x3F
                 ; 0001 010B *year -= 1;
                 _0x20042:
0005c6 85a9      	LDD  R26,Y+9
0005c7 85ba      	LDD  R27,Y+9+1
0005c8 91ec      	LD   R30,X
0005c9 50e1      	SUBI R30,LOW(1)
0005ca c004      	RJMP _0x20095
                 ; 0001 010C }
                 ; 0001 010D else{
                 _0x20041:
                 ; 0001 010E *month -= 10;
0005cb 85ab      	LDD  R26,Y+11
0005cc 85bc      	LDD  R27,Y+11+1
0005cd 91ec      	LD   R30,X
0005ce 50ea      	SUBI R30,LOW(10)
                 _0x20095:
0005cf 93ec      	ST   X,R30
                 ; 0001 010F }
                 ; 0001 0110 }
                 ; 0001 0111 else if(position == 5){
0005d0 c063      	RJMP _0x20044
                 _0x20040:
0005d1 e0e5      	LDI  R30,LOW(5)
0005d2 e0f0      	LDI  R31,HIGH(5)
0005d3 17e2      	CP   R30,R18
0005d4 07f3      	CPC  R31,R19
0005d5 f4e9      	BRNE _0x20045
                 ; 0001 0112 if(*month - 1 <= 0){
0005d6 940e 0bb5 	CALL SUBOPT_0x38
0005d8 9731      	SBIW R30,1
0005d9 940e 0cde 	CALL __CPW01
0005db f08c      	BRLT _0x20046
                 ; 0001 0113 *month = *month + 12 - 1;
0005dc 85ab      	LDD  R26,Y+11
0005dd 85bc      	LDD  R27,Y+11+1
0005de 91ec      	LD   R30,X
0005df 5fe5      	SUBI R30,-LOW(11)
0005e0 93ec      	ST   X,R30
                 ; 0001 0114 *year -= 1;
0005e1 940e 0bf3 	CALL SUBOPT_0x40
                 ; 0001 0115 if(*year == 0)
0005e3 85a9      	LDD  R26,Y+9
0005e4 85ba      	LDD  R27,Y+9+1
0005e5 91ec      	LD   R30,X
0005e6 30e0      	CPI  R30,0
0005e7 f411      	BRNE _0x20047
                 ; 0001 0116 *year = 100;
0005e8 940e 0bee 	CALL SUBOPT_0x3F
                 ; 0001 0117 *year -= 1;
                 _0x20047:
0005ea 85a9      	LDD  R26,Y+9
0005eb 85ba      	LDD  R27,Y+9+1
0005ec c002      	RJMP _0x20096
                 ; 0001 0118 }
                 ; 0001 0119 else{
                 _0x20046:
                 ; 0001 011A *month -= 1;
0005ed 85ab      	LDD  R26,Y+11
0005ee 85bc      	LDD  R27,Y+11+1
                 _0x20096:
0005ef 91ec      	LD   R30,X
0005f0 50e1      	SUBI R30,LOW(1)
0005f1 93ec      	ST   X,R30
                 ; 0001 011B }
                 ; 0001 011C }
                 ; 0001 011D else if(position == 7){
0005f2 c041      	RJMP _0x20049
                 _0x20045:
0005f3 940e 0bc5 	CALL SUBOPT_0x3A
0005f5 f489      	BRNE _0x2004A
                 ; 0001 011E if(*year - 10 <= 0){
0005f6 940e 0bca 	CALL SUBOPT_0x3B
0005f8 973a      	SBIW R30,10
0005f9 940e 0cde 	CALL __CPW01
0005fb f02c      	BRLT _0x2004B
                 ; 0001 011F *year = *year + 100 - 10;
0005fc 85a9      	LDD  R26,Y+9
0005fd 85ba      	LDD  R27,Y+9+1
0005fe 91ec      	LD   R30,X
0005ff 5ae6      	SUBI R30,-LOW(90)
000600 c004      	RJMP _0x20097
                 ; 0001 0120 }
                 ; 0001 0121 else{
                 _0x2004B:
                 ; 0001 0122 *year -= 10;
000601 85a9      	LDD  R26,Y+9
000602 85ba      	LDD  R27,Y+9+1
000603 91ec      	LD   R30,X
000604 50ea      	SUBI R30,LOW(10)
                 _0x20097:
000605 93ec      	ST   X,R30
                 ; 0001 0123 }
                 ; 0001 0124 }
                 ; 0001 0125 else if(position == 8){
000606 c02d      	RJMP _0x2004D
                 _0x2004A:
000607 e0e8      	LDI  R30,LOW(8)
000608 e0f0      	LDI  R31,HIGH(8)
000609 17e2      	CP   R30,R18
00060a 07f3      	CPC  R31,R19
00060b f489      	BRNE _0x2004E
                 ; 0001 0126 if(*year - 1 <= 0){
00060c 940e 0bca 	CALL SUBOPT_0x3B
00060e 9731      	SBIW R30,1
00060f 940e 0cde 	CALL __CPW01
000611 f02c      	BRLT _0x2004F
                 ; 0001 0127 *year = *year + 100 - 1;
000612 85a9      	LDD  R26,Y+9
000613 85ba      	LDD  R27,Y+9+1
000614 91ec      	LD   R30,X
000615 59ed      	SUBI R30,-LOW(99)
000616 c004      	RJMP _0x20098
                 ; 0001 0128 }
                 ; 0001 0129 else{
                 _0x2004F:
                 ; 0001 012A *year -= 1;
000617 85a9      	LDD  R26,Y+9
000618 85ba      	LDD  R27,Y+9+1
000619 91ec      	LD   R30,X
00061a 50e1      	SUBI R30,LOW(1)
                 _0x20098:
00061b 93ec      	ST   X,R30
                 ; 0001 012B }
                 ; 0001 012C }
                 ; 0001 012D else if(position >= 10 && position <= 12){
00061c c017      	RJMP _0x20051
                 _0x2004E:
                +
00061d 302a     +CPI R18 , LOW ( 10 )
00061e e0e0     +LDI R30 , HIGH ( 10 )
00061f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
000620 f024      	BRLT _0x20053
                +
000621 302d     +CPI R18 , LOW ( 13 )
000622 e0e0     +LDI R30 , HIGH ( 13 )
000623 073e     +CPC R19 , R30
                 	__CPWRN 18,19,13
000624 f00c      	BRLT _0x20054
                 _0x20053:
000625 c00e      	RJMP _0x20052
                 _0x20054:
                 ; 0001 012E *day -= 1;
000626 85af      	LDD  R26,Y+15
000627 89b8      	LDD  R27,Y+15+1
000628 91ec      	LD   R30,X
000629 50e1      	SUBI R30,LOW(1)
00062a 93ec      	ST   X,R30
                 ; 0001 012F if(*day<=0)
00062b 91ac      	LD   R26,X
00062c 30a0      	CPI  R26,0
00062d f421      	BRNE _0x20055
                 ; 0001 0130 *day = 7;
00062e 85af      	LDD  R26,Y+15
00062f 89b8      	LDD  R27,Y+15+1
000630 e0e7      	LDI  R30,LOW(7)
000631 93ec      	ST   X,R30
                 ; 0001 0131 *day %= 7;
                 _0x20055:
000632 940e 0bcf 	CALL SUBOPT_0x3C
                 ; 0001 0132 }
                 ; 0001 0133 }
                 _0x20052:
                 _0x20051:
                 _0x2004D:
                 _0x20049:
                 _0x20044:
                 _0x2003F:
                 _0x20039:
                 _0x20033:
                 ; 0001 0134 }
000634 940e 0c73 	CALL __LOADLOCR6
000636 9661      	ADIW R28,17
000637 9508      	RET
                 ; .FEND
                 ;void DS1307_Set_Time(unsigned char *sec, unsigned char *min, unsigned char *hour ...
                 ; 0001 0136 void DS1307_Set_Time(unsigned char *sec, unsigned char *min, unsigned char *hour, int position, int inOrde){
                 _DS1307_Set_Time:
                 ; .FSTART _DS1307_Set_Time
                 ; 0001 0137 if(inOrde == 1){
000638 940e 0c6c 	CALL __SAVELOCR6
00063a 018d      	MOVW R16,R26
                +
00063b 812e     +LDD R18 , Y + 6
00063c 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                +
00063d 8548     +LDD R20 , Y + 8
00063e 8559     +LDD R21 , Y + 8 + 1
                 	__GETWRS 20,21,8
                 ;	*sec -> Y+12
                 ;	*min -> Y+10
                 ;	*hour -> R20,R21
                 ;	position -> R18,R19
                 ;	inOrde -> R16,R17
00063f e0e1      	LDI  R30,LOW(1)
000640 e0f0      	LDI  R31,HIGH(1)
000641 17e0      	CP   R30,R16
000642 07f1      	CPC  R31,R17
000643 f009      	BREQ PC+2
000644 c093      	RJMP _0x20056
                 ; 0001 0138 if(position == 1){
000645 940e 0b88 	CALL SUBOPT_0x32
000647 f491      	BRNE _0x20057
                 ; 0001 0139 if(*hour + 10 >= 24){
000648 01da      	MOVW R26,R20
000649 91ec      	LD   R30,X
00064a e0f0      	LDI  R31,0
00064b 973e      	SBIW R30,14
00064c f044      	BRLT _0x20058
                 ; 0001 013A *hour = (*hour + 10) % 24;
00064d 940e 0bf9 	CALL SUBOPT_0x41
00064f e1e8      	LDI  R30,LOW(24)
000650 e0f0      	LDI  R31,HIGH(24)
000651 940e 0cc2 	CALL __MODW21
000653 01da      	MOVW R26,R20
000654 c003      	RJMP _0x20099
                 ; 0001 013B }
                 ; 0001 013C else{
                 _0x20058:
                 ; 0001 013D *hour += 10;
000655 01da      	MOVW R26,R20
000656 91ec      	LD   R30,X
000657 5fe6      	SUBI R30,-LOW(10)
                 _0x20099:
000658 93ec      	ST   X,R30
                 ; 0001 013E }
                 ; 0001 013F }
                 ; 0001 0140 else if(position == 2){
000659 c07d      	RJMP _0x2005A
                 _0x20057:
00065a 940e 0bb0 	CALL SUBOPT_0x37
00065c f491      	BRNE _0x2005B
                 ; 0001 0141 if(*hour + 1 >= 24){
00065d 01da      	MOVW R26,R20
00065e 91ec      	LD   R30,X
00065f e0f0      	LDI  R31,0
000660 9777      	SBIW R30,23
000661 f044      	BRLT _0x2005C
                 ; 0001 0142 *hour = (*hour + 1) % 24;
000662 940e 0bfe 	CALL SUBOPT_0x42
000664 e1e8      	LDI  R30,LOW(24)
000665 e0f0      	LDI  R31,HIGH(24)
000666 940e 0cc2 	CALL __MODW21
000668 01da      	MOVW R26,R20
000669 c003      	RJMP _0x2009A
                 ; 0001 0143 }
                 ; 0001 0144 else{
                 _0x2005C:
                 ; 0001 0145 *hour += 1;
00066a 01da      	MOVW R26,R20
00066b 91ec      	LD   R30,X
00066c 5fef      	SUBI R30,-LOW(1)
                 _0x2009A:
00066d 93ec      	ST   X,R30
                 ; 0001 0146 }
                 ; 0001 0147 }
                 ; 0001 0148 else if(position == 6){
00066e c068      	RJMP _0x2005E
                 _0x2005B:
00066f e0e6      	LDI  R30,LOW(6)
000670 e0f0      	LDI  R31,HIGH(6)
000671 17e2      	CP   R30,R18
000672 07f3      	CPC  R31,R19
000673 f4a9      	BRNE _0x2005F
                 ; 0001 0149 if(*min + 10 >= 60){
000674 940e 0c03 	CALL SUBOPT_0x43
000676 97f2      	SBIW R30,50
000677 f05c      	BRLT _0x20060
                 ; 0001 014A *min = (*min + 10) % 60;
000678 85aa      	LDD  R26,Y+10
000679 85bb      	LDD  R27,Y+10+1
00067a 940e 0bf9 	CALL SUBOPT_0x41
00067c 940e 0c08 	CALL SUBOPT_0x44
                 ; 0001 014B *hour += 1;
                 ; 0001 014C if(*hour == 24){
00067e f419      	BRNE _0x20061
                 ; 0001 014D *hour = 0;
00067f 01da      	MOVW R26,R20
000680 e0e0      	LDI  R30,LOW(0)
000681 93ec      	ST   X,R30
                 ; 0001 014E }
                 ; 0001 014F }
                 _0x20061:
                 ; 0001 0150 else{
000682 c005      	RJMP _0x20062
                 _0x20060:
                 ; 0001 0151 *min += 10;
000683 85aa      	LDD  R26,Y+10
000684 85bb      	LDD  R27,Y+10+1
000685 91ec      	LD   R30,X
000686 5fe6      	SUBI R30,-LOW(10)
000687 93ec      	ST   X,R30
                 ; 0001 0152 }
                 _0x20062:
                 ; 0001 0153 }
                 ; 0001 0154 else if(position == 7){
000688 c04e      	RJMP _0x20063
                 _0x2005F:
000689 940e 0bc5 	CALL SUBOPT_0x3A
00068b f491      	BRNE _0x20064
                 ; 0001 0155 if(*min + 1 >= 60){
00068c 940e 0c03 	CALL SUBOPT_0x43
00068e 97fb      	SBIW R30,59
00068f f05c      	BRLT _0x20065
                 ; 0001 0156 *min = (*min + 1) % 60;
000690 85aa      	LDD  R26,Y+10
000691 85bb      	LDD  R27,Y+10+1
000692 940e 0bfe 	CALL SUBOPT_0x42
000694 940e 0c08 	CALL SUBOPT_0x44
                 ; 0001 0157 *hour += 1;
                 ; 0001 0158 if(*hour == 24){
000696 f419      	BRNE _0x20066
                 ; 0001 0159 *hour = 0;
000697 01da      	MOVW R26,R20
000698 e0e0      	LDI  R30,LOW(0)
000699 93ec      	ST   X,R30
                 ; 0001 015A }
                 ; 0001 015B }
                 _0x20066:
                 ; 0001 015C else{
00069a c002      	RJMP _0x20067
                 _0x20065:
                 ; 0001 015D *min += 1;
00069b 940e 0c16 	CALL SUBOPT_0x45
                 ; 0001 015E }
                 _0x20067:
                 ; 0001 015F }
                 ; 0001 0160 else if(position == 11){
00069d c039      	RJMP _0x20068
                 _0x20064:
00069e e0eb      	LDI  R30,LOW(11)
00069f e0f0      	LDI  R31,HIGH(11)
0006a0 17e2      	CP   R30,R18
0006a1 07f3      	CPC  R31,R19
0006a2 f4c1      	BRNE _0x20069
                 ; 0001 0161 if(*sec + 10 >= 60){
0006a3 940e 0c1c 	CALL SUBOPT_0x46
0006a5 97f2      	SBIW R30,50
0006a6 f074      	BRLT _0x2006A
                 ; 0001 0162 *sec = (*sec+10) % 60;
0006a7 85ac      	LDD  R26,Y+12
0006a8 85bd      	LDD  R27,Y+12+1
0006a9 940e 0bf9 	CALL SUBOPT_0x41
0006ab 940e 0c21 	CALL SUBOPT_0x47
                 ; 0001 0163 *min += 1;
                 ; 0001 0164 if(*min == 60){
0006ad 85aa      	LDD  R26,Y+10
0006ae 85bb      	LDD  R27,Y+10+1
0006af 91ac      	LD   R26,X
0006b0 33ac      	CPI  R26,LOW(0x3C)
0006b1 f411      	BRNE _0x2006B
                 ; 0001 0165 *min = 0;
0006b2 940e 0c29 	CALL SUBOPT_0x48
                 ; 0001 0166 }
                 ; 0001 0167 }
                 _0x2006B:
                 ; 0001 0168 else{
0006b4 c005      	RJMP _0x2006C
                 _0x2006A:
                 ; 0001 0169 *sec += 10;
0006b5 85ac      	LDD  R26,Y+12
0006b6 85bd      	LDD  R27,Y+12+1
0006b7 91ec      	LD   R30,X
0006b8 5fe6      	SUBI R30,-LOW(10)
0006b9 93ec      	ST   X,R30
                 ; 0001 016A }
                 _0x2006C:
                 ; 0001 016B }
                 ; 0001 016C else if(position == 12){
0006ba c01c      	RJMP _0x2006D
                 _0x20069:
0006bb e0ec      	LDI  R30,LOW(12)
0006bc e0f0      	LDI  R31,HIGH(12)
0006bd 17e2      	CP   R30,R18
0006be 07f3      	CPC  R31,R19
0006bf f4b9      	BRNE _0x2006E
                 ; 0001 016D if(*sec + 1 >= 60){
0006c0 940e 0c1c 	CALL SUBOPT_0x46
0006c2 97fb      	SBIW R30,59
0006c3 f074      	BRLT _0x2006F
                 ; 0001 016E *sec = (*sec+1) % 60;
0006c4 85ac      	LDD  R26,Y+12
0006c5 85bd      	LDD  R27,Y+12+1
0006c6 940e 0bfe 	CALL SUBOPT_0x42
0006c8 940e 0c21 	CALL SUBOPT_0x47
                 ; 0001 016F *min += 1;
                 ; 0001 0170 if(*min == 60){
0006ca 85aa      	LDD  R26,Y+10
0006cb 85bb      	LDD  R27,Y+10+1
0006cc 91ac      	LD   R26,X
0006cd 33ac      	CPI  R26,LOW(0x3C)
0006ce f411      	BRNE _0x20070
                 ; 0001 0171 *min = 0;
0006cf 940e 0c29 	CALL SUBOPT_0x48
                 ; 0001 0172 }
                 ; 0001 0173 }
                 _0x20070:
                 ; 0001 0174 else{
0006d1 c005      	RJMP _0x20071
                 _0x2006F:
                 ; 0001 0175 *sec += 1;
0006d2 85ac      	LDD  R26,Y+12
0006d3 85bd      	LDD  R27,Y+12+1
0006d4 91ec      	LD   R30,X
0006d5 5fef      	SUBI R30,-LOW(1)
0006d6 93ec      	ST   X,R30
                 ; 0001 0176 }
                 _0x20071:
                 ; 0001 0177 }
                 ; 0001 0178 }
                 _0x2006E:
                 _0x2006D:
                 _0x20068:
                 _0x20063:
                 _0x2005E:
                 _0x2005A:
                 ; 0001 0179 else{
0006d7 c099      	RJMP _0x20072
                 _0x20056:
                 ; 0001 017A if(position == 1){
0006d8 940e 0b88 	CALL SUBOPT_0x32
0006da f479      	BRNE _0x20073
                 ; 0001 017B if(*hour - 10 > 0){
0006db 01da      	MOVW R26,R20
0006dc 91ec      	LD   R30,X
0006dd e0f0      	LDI  R31,0
0006de 973a      	SBIW R30,10
0006df 940e 0cde 	CALL __CPW01
0006e1 f41c      	BRGE _0x20074
                 ; 0001 017C *hour -= 10;
0006e2 91ec      	LD   R30,X
0006e3 50ea      	SUBI R30,LOW(10)
0006e4 c003      	RJMP _0x2009B
                 ; 0001 017D }
                 ; 0001 017E else{
                 _0x20074:
                 ; 0001 017F *hour = *hour + 24 - 10;
0006e5 01da      	MOVW R26,R20
0006e6 91ec      	LD   R30,X
0006e7 5fe2      	SUBI R30,-LOW(14)
                 _0x2009B:
0006e8 93ec      	ST   X,R30
                 ; 0001 0180 }
                 ; 0001 0181 }
                 ; 0001 0182 else if(position == 2){
0006e9 c087      	RJMP _0x20076
                 _0x20073:
0006ea 940e 0bb0 	CALL SUBOPT_0x37
0006ec f471      	BRNE _0x20077
                 ; 0001 0183 if(*hour - 1 > 0){
0006ed 01da      	MOVW R26,R20
0006ee 91ec      	LD   R30,X
0006ef e0f0      	LDI  R31,0
0006f0 9731      	SBIW R30,1
0006f1 940e 0cde 	CALL __CPW01
0006f3 f41c      	BRGE _0x20078
                 ; 0001 0184 *hour -= 1;
0006f4 91ec      	LD   R30,X
0006f5 50e1      	SUBI R30,LOW(1)
0006f6 c002      	RJMP _0x2009C
                 ; 0001 0185 }
                 ; 0001 0186 else{
                 _0x20078:
                 ; 0001 0187 *hour = *hour + 24 - 1;
0006f7 940e 0c2e 	CALL SUBOPT_0x49
                 _0x2009C:
0006f9 93ec      	ST   X,R30
                 ; 0001 0188 }
                 ; 0001 0189 }
                 ; 0001 018A else if(position == 6){
0006fa c076      	RJMP _0x2007A
                 _0x20077:
0006fb e0e6      	LDI  R30,LOW(6)
0006fc e0f0      	LDI  R31,HIGH(6)
0006fd 17e2      	CP   R30,R18
0006fe 07f3      	CPC  R31,R19
0006ff f4b1      	BRNE _0x2007B
                 ; 0001 018B if(*min - 10 < 0){
000700 940e 0c03 	CALL SUBOPT_0x43
000702 973a      	SBIW R30,10
000703 23ff      	TST  R31
000704 f45a      	BRPL _0x2007C
                 ; 0001 018C *min = (*min + 60) - 10;
000705 85aa      	LDD  R26,Y+10
000706 85bb      	LDD  R27,Y+10+1
000707 91ec      	LD   R30,X
000708 5cee      	SUBI R30,-LOW(50)
000709 940e 0c32 	CALL SUBOPT_0x4A
                 ; 0001 018D *hour -= 1;
                 ; 0001 018E if(*hour == 255){
00070b f419      	BRNE _0x2007D
                 ; 0001 018F *hour = 0;
00070c 940e 0c3c 	CALL SUBOPT_0x4B
                 ; 0001 0190 *hour = *hour + 24 - 1;
00070e 93ec      	ST   X,R30
                 ; 0001 0191 }
                 ; 0001 0192 }
                 _0x2007D:
                 ; 0001 0193 else{
00070f c005      	RJMP _0x2007E
                 _0x2007C:
                 ; 0001 0194 *min -= 10;
000710 85aa      	LDD  R26,Y+10
000711 85bb      	LDD  R27,Y+10+1
000712 91ec      	LD   R30,X
000713 50ea      	SUBI R30,LOW(10)
000714 93ec      	ST   X,R30
                 ; 0001 0195 }
                 _0x2007E:
                 ; 0001 0196 }
                 ; 0001 0197 else if(position == 7){
000715 c05b      	RJMP _0x2007F
                 _0x2007B:
000716 940e 0bc5 	CALL SUBOPT_0x3A
000718 f479      	BRNE _0x20080
                 ; 0001 0198 if(*min - 1 < 0){
000719 940e 0c03 	CALL SUBOPT_0x43
00071b 9731      	SBIW R30,1
00071c 23ff      	TST  R31
00071d f43a      	BRPL _0x20081
                 ; 0001 0199 *min = (*min + 60) - 1;
00071e 940e 0c40 	CALL SUBOPT_0x4C
                 ; 0001 019A *hour -= 1;
                 ; 0001 019B if(*hour == 255){
000720 f419      	BRNE _0x20082
                 ; 0001 019C *hour = 0;
000721 940e 0c3c 	CALL SUBOPT_0x4B
                 ; 0001 019D *hour = *hour + 24 - 1;
000723 93ec      	ST   X,R30
                 ; 0001 019E }
                 ; 0001 019F }
                 _0x20082:
                 ; 0001 01A0 else{
000724 c002      	RJMP _0x20083
                 _0x20081:
                 ; 0001 01A1 *min -= 1;
000725 940e 0c45 	CALL SUBOPT_0x4D
                 ; 0001 01A2 }
                 _0x20083:
                 ; 0001 01A3 }
                 ; 0001 01A4 else if(position == 11){
000727 c049      	RJMP _0x20084
                 _0x20080:
000728 e0eb      	LDI  R30,LOW(11)
000729 e0f0      	LDI  R31,HIGH(11)
00072a 17e2      	CP   R30,R18
00072b 07f3      	CPC  R31,R19
00072c f501      	BRNE _0x20085
                 ; 0001 01A5 if(*sec - 10 < 0){
00072d 940e 0c1c 	CALL SUBOPT_0x46
00072f 973a      	SBIW R30,10
000730 23ff      	TST  R31
000731 f4aa      	BRPL _0x20086
                 ; 0001 01A6 *sec = (*sec+60) - 10;
000732 85ac      	LDD  R26,Y+12
000733 85bd      	LDD  R27,Y+12+1
000734 91ec      	LD   R30,X
000735 5cee      	SUBI R30,-LOW(50)
000736 93ec      	ST   X,R30
                 ; 0001 01A7 *min -= 1;
000737 940e 0c45 	CALL SUBOPT_0x4D
                 ; 0001 01A8 if(*min == 255){
000739 85aa      	LDD  R26,Y+10
00073a 85bb      	LDD  R27,Y+10+1
00073b 91ac      	LD   R26,X
00073c 3faf      	CPI  R26,LOW(0xFF)
00073d f441      	BRNE _0x20087
                 ; 0001 01A9 *min = 0;
00073e 940e 0c29 	CALL SUBOPT_0x48
                 ; 0001 01AA *min = 60 + *min - 1;
000740 940e 0c40 	CALL SUBOPT_0x4C
                 ; 0001 01AB *hour -= 1;
                 ; 0001 01AC if(*hour == 255){
000742 f419      	BRNE _0x20088
                 ; 0001 01AD *hour = 0;
000743 940e 0c3c 	CALL SUBOPT_0x4B
                 ; 0001 01AE *hour = *hour + 24 - 1;
000745 93ec      	ST   X,R30
                 ; 0001 01AF }
                 ; 0001 01B0 }
                 _0x20088:
                 ; 0001 01B1 }
                 _0x20087:
                 ; 0001 01B2 else{
000746 c005      	RJMP _0x20089
                 _0x20086:
                 ; 0001 01B3 *sec -= 10;
000747 85ac      	LDD  R26,Y+12
000748 85bd      	LDD  R27,Y+12+1
000749 91ec      	LD   R30,X
00074a 50ea      	SUBI R30,LOW(10)
00074b 93ec      	ST   X,R30
                 ; 0001 01B4 }
                 _0x20089:
                 ; 0001 01B5 }
                 ; 0001 01B6 else if(position == 12){
00074c c024      	RJMP _0x2008A
                 _0x20085:
00074d e0ec      	LDI  R30,LOW(12)
00074e e0f0      	LDI  R31,HIGH(12)
00074f 17e2      	CP   R30,R18
000750 07f3      	CPC  R31,R19
000751 f4f9      	BRNE _0x2008B
                 ; 0001 01B7 if(*sec - 1 < 0){
000752 940e 0c1c 	CALL SUBOPT_0x46
000754 9731      	SBIW R30,1
000755 23ff      	TST  R31
000756 f4aa      	BRPL _0x2008C
                 ; 0001 01B8 *sec = (*sec+60) - 1;
000757 85ac      	LDD  R26,Y+12
000758 85bd      	LDD  R27,Y+12+1
000759 91ec      	LD   R30,X
00075a 5ce5      	SUBI R30,-LOW(59)
00075b 93ec      	ST   X,R30
                 ; 0001 01B9 *min -= 1;
00075c 940e 0c45 	CALL SUBOPT_0x4D
                 ; 0001 01BA if(*min == 255){
00075e 85aa      	LDD  R26,Y+10
00075f 85bb      	LDD  R27,Y+10+1
000760 91ac      	LD   R26,X
000761 3faf      	CPI  R26,LOW(0xFF)
000762 f441      	BRNE _0x2008D
                 ; 0001 01BB *min = 0;
000763 940e 0c29 	CALL SUBOPT_0x48
                 ; 0001 01BC *min = 60 + *min - 1;
000765 940e 0c40 	CALL SUBOPT_0x4C
                 ; 0001 01BD *hour -= 1;
                 ; 0001 01BE if(*hour == 255){
000767 f419      	BRNE _0x2008E
                 ; 0001 01BF *hour = 0;
000768 940e 0c3c 	CALL SUBOPT_0x4B
                 ; 0001 01C0 *hour = *hour + 24 - 1;
00076a 93ec      	ST   X,R30
                 ; 0001 01C1 }
                 ; 0001 01C2 }
                 _0x2008E:
                 ; 0001 01C3 }
                 _0x2008D:
                 ; 0001 01C4 else{
00076b c005      	RJMP _0x2008F
                 _0x2008C:
                 ; 0001 01C5 *sec -= 1;
00076c 85ac      	LDD  R26,Y+12
00076d 85bd      	LDD  R27,Y+12+1
00076e 91ec      	LD   R30,X
00076f 50e1      	SUBI R30,LOW(1)
000770 93ec      	ST   X,R30
                 ; 0001 01C6 }
                 _0x2008F:
                 ; 0001 01C7 }
                 ; 0001 01C8 }
                 _0x2008B:
                 _0x2008A:
                 _0x20084:
                 _0x2007F:
                 _0x2007A:
                 _0x20076:
                 _0x20072:
                 ; 0001 01C9 }
000771 940e 0c73 	CALL __LOADLOCR6
000773 962e      	ADIW R28,14
000774 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void Lcd_Write_High_Nibble(unsigned char);
                 ;void Lcd_Write_Low_Nibble(unsigned char );
                 ;void Lcd_Delay_us(unsigned char);
                 ;void Lcd_Write_High_Nibble(unsigned char b)
                 ; 0002 000F {
                 
                 	.CSEG
                 _Lcd_Write_High_Nibble:
                 ; .FSTART _Lcd_Write_High_Nibble
                 ; 0002 0010 LCD_D7 = b & 0x80;
000775 931a      	ST   -Y,R17
000776 2f1a      	MOV  R17,R26
                 ;	b -> R17
000777 fd17      	SBRC R17,7
000778 c002      	RJMP _0x40003
000779 9840      	CBI  0x8,0
00077a c001      	RJMP _0x40004
                 _0x40003:
00077b 9a40      	SBI  0x8,0
                 _0x40004:
                 ; 0002 0011 LCD_D6 = b & 0x40;
00077c fd16      	SBRC R17,6
00077d c002      	RJMP _0x40005
00077e 982d      	CBI  0x5,5
00077f c001      	RJMP _0x40006
                 _0x40005:
000780 9a2d      	SBI  0x5,5
                 _0x40006:
                 ; 0002 0012 LCD_D5 = b & 0x20;
000781 fd15      	SBRC R17,5
000782 c002      	RJMP _0x40007
000783 982c      	CBI  0x5,4
000784 c001      	RJMP _0x40008
                 _0x40007:
000785 9a2c      	SBI  0x5,4
                 _0x40008:
                 ; 0002 0013 LCD_D4 = b & 0x10;
000786 fd14      	SBRC R17,4
000787 c002      	RJMP _0x40009
000788 982b      	CBI  0x5,3
000789 c001      	RJMP _0x4000A
                 _0x40009:
00078a 9a2b      	SBI  0x5,3
                 _0x4000A:
                 ; 0002 0014 }
00078b c05c      	RJMP _0x2000007
                 ; .FEND
                 ;void Lcd_Write_Low_Nibble(unsigned char b)
                 ; 0002 001A {
                 _Lcd_Write_Low_Nibble:
                 ; .FSTART _Lcd_Write_Low_Nibble
                 ; 0002 001B LCD_D7 = b & 0x08;
00078c 931a      	ST   -Y,R17
00078d 2f1a      	MOV  R17,R26
                 ;	b -> R17
00078e fd13      	SBRC R17,3
00078f c002      	RJMP _0x4000B
000790 9840      	CBI  0x8,0
000791 c001      	RJMP _0x4000C
                 _0x4000B:
000792 9a40      	SBI  0x8,0
                 _0x4000C:
                 ; 0002 001C LCD_D6 = b & 0x04;
000793 fd12      	SBRC R17,2
000794 c002      	RJMP _0x4000D
000795 982d      	CBI  0x5,5
000796 c001      	RJMP _0x4000E
                 _0x4000D:
000797 9a2d      	SBI  0x5,5
                 _0x4000E:
                 ; 0002 001D LCD_D5 = b & 0x02;
000798 fd11      	SBRC R17,1
000799 c002      	RJMP _0x4000F
00079a 982c      	CBI  0x5,4
00079b c001      	RJMP _0x40010
                 _0x4000F:
00079c 9a2c      	SBI  0x5,4
                 _0x40010:
                 ; 0002 001E LCD_D4 = b & 0x01;
00079d fd10      	SBRC R17,0
00079e c002      	RJMP _0x40011
00079f 982b      	CBI  0x5,3
0007a0 c001      	RJMP _0x40012
                 _0x40011:
0007a1 9a2b      	SBI  0x5,3
                 _0x40012:
                 ; 0002 001F }
0007a2 c045      	RJMP _0x2000007
                 ; .FEND
                 ;void Lcd_Delay_us(unsigned char t)
                 ; 0002 0025 {
                 ; 0002 0026 while(t--);
                 ;	t -> R17
                 ; 0002 0027 }
                 ;void Lcd_Init()
                 ; 0002 002E {
                 _Lcd_Init:
                 ; .FSTART _Lcd_Init
                 ; 0002 002F LCD_RS = 0;
0007a3 9828      	CBI  0x5,0
                 ; 0002 0030 LCD_EN = 0;
0007a4 982a      	CBI  0x5,2
                 ; 0002 0031 LCD_RW = 0;
0007a5 9829      	CBI  0x5,1
                 ; 0002 0032 
                 ; 0002 0033 delay_ms(20);
0007a6 940e 09f4 	CALL SUBOPT_0x14
                 ; 0002 0034 
                 ; 0002 0035 Lcd_Write_Low_Nibble(0x03);
0007a8 940e 0c4b 	CALL SUBOPT_0x4E
                 ; 0002 0036 LCD_EN = 1;
                 ; 0002 0037 LCD_EN = 0;
                 ; 0002 0038 delay_ms(5);
0007aa e0a5      	LDI  R26,LOW(5)
0007ab e0b0      	LDI  R27,0
0007ac 940e 0e5c 	CALL _delay_ms
                 ; 0002 0039 
                 ; 0002 003A Lcd_Write_Low_Nibble(0x03);
0007ae 940e 0c4b 	CALL SUBOPT_0x4E
                 ; 0002 003B LCD_EN = 1;
                 ; 0002 003C LCD_EN = 0;
                 ; 0002 003D delay_us(100);
                +
0007b0 e980     +LDI R24 , LOW ( 400 )
0007b1 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0007b2 9701     +SBIW R24 , 1
0007b3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
                 ; 0002 003E 
                 ; 0002 003F Lcd_Write_Low_Nibble(0x03);
0007b4 940e 0c4b 	CALL SUBOPT_0x4E
                 ; 0002 0040 LCD_EN = 1;
                 ; 0002 0041 LCD_EN = 0;
                 ; 0002 0042 
                 ; 0002 0043 delay_ms(1);
0007b6 940e 08ec 	CALL SUBOPT_0x3
                 ; 0002 0044 
                 ; 0002 0045 
                 ; 0002 0046 Lcd_Write_Low_Nibble(0x02);
0007b8 e0a2      	LDI  R26,LOW(2)
0007b9 940e 0c51 	CALL SUBOPT_0x4F
                 ; 0002 0047 LCD_EN = 1;
                 ; 0002 0048 LCD_EN = 0;
                 ; 0002 0049 delay_ms(1);
0007bb 940e 08ec 	CALL SUBOPT_0x3
                 ; 0002 004A 
                 ; 0002 004B Lcd_Cmd(_LCD_4BIT_2LINE_5x7FONT);
0007bd e2a8      	LDI  R26,LOW(40)
0007be d007      	RCALL _Lcd_Cmd
                 ; 0002 004C Lcd_Cmd(_LCD_TURN_ON);
0007bf e0ac      	LDI  R26,LOW(12)
0007c0 d005      	RCALL _Lcd_Cmd
                 ; 0002 004D Lcd_Cmd(_LCD_CLEAR);
0007c1 e0a1      	LDI  R26,LOW(1)
0007c2 d003      	RCALL _Lcd_Cmd
                 ; 0002 004E Lcd_Cmd(_LCD_ENTRY_MODE);
0007c3 e0a6      	LDI  R26,LOW(6)
0007c4 d001      	RCALL _Lcd_Cmd
                 ; 0002 004F }
0007c5 9508      	RET
                 ; .FEND
                 ;void Lcd_Cmd(unsigned char cmd)
                 ; 0002 0056 {
                 _Lcd_Cmd:
                 ; .FSTART _Lcd_Cmd
                 ; 0002 0057 LCD_RW = 0;
0007c6 931a      	ST   -Y,R17
0007c7 2f1a      	MOV  R17,R26
                 ;	cmd -> R17
0007c8 9829      	CBI  0x5,1
                 ; 0002 0058 LCD_RS = 0;
0007c9 9828      	CBI  0x5,0
                 ; 0002 0059 Lcd_Write_High_Nibble(cmd);
0007ca 940e 0c56 	CALL SUBOPT_0x50
                 ; 0002 005A LCD_EN = 1;
                 ; 0002 005B LCD_EN = 0;
                 ; 0002 005C 
                 ; 0002 005D Lcd_Write_Low_Nibble(cmd);
                 ; 0002 005E LCD_EN = 1;
                 ; 0002 005F LCD_EN = 0;
                 ; 0002 0060 
                 ; 0002 0061 switch(cmd)
0007cc 2fe1      	MOV  R30,R17
0007cd e0f0      	LDI  R31,0
                 ; 0002 0062 {
                 ; 0002 0063 case _LCD_CLEAR:
0007ce 30e1      	CPI  R30,LOW(0x1)
0007cf e0a0      	LDI  R26,HIGH(0x1)
0007d0 07fa      	CPC  R31,R26
0007d1 f021      	BREQ _0x4003C
                 ; 0002 0064 case _LCD_RETURN_HOME:
0007d2 30e2      	CPI  R30,LOW(0x2)
0007d3 e0a0      	LDI  R26,HIGH(0x2)
0007d4 07fa      	CPC  R31,R26
0007d5 f429      	BRNE _0x4003E
                 _0x4003C:
                 ; 0002 0065 delay_ms(2);
0007d6 e0a2      	LDI  R26,LOW(2)
0007d7 e0b0      	LDI  R27,0
0007d8 940e 0e5c 	CALL _delay_ms
                 ; 0002 0066 break;
0007da c003      	RJMP _0x4003A
                 ; 0002 0067 default:
                 _0x4003E:
                 ; 0002 0068 delay_us(37);
                +
0007db ec85     +LDI R24 , LOW ( 197 )
                +__DELAY_USB_LOOP :
0007dc 958a     +DEC R24
0007dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 197
                 ; 0002 0069 break;
                 ; 0002 006A }
                 _0x4003A:
                 ; 0002 006B }
0007de c009      	RJMP _0x2000007
                 ; .FEND
                 ;void Lcd_Chr_Cp(unsigned char achar)
                 ; 0002 0071 {
                 _Lcd_Chr_Cp:
                 ; .FSTART _Lcd_Chr_Cp
                 ; 0002 0072 LCD_RW = 0;
0007df 931a      	ST   -Y,R17
0007e0 2f1a      	MOV  R17,R26
                 ;	achar -> R17
0007e1 9829      	CBI  0x5,1
                 ; 0002 0073 LCD_RS = 1;
0007e2 9a28      	SBI  0x5,0
                 ; 0002 0074 Lcd_Write_High_Nibble(achar);
0007e3 940e 0c56 	CALL SUBOPT_0x50
                 ; 0002 0075 LCD_EN = 1;
                 ; 0002 0076 LCD_EN = 0;
                 ; 0002 0077 
                 ; 0002 0078 Lcd_Write_Low_Nibble(achar);
                 ; 0002 0079 LCD_EN = 1;
                 ; 0002 007A LCD_EN = 0;
                 ; 0002 007B 
                 ; 0002 007C delay_us(37+4);
                +
0007e5 ed8b     +LDI R24 , LOW ( 219 )
                +__DELAY_USB_LOOP :
0007e6 958a     +DEC R24
0007e7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 219
                 ; 0002 007D 
                 ; 0002 007E }
                 _0x2000007:
0007e8 9119      	LD   R17,Y+
0007e9 9508      	RET
                 ; .FEND
                 ;void Lcd_Chr(unsigned char row, unsigned char column, unsigned char achar)
                 ; 0002 0085 {
                 _Lcd_Chr:
                 ; .FSTART _Lcd_Chr
                 ; 0002 0086 unsigned char add;
                 ; 0002 0087 add = (row==1?0x80:0xC0);
0007ea 940e 0c6e 	CALL __SAVELOCR4
0007ec 2f0a      	MOV  R16,R26
0007ed 813c      	LDD  R19,Y+4
0007ee 812d      	LDD  R18,Y+5
                 ;	row -> R18
                 ;	column -> R19
                 ;	achar -> R16
                 ;	add -> R17
0007ef 3021      	CPI  R18,1
0007f0 f411      	BRNE _0x4004B
0007f1 e8e0      	LDI  R30,LOW(128)
0007f2 c001      	RJMP _0x4004C
                 _0x4004B:
0007f3 ece0      	LDI  R30,LOW(192)
                 _0x4004C:
0007f4 2f1e      	MOV  R17,R30
                 ; 0002 0088 add += (column - 1);
0007f5 2fe3      	MOV  R30,R19
0007f6 50e1      	SUBI R30,LOW(1)
0007f7 0f1e      	ADD  R17,R30
                 ; 0002 0089 Lcd_Cmd(add);
0007f8 2fa1      	MOV  R26,R17
0007f9 dfcc      	RCALL _Lcd_Cmd
                 ; 0002 008A Lcd_Chr_Cp(achar);
0007fa 2fa0      	MOV  R26,R16
0007fb dfe3      	RCALL _Lcd_Chr_Cp
                 ; 0002 008B }
0007fc 940e 0c75 	CALL __LOADLOCR4
                 _0x2000006:
0007fe 9626      	ADIW R28,6
0007ff 9508      	RET
                 ; .FEND
                 ;void Lcd_Out_Cp(unsigned char * str)
                 ; 0002 008E {
                 _Lcd_Out_Cp:
                 ; .FSTART _Lcd_Out_Cp
                 ; 0002 008F unsigned char i = 0;
                 ; 0002 0090 while(str[i])
000800 940e 0c6e 	CALL __SAVELOCR4
000802 019d      	MOVW R18,R26
                 ;	*str -> R18,R19
                 ;	i -> R17
000803 e010      	LDI  R17,0
                 _0x4004E:
000804 01d9      	MOVW R26,R18
000805 27ee      	CLR  R30
000806 0fa1      	ADD  R26,R17
000807 1fbe      	ADC  R27,R30
000808 91ec      	LD   R30,X
000809 30e0      	CPI  R30,0
00080a f041      	BREQ _0x40050
                 ; 0002 0091 {
                 ; 0002 0092 Lcd_Chr_Cp(str[i]);
00080b 01d9      	MOVW R26,R18
00080c 27ee      	CLR  R30
00080d 0fa1      	ADD  R26,R17
00080e 1fbe      	ADC  R27,R30
00080f 91ac      	LD   R26,X
000810 dfce      	RCALL _Lcd_Chr_Cp
                 ; 0002 0093 i++;
000811 5f1f      	SUBI R17,-1
                 ; 0002 0094 }
000812 cff1      	RJMP _0x4004E
                 _0x40050:
                 ; 0002 0095 }
000813 940c 08b0 	JMP  _0x2000002
                 ; .FEND
                 ;void Lcd_Out(unsigned char row, unsigned char column,
                 ; 0002 009D unsigned char* str)
                 ; 0002 009E {
                 ; 0002 009F unsigned char add;
                 ; 0002 00A0 add = (row==1?0x80:0xC0);
                 ;	row -> R21
                 ;	column -> R16
                 ;	*str -> R18,R19
                 ;	add -> R17
                 ; 0002 00A1 add += (column - 1);
                 ; 0002 00A2 Lcd_Cmd(add);
                 ; 0002 00A3 Lcd_Out_Cp(str);
                 ; 0002 00A4 }
                 ;void Lcd_Custom_Chr(unsigned char location, unsigned char * lcd_char)
                 ; 0002 00B5 {
                 ; 0002 00B6 unsigned char i;
                 ; 0002 00B7 Lcd_Cmd(0x40+location*8);
                 ;	location -> R16
                 ;	*lcd_char -> R18,R19
                 ;	i -> R17
                 ; 0002 00B8 for (i = 0; i<=7; i++)
                 ; 0002 00B9 Lcd_Chr_Cp(lcd_char[i]);
                 ; 0002 00BA }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;unsigned int SHT20_Read_RH(void){ // Mode no hold master
                 ; 0003 0003 unsigned int SHT20_Read_RH(void){
                 
                 	.CSEG
                 _SHT20_Read_RH:
                 ; .FSTART _SHT20_Read_RH
                 ; 0003 0004 unsigned int do_am = 0;
                 ; 0003 0005 unsigned int do_am1 = 0;
                 ; 0003 0006 I2C_Start();
000815 940e 0c5d 	CALL SUBOPT_0x51
                 ;	do_am -> R16,R17
                 ;	do_am1 -> R18,R19
                 ; 0003 0007 I2C_Send_Byte(0x80);
                 ; 0003 0008 if(I2C_Wait_Ack() == 0){
000817 30e0      	CPI  R30,0
000818 f4c1      	BRNE _0x60003
                 ; 0003 0009 I2C_Send_Byte(0xF5); // gui lenh doc do am (xem trong datasheet)
000819 efa5      	LDI  R26,LOW(245)
00081a d325      	RCALL SUBOPT_0x28
                 ; 0003 000A if(I2C_Wait_Ack() == 0){
00081b 30e0      	CPI  R30,0
00081c f4a1      	BRNE _0x60004
                 ; 0003 000B delay_us(20);
                +
00081d e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00081e 958a     +DEC R24
00081f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0003 000C I2C_Stop();
000820 d03d      	RCALL _I2C_Stop
                 ; 0003 000D 
                 ; 0003 000E // Cho cho den khi do xong (loi mo phong phai them delay 30 ms (xem datasheet))
                 ; 0003 000F delay_ms(29);
000821 e1ad      	LDI  R26,LOW(29)
000822 e0b0      	LDI  R27,0
000823 940e 0e5c 	CALL _delay_ms
                 ; 0003 0010 while(1){
                 _0x60005:
                 ; 0003 0011 I2C_Start();
000825 d032      	RCALL _I2C_Start
                 ; 0003 0012 I2C_Send_Byte(0x81);
000826 e8a1      	LDI  R26,LOW(129)
000827 d318      	RCALL SUBOPT_0x28
                 ; 0003 0013 if(I2C_Wait_Ack() == 0){
000828 30e0      	CPI  R30,0
000829 f011      	BREQ _0x60007
                 ; 0003 0014 
                 ; 0003 0015 break;
                 ; 0003 0016 }
                 ; 0003 0017 I2C_Stop();
00082a d033      	RCALL _I2C_Stop
                 ; 0003 0018 
                 ; 0003 0019 }
00082b cff9      	RJMP _0x60005
                 _0x60007:
                 ; 0003 001A 
                 ; 0003 001B 
                 ; 0003 001C do_am = I2C_Read_Byte(0);
00082c 940e 0c65 	CALL SUBOPT_0x52
                 ; 0003 001D do_am <<= 8;
                 ; 0003 001E do_am1 = I2C_Read_Byte(1);
00082e 2733      	CLR  R19
                 ; 0003 001F do_am |= do_am1;
                +
00082f 2b02     +OR R16 , R18
000830 2b13     +OR R17 , R19
                 	__ORWRR 16,17,18,19
                 ; 0003 0020 
                 ; 0003 0021 
                 ; 0003 0022 //            I2C_Read_Byte(1);
                 ; 0003 0023 //            I2C_Wait_Ack();
                 ; 0003 0024 
                 ; 0003 0025 }
                 ; 0003 0026 }
                 _0x60004:
                 ; 0003 0027 I2C_Stop();
                 _0x60003:
000831 d02c      	RCALL _I2C_Stop
                 ; 0003 0028 return do_am;
000832 01f8      	MOVW R30,R16
000833 c07c      	RJMP _0x2000002
                 ; 0003 0029 }
                 ; .FEND
                 ;unsigned int SHT20_Read_T(void){ // Mode no hold master
                 ; 0003 002B unsigned int SHT20_Read_T(void){
                 _SHT20_Read_T:
                 ; .FSTART _SHT20_Read_T
                 ; 0003 002C unsigned int nhiet_do = 0;
                 ; 0003 002D unsigned int nhiet_do1 = 0;
                 ; 0003 002E I2C_Start();
000834 940e 0c5d 	CALL SUBOPT_0x51
                 ;	nhiet_do -> R16,R17
                 ;	nhiet_do1 -> R18,R19
                 ; 0003 002F I2C_Send_Byte(0x80);
                 ; 0003 0030 if(I2C_Wait_Ack() == 0){
000836 30e0      	CPI  R30,0
000837 f4c1      	BRNE _0x60009
                 ; 0003 0031 I2C_Send_Byte(0xF3); // gui lenh doc nhiet do (xem trong datasheet)
000838 efa3      	LDI  R26,LOW(243)
000839 d306      	RCALL SUBOPT_0x28
                 ; 0003 0032 if(I2C_Wait_Ack() == 0){
00083a 30e0      	CPI  R30,0
00083b f4a1      	BRNE _0x6000A
                 ; 0003 0033 delay_us(20);
                +
00083c e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
00083d 958a     +DEC R24
00083e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0003 0034 I2C_Stop();
00083f d01e      	RCALL _I2C_Stop
                 ; 0003 0035 
                 ; 0003 0036 // Cho cho den khi do xong (loi mo phong phai them delay 85 ms (xem datasheet))
                 ; 0003 0037 delay_ms(85);
000840 e5a5      	LDI  R26,LOW(85)
000841 e0b0      	LDI  R27,0
000842 940e 0e5c 	CALL _delay_ms
                 ; 0003 0038 while(1){
                 _0x6000B:
                 ; 0003 0039 I2C_Start();
000844 d013      	RCALL _I2C_Start
                 ; 0003 003A I2C_Send_Byte(0x81);
000845 e8a1      	LDI  R26,LOW(129)
000846 d2f9      	RCALL SUBOPT_0x28
                 ; 0003 003B if(I2C_Wait_Ack() == 0){
000847 30e0      	CPI  R30,0
000848 f011      	BREQ _0x6000D
                 ; 0003 003C 
                 ; 0003 003D break;
                 ; 0003 003E }
                 ; 0003 003F I2C_Stop();
000849 d014      	RCALL _I2C_Stop
                 ; 0003 0040 
                 ; 0003 0041 }
00084a cff9      	RJMP _0x6000B
                 _0x6000D:
                 ; 0003 0042 
                 ; 0003 0043 
                 ; 0003 0044 nhiet_do = I2C_Read_Byte(0);
00084b 940e 0c65 	CALL SUBOPT_0x52
                 ; 0003 0045 nhiet_do <<= 8;
                 ; 0003 0046 nhiet_do1 = I2C_Read_Byte(1);
00084d 2733      	CLR  R19
                 ; 0003 0047 nhiet_do |= nhiet_do1;
                +
00084e 2b02     +OR R16 , R18
00084f 2b13     +OR R17 , R19
                 	__ORWRR 16,17,18,19
                 ; 0003 0048 
                 ; 0003 0049 //            I2C_Read_Byte(1);
                 ; 0003 004A //            I2C_Wait_Ack();
                 ; 0003 004B 
                 ; 0003 004C }
                 ; 0003 004D }
                 _0x6000A:
                 ; 0003 004E I2C_Stop();
                 _0x60009:
000850 d00d      	RCALL _I2C_Stop
                 ; 0003 004F return nhiet_do;
000851 01f8      	MOVW R30,R16
000852 c05d      	RJMP _0x2000002
                 ; 0003 0050 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void I2C_Init(void){
                 ; 0004 0003 void I2C_Init(void){
                 
                 	.CSEG
                 _I2C_Init:
                 ; .FSTART _I2C_Init
                 ; 0004 0004 // PORT C config
                 ; 0004 0005 DDRC |= (1<<DDC5) | (1<<DDC4);
000853 b1e7      	IN   R30,0x7
000854 63e0      	ORI  R30,LOW(0x30)
000855 b9e7      	OUT  0x7,R30
                 ; 0004 0006 
                 ; 0004 0007 I2C_SCL = 1;
000856 9a45      	SBI  0x8,5
                 ; 0004 0008 I2C_SDA = 1;
000857 c00c      	RJMP _0x2000005
                 ; 0004 0009 }
                 ; .FEND
                 ;void I2C_Start(void){
                 ; 0004 000A void I2C_Start(void){
                 _I2C_Start:
                 ; .FSTART _I2C_Start
                 ; 0004 000B SDA_OUT();
000858 9a3c      	SBI  0x7,4
                 ; 0004 000C I2C_SCL = 1;
000859 9a45      	SBI  0x8,5
                 ; 0004 000D I2C_SDA = 1;
00085a 9a44      	SBI  0x8,4
                 ; 0004 000E delay_ms(1);
00085b d090      	RCALL SUBOPT_0x3
                 ; 0004 000F I2C_SDA = 0;
00085c 9844      	CBI  0x8,4
                 ; 0004 0010 delay_ms(1);
00085d c02f      	RJMP _0x2000004
                 ; 0004 0011 I2C_SCL = 0;
                 ; 0004 0012 }
                 ; .FEND
                 ;void I2C_Stop(void){
                 ; 0004 0014 void I2C_Stop(void){
                 _I2C_Stop:
                 ; .FSTART _I2C_Stop
                 ; 0004 0015 SDA_OUT();
00085e 9a3c      	SBI  0x7,4
                 ; 0004 0016 I2C_SCL = 0;
00085f 9845      	CBI  0x8,5
                 ; 0004 0017 I2C_SDA = 0;
000860 9844      	CBI  0x8,4
                 ; 0004 0018 delay_ms(1);
000861 d08a      	RCALL SUBOPT_0x3
                 ; 0004 0019 I2C_SCL = 1;
000862 9a45      	SBI  0x8,5
                 ; 0004 001A delay_ms(1);
000863 d088      	RCALL SUBOPT_0x3
                 ; 0004 001B I2C_SDA = 1;
                 _0x2000005:
000864 9a44      	SBI  0x8,4
                 ; 0004 001C }
000865 9508      	RET
                 ; .FEND
                 ;void I2C_Send_Byte(unsigned char txd){ // truyen tu bit cao den bit thap
                 ; 0004 0021 void I2C_Send_Byte(unsigned char txd){
                 _I2C_Send_Byte:
                 ; .FSTART _I2C_Send_Byte
                 ; 0004 0022 unsigned char i = 0;
                 ; 0004 0023 SDA_OUT();
000866 931a      	ST   -Y,R17
000867 930a      	ST   -Y,R16
000868 2f0a      	MOV  R16,R26
                 ;	txd -> R16
                 ;	i -> R17
000869 e010      	LDI  R17,0
00086a 9a3c      	SBI  0x7,4
                 ; 0004 0024 I2C_SCL = 0;
00086b 9845      	CBI  0x8,5
                 ; 0004 0025 for(i = 0; i < 8; i++){
00086c e010      	LDI  R17,LOW(0)
                 _0x8001A:
00086d 3018      	CPI  R17,8
00086e f498      	BRSH _0x8001B
                 ; 0004 0026 I2C_SDA = (txd & 0x80) >> 7;
00086f 2fe0      	MOV  R30,R16
000870 78e0      	ANDI R30,LOW(0x80)
000871 e0f0      	LDI  R31,0
000872 940e 0c9b 	CALL __ASRW3
000874 940e 0c99 	CALL __ASRW4
000876 30e0      	CPI  R30,0
000877 f411      	BRNE _0x8001C
000878 9844      	CBI  0x8,4
000879 c001      	RJMP _0x8001D
                 _0x8001C:
00087a 9a44      	SBI  0x8,4
                 _0x8001D:
                 ; 0004 0027 txd <<= 1;
00087b 0f00      	LSL  R16
                 ; 0004 0028 delay_ms(1);
00087c d06f      	RCALL SUBOPT_0x3
                 ; 0004 0029 I2C_SCL = 1;
00087d 9a45      	SBI  0x8,5
                 ; 0004 002A delay_ms(1);
00087e d06d      	RCALL SUBOPT_0x3
                 ; 0004 002B I2C_SCL = 0;
00087f 9845      	CBI  0x8,5
                 ; 0004 002C }
000880 5f1f      	SUBI R17,-1
000881 cfeb      	RJMP _0x8001A
                 _0x8001B:
                 ; 0004 002D }
000882 c043      	RJMP _0x2000001
                 ; .FEND
                 ;void I2C_Ack(void){
                 ; 0004 002F void I2C_Ack(void){
                 _I2C_Ack:
                 ; .FSTART _I2C_Ack
                 ; 0004 0030 SDA_OUT();
000883 9a3c      	SBI  0x7,4
                 ; 0004 0031 I2C_SDA = 0;
000884 9844      	CBI  0x8,4
                 ; 0004 0032 delay_ms(1);
000885 c002      	RJMP _0x2000003
                 ; 0004 0033 I2C_SCL = 1;
                 ; 0004 0034 delay_ms(1);
                 ; 0004 0035 I2C_SCL = 0;
                 ; 0004 0036 }
                 ; .FEND
                 ;void I2C_NAck(void){
                 ; 0004 0038 void I2C_NAck(void){
                 _I2C_NAck:
                 ; .FSTART _I2C_NAck
                 ; 0004 0039 SDA_OUT();
000886 9a3c      	SBI  0x7,4
                 ; 0004 003A I2C_SDA = 1;
000887 9a44      	SBI  0x8,4
                 ; 0004 003B delay_ms(1);
                 _0x2000003:
000888 e0a1      	LDI  R26,LOW(1)
000889 e0b0      	LDI  R27,0
00088a 940e 0e5c 	CALL _delay_ms
                 ; 0004 003C I2C_SCL = 1;
00088c 9a45      	SBI  0x8,5
                 ; 0004 003D delay_ms(1);
                 _0x2000004:
00088d e0a1      	LDI  R26,LOW(1)
00088e e0b0      	LDI  R27,0
00088f 940e 0e5c 	CALL _delay_ms
                 ; 0004 003E I2C_SCL = 0;
000891 9845      	CBI  0x8,5
                 ; 0004 003F }
000892 9508      	RET
                 ; .FEND
                 ;unsigned char I2C_Read_Byte(unsigned char ack){ // nhan tu bit cao den bit thap
                 ; 0004 0044 unsigned char I2C_Read_Byte(unsigned char ack){
                 _I2C_Read_Byte:
                 ; .FSTART _I2C_Read_Byte
                 ; 0004 0045 unsigned char i = 0;
                 ; 0004 0046 unsigned char dat = 0;
                 ; 0004 0047 SDA_OUT();
000893 d3da      	RCALL __SAVELOCR4
000894 2f3a      	MOV  R19,R26
                 ;	ack -> R19
                 ;	i -> R17
                 ;	dat -> R16
000895 e010      	LDI  R17,0
000896 e000      	LDI  R16,0
000897 9a3c      	SBI  0x7,4
                 ; 0004 0048 I2C_SDA = 1; // san sang nhan du lieu
000898 9a44      	SBI  0x8,4
                 ; 0004 0049 SDA_IN();
000899 983c      	CBI  0x7,4
                 ; 0004 004A I2C_SCL = 0;
00089a 9845      	CBI  0x8,5
                 ; 0004 004B for(i = 0; i < 8; i++){
00089b e010      	LDI  R17,LOW(0)
                 _0x80033:
00089c 3018      	CPI  R17,8
00089d f460      	BRSH _0x80034
                 ; 0004 004C READ_SDA = 1; // cho SDA = 1 de san sang nhan du lieu
00089e 9a34      	SBI  0x6,4
                 ; 0004 004D delay_ms(1);
00089f d04c      	RCALL SUBOPT_0x3
                 ; 0004 004E I2C_SCL = 1;
0008a0 9a45      	SBI  0x8,5
                 ; 0004 004F delay_ms(1);
0008a1 d04a      	RCALL SUBOPT_0x3
                 ; 0004 0050 dat <<= 1;
0008a2 0f00      	LSL  R16
                 ; 0004 0051 dat |= READ_SDA; // muon doc du lieu tu SDA
0008a3 e0e0      	LDI  R30,0
0008a4 9934      	SBIC 0x6,4
0008a5 e0e1      	LDI  R30,1
0008a6 2b0e      	OR   R16,R30
                 ; 0004 0052 I2C_SCL = 0;
0008a7 9845      	CBI  0x8,5
                 ; 0004 0053 }
0008a8 5f1f      	SUBI R17,-1
0008a9 cff2      	RJMP _0x80033
                 _0x80034:
                 ; 0004 0054 // SDA = 0 -> ACK
                 ; 0004 0055 // SDA = 1 -> NACK
                 ; 0004 0056 if(ack == 0){
0008aa 3030      	CPI  R19,0
0008ab f411      	BRNE _0x8003B
                 ; 0004 0057 I2C_Ack();
0008ac dfd6      	RCALL _I2C_Ack
                 ; 0004 0058 }
                 ; 0004 0059 else{
0008ad c001      	RJMP _0x8003C
                 _0x8003B:
                 ; 0004 005A I2C_NAck();
0008ae dfd7      	RCALL _I2C_NAck
                 ; 0004 005B }
                 _0x8003C:
                 ; 0004 005C return dat;
0008af 2fe0      	MOV  R30,R16
                 _0x2000002:
0008b0 d3c4      	RCALL __LOADLOCR4
0008b1 9624      	ADIW R28,4
0008b2 9508      	RET
                 ; 0004 005D }
                 ; .FEND
                 ;unsigned char I2C_Wait_Ack(void){
                 ; 0004 005F unsigned char I2C_Wait_Ack(void){
                 _I2C_Wait_Ack:
                 ; .FSTART _I2C_Wait_Ack
                 ; 0004 0060 unsigned char result = 0;
                 ; 0004 0061 unsigned char time = 0;
                 ; 0004 0062 SDA_IN();
0008b3 931a      	ST   -Y,R17
0008b4 930a      	ST   -Y,R16
                 ;	result -> R17
                 ;	time -> R16
0008b5 e010      	LDI  R17,0
0008b6 e000      	LDI  R16,0
0008b7 983c      	CBI  0x7,4
                 ; 0004 0063 I2C_SDA = 1;
0008b8 9a44      	SBI  0x8,4
                 ; 0004 0064 delay_ms(1);
0008b9 d032      	RCALL SUBOPT_0x3
                 ; 0004 0065 I2C_SCL = 1;
0008ba 9a45      	SBI  0x8,5
                 ; 0004 0066 delay_ms(1);
0008bb d030      	RCALL SUBOPT_0x3
                 ; 0004 0067 while(READ_SDA){ // muon doc du lieu tu SDA
                 _0x80041:
0008bc 9b34      	SBIS 0x6,4
0008bd c006      	RJMP _0x80043
                 ; 0004 0068 time++;
0008be 5f0f      	SUBI R16,-1
                 ; 0004 0069 if(time > 250){
0008bf 3f0b      	CPI  R16,251
0008c0 f010      	BRLO _0x80044
                 ; 0004 006A result = 1;
0008c1 e011      	LDI  R17,LOW(1)
                 ; 0004 006B break;
0008c2 c001      	RJMP _0x80043
                 ; 0004 006C }
                 ; 0004 006D }
                 _0x80044:
0008c3 cff8      	RJMP _0x80041
                 _0x80043:
                 ; 0004 006E I2C_SCL = 0;
0008c4 9845      	CBI  0x8,5
                 ; 0004 006F return result;
0008c5 2fe1      	MOV  R30,R17
                 _0x2000001:
0008c6 9109      	LD   R16,Y+
0008c7 9119      	LD   R17,Y+
0008c8 9508      	RET
                 ; 0004 0070 }
                 ; .FEND
                 
                 	.DSEG
                 _a_month:
000346           	.BYTE 0x1
                 _a_year:
000347           	.BYTE 0x1
                 _flag:
000348           	.BYTE 0x1
                 _dayOfWeek:
000349           	.BYTE 0xE
                 _dayOfMonth:
000357           	.BYTE 0x18
                 _change_mode:
00036f           	.BYTE 0x1
                 _address:
000370           	.BYTE 0x1
                 _do_am:
000371           	.BYTE 0x2
                 _nhiet_do:
000373           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0008c9 940e 0dca 	CALL __MULF12
0008cb 01df      	MOVW R26,R30
0008cc 01cb      	MOVW R24,R22
                +
0008cd e0e0     +LDI R30 , LOW ( 0x47800000 )
0008ce e0f0     +LDI R31 , HIGH ( 0x47800000 )
0008cf e860     +LDI R22 , BYTE3 ( 0x47800000 )
0008d0 e477     +LDI R23 , BYTE4 ( 0x47800000 )
                 	__GETD1N 0x47800000
0008d1 940e 0e18 	CALL __DIVF21
0008d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0008d4 940e 0d0f 	CALL __CFD1U
0008d6 93ed      	ST   X+,R30
0008d7 93fc      	ST   X,R31
0008d8 e0a1      	LDI  R26,LOW(1)
0008d9 e0b0      	LDI  R27,0
0008da 940c 0e5c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x2:
0008dc e0e5      	LDI  R30,LOW(5)
0008dd e0f0      	LDI  R31,HIGH(5)
0008de 93fa      	ST   -Y,R31
0008df 93ea      	ST   -Y,R30
0008e0 e0e8      	LDI  R30,LOW(8)
0008e1 e0f0      	LDI  R31,HIGH(8)
0008e2 93fa      	ST   -Y,R31
0008e3 93ea      	ST   -Y,R30
0008e4 e0e7      	LDI  R30,LOW(7)
0008e5 e0f0      	LDI  R31,HIGH(7)
0008e6 93fa      	ST   -Y,R31
0008e7 93ea      	ST   -Y,R30
0008e8 e0aa      	LDI  R26,LOW(10)
0008e9 e0b0      	LDI  R27,HIGH(10)
0008ea 940c 048a 	JMP  _DS1307_Get_Date
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3:
0008ec e0a1      	LDI  R26,LOW(1)
0008ed e0b0      	LDI  R27,0
0008ee 940c 0e5c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x4:
0008f0 e0e4      	LDI  R30,LOW(4)
0008f1 e0f0      	LDI  R31,HIGH(4)
0008f2 93fa      	ST   -Y,R31
0008f3 93ea      	ST   -Y,R30
0008f4 e0e3      	LDI  R30,LOW(3)
0008f5 e0f0      	LDI  R31,HIGH(3)
0008f6 93fa      	ST   -Y,R31
0008f7 93ea      	ST   -Y,R30
0008f8 e0e6      	LDI  R30,LOW(6)
0008f9 e0f0      	LDI  R31,HIGH(6)
0008fa 93fa      	ST   -Y,R31
0008fb 93ea      	ST   -Y,R30
0008fc e4a8      	LDI  R26,LOW(_flag)
0008fd e0b3      	LDI  R27,HIGH(_flag)
0008fe 940c 0449 	JMP  _DS1307_Get_Time
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5:
000900 e0e1      	LDI  R30,LOW(1)
000901 93ea      	ST   -Y,R30
000902 93ea      	ST   -Y,R30
000903 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:273 WORDS
                 SUBOPT_0x6:
000904 2da8      	MOV  R26,R8
000905 e0b0      	LDI  R27,0
000906 e0ea      	LDI  R30,LOW(10)
000907 e0f0      	LDI  R31,HIGH(10)
000908 940e 0cba 	CALL __DIVW21
00090a 5de0      	SUBI R30,-LOW(48)
00090b 2fae      	MOV  R26,R30
00090c 940e 07ea 	CALL _Lcd_Chr
00090e 2da8      	MOV  R26,R8
00090f 27bb      	CLR  R27
000910 e0ea      	LDI  R30,LOW(10)
000911 e0f0      	LDI  R31,HIGH(10)
000912 940e 0cc2 	CALL __MODW21
000914 5de0      	SUBI R30,-LOW(48)
000915 2fae      	MOV  R26,R30
000916 940e 07df 	CALL _Lcd_Chr_Cp
000918 e2af      	LDI  R26,LOW(47)
000919 940e 07df 	CALL _Lcd_Chr_Cp
00091b 2da7      	MOV  R26,R7
00091c e0b0      	LDI  R27,0
00091d e0ea      	LDI  R30,LOW(10)
00091e e0f0      	LDI  R31,HIGH(10)
00091f 940e 0cba 	CALL __DIVW21
000921 5de0      	SUBI R30,-LOW(48)
000922 2fae      	MOV  R26,R30
000923 940e 07df 	CALL _Lcd_Chr_Cp
000925 2da7      	MOV  R26,R7
000926 27bb      	CLR  R27
000927 e0ea      	LDI  R30,LOW(10)
000928 e0f0      	LDI  R31,HIGH(10)
000929 940e 0cc2 	CALL __MODW21
00092b 5de0      	SUBI R30,-LOW(48)
00092c 2fae      	MOV  R26,R30
00092d 940e 07df 	CALL _Lcd_Chr_Cp
00092f e2af      	LDI  R26,LOW(47)
000930 940e 07df 	CALL _Lcd_Chr_Cp
000932 2daa      	MOV  R26,R10
000933 e0b0      	LDI  R27,0
000934 e0ea      	LDI  R30,LOW(10)
000935 e0f0      	LDI  R31,HIGH(10)
000936 940e 0cba 	CALL __DIVW21
000938 5de0      	SUBI R30,-LOW(48)
000939 2fae      	MOV  R26,R30
00093a 940e 07df 	CALL _Lcd_Chr_Cp
00093c 2daa      	MOV  R26,R10
00093d 27bb      	CLR  R27
00093e e0ea      	LDI  R30,LOW(10)
00093f e0f0      	LDI  R31,HIGH(10)
000940 940e 0cc2 	CALL __MODW21
000942 5de0      	SUBI R30,-LOW(48)
000943 2fae      	MOV  R26,R30
000944 940e 07df 	CALL _Lcd_Chr_Cp
000946 e2a0      	LDI  R26,LOW(32)
000947 940e 07df 	CALL _Lcd_Chr_Cp
000949 2da5      	MOV  R26,R5
00094a 27bb      	CLR  R27
00094b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:75 WORDS
                 SUBOPT_0x7:
00094c e0e7      	LDI  R30,LOW(7)
00094d e0f0      	LDI  R31,HIGH(7)
00094e 940e 0cc2 	CALL __MODW21
000950 e4a9      	LDI  R26,LOW(_dayOfWeek)
000951 e0b3      	LDI  R27,HIGH(_dayOfWeek)
000952 0fee      	LSL  R30
000953 1fff      	ROL  R31
000954 0fae      	ADD  R26,R30
000955 1fbf      	ADC  R27,R31
000956 91ed      	LD   R30,X+
000957 91fd      	LD   R31,X+
000958 01df      	MOVW R26,R30
000959 940c 0800 	JMP  _Lcd_Out_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
00095b e0e2      	LDI  R30,LOW(2)
00095c 93ea      	ST   -Y,R30
00095d e0e1      	LDI  R30,LOW(1)
00095e 93ea      	ST   -Y,R30
00095f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0x9:
000960 2da6      	MOV  R26,R6
000961 e0b0      	LDI  R27,0
000962 e0ea      	LDI  R30,LOW(10)
000963 e0f0      	LDI  R31,HIGH(10)
000964 940e 0cba 	CALL __DIVW21
000966 5de0      	SUBI R30,-LOW(48)
000967 2fae      	MOV  R26,R30
000968 940e 07ea 	CALL _Lcd_Chr
00096a 2da6      	MOV  R26,R6
00096b 27bb      	CLR  R27
00096c e0ea      	LDI  R30,LOW(10)
00096d e0f0      	LDI  R31,HIGH(10)
00096e 940e 0cc2 	CALL __MODW21
000970 5de0      	SUBI R30,-LOW(48)
000971 2fae      	MOV  R26,R30
000972 940c 07df 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:177 WORDS
                 SUBOPT_0xA:
000974 2da3      	MOV  R26,R3
000975 e0b0      	LDI  R27,0
000976 e0ea      	LDI  R30,LOW(10)
000977 e0f0      	LDI  R31,HIGH(10)
000978 940e 0cba 	CALL __DIVW21
00097a 5de0      	SUBI R30,-LOW(48)
00097b 2fae      	MOV  R26,R30
00097c 940e 07df 	CALL _Lcd_Chr_Cp
00097e 2da3      	MOV  R26,R3
00097f 27bb      	CLR  R27
000980 e0ea      	LDI  R30,LOW(10)
000981 e0f0      	LDI  R31,HIGH(10)
000982 940e 0cc2 	CALL __MODW21
000984 5de0      	SUBI R30,-LOW(48)
000985 2fae      	MOV  R26,R30
000986 940e 07df 	CALL _Lcd_Chr_Cp
000988 e2a0      	LDI  R26,LOW(32)
000989 940e 07df 	CALL _Lcd_Chr_Cp
00098b e3aa      	LDI  R26,LOW(58)
00098c 940e 07df 	CALL _Lcd_Chr_Cp
00098e e2a0      	LDI  R26,LOW(32)
00098f 940e 07df 	CALL _Lcd_Chr_Cp
000991 2da4      	MOV  R26,R4
000992 e0b0      	LDI  R27,0
000993 e0ea      	LDI  R30,LOW(10)
000994 e0f0      	LDI  R31,HIGH(10)
000995 940e 0cba 	CALL __DIVW21
000997 5de0      	SUBI R30,-LOW(48)
000998 2fae      	MOV  R26,R30
000999 940e 07df 	CALL _Lcd_Chr_Cp
00099b 2da4      	MOV  R26,R4
00099c 27bb      	CLR  R27
00099d e0ea      	LDI  R30,LOW(10)
00099e e0f0      	LDI  R31,HIGH(10)
00099f 940e 0cc2 	CALL __MODW21
0009a1 5de0      	SUBI R30,-LOW(48)
0009a2 2fae      	MOV  R26,R30
0009a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
0009a4 91a0 0373 	LDS  R26,_nhiet_do
0009a6 91b0 0374 	LDS  R27,_nhiet_do+1
0009a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0009a9 e1e0      	LDI  R30,LOW(10000)
0009aa e2f7      	LDI  R31,HIGH(10000)
0009ab 940e 0ca7 	CALL __DIVW21U
0009ad 5de0      	SUBI R30,-LOW(48)
0009ae 2fae      	MOV  R26,R30
0009af 940c 07ea 	JMP  _Lcd_Chr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xD:
0009b1 eee8      	LDI  R30,LOW(1000)
0009b2 e0f3      	LDI  R31,HIGH(1000)
0009b3 940e 0ca7 	CALL __DIVW21U
0009b5 01df      	MOVW R26,R30
0009b6 e0ea      	LDI  R30,LOW(10)
0009b7 e0f0      	LDI  R31,HIGH(10)
0009b8 940e 0cbf 	CALL __MODW21U
0009ba 5de0      	SUBI R30,-LOW(48)
0009bb 2fae      	MOV  R26,R30
0009bc 940c 07df 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0009be 940e 07df 	CALL _Lcd_Chr_Cp
0009c0 cfe3      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
0009c1 e6e4      	LDI  R30,LOW(100)
0009c2 e0f0      	LDI  R31,HIGH(100)
0009c3 940e 0ca7 	CALL __DIVW21U
0009c5 01df      	MOVW R26,R30
0009c6 e0ea      	LDI  R30,LOW(10)
0009c7 e0f0      	LDI  R31,HIGH(10)
0009c8 940e 0cbf 	CALL __MODW21U
0009ca 5de0      	SUBI R30,-LOW(48)
0009cb 2fae      	MOV  R26,R30
0009cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x10:
0009cd e0ea      	LDI  R30,LOW(10)
0009ce e0f0      	LDI  R31,HIGH(10)
0009cf 940e 0ca7 	CALL __DIVW21U
0009d1 01df      	MOVW R26,R30
0009d2 e0ea      	LDI  R30,LOW(10)
0009d3 e0f0      	LDI  R31,HIGH(10)
0009d4 940e 0cbf 	CALL __MODW21U
0009d6 5de0      	SUBI R30,-LOW(48)
0009d7 2fae      	MOV  R26,R30
0009d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0009d9 e0ea      	LDI  R30,LOW(10)
0009da e0f0      	LDI  R31,HIGH(10)
0009db 940e 0cbf 	CALL __MODW21U
0009dd 5de0      	SUBI R30,-LOW(48)
0009de 2fae      	MOV  R26,R30
0009df 940c 07df 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
0009e1 91a0 0371 	LDS  R26,_do_am
0009e3 91b0 0372 	LDS  R27,_do_am+1
0009e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x13:
0009e6 920a      	ST   -Y,R0
0009e7 921a      	ST   -Y,R1
0009e8 92fa      	ST   -Y,R15
0009e9 936a      	ST   -Y,R22
0009ea 937a      	ST   -Y,R23
0009eb 938a      	ST   -Y,R24
0009ec 939a      	ST   -Y,R25
0009ed 93aa      	ST   -Y,R26
0009ee 93ba      	ST   -Y,R27
0009ef 93ea      	ST   -Y,R30
0009f0 93fa      	ST   -Y,R31
0009f1 b7ef      	IN   R30,SREG
0009f2 93ea      	ST   -Y,R30
0009f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x14:
0009f4 e1a4      	LDI  R26,LOW(20)
0009f5 e0b0      	LDI  R27,0
0009f6 940c 0e5c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
0009f8 d273      	RCALL __SAVELOCR6
                +
0009f9 e021     +LDI R18 , LOW ( 1 )
0009fa e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
0009fb e050      	LDI  R21,0
0009fc e14e      	LDI  R20,30
0009fd cff6      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0009fe e0e0      	LDI  R30,LOW(0)
0009ff 93e0 0348 	STS  _flag,R30
000a01 93e0 036f 	STS  _change_mode,R30
000a03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
000a04 940e 0800 	CALL _Lcd_Out_Cp
000a06 cf6d      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000a07 e8a0      	LDI  R26,LOW(128)
000a08 940e 07c6 	CALL _Lcd_Cmd
000a0a e0af      	LDI  R26,LOW(15)
000a0b 940e 07c6 	CALL _Lcd_Cmd
                +
000a0d e021     +LDI R18 , LOW ( 1 )
000a0e e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
000a0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
000a10 e050      	LDI  R21,LOW(0)
000a11 2fe2      	MOV  R30,R18
000a12 58e1      	SUBI R30,-LOW(127)
000a13 93e0 0370 	STS  _address,R30
000a15 91a0 0370 	LDS  R26,_address
000a17 940c 07c6 	JMP  _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1A:
000a19 e051      	LDI  R21,LOW(1)
000a1a 2fe2      	MOV  R30,R18
000a1b 54e1      	SUBI R30,-LOW(191)
000a1c 93e0 0370 	STS  _address,R30
000a1e 91a0 0370 	LDS  R26,_address
000a20 940c 07c6 	JMP  _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1B:
000a22 91a0 0370 	LDS  R26,_address
000a24 940c 07c6 	JMP  _Lcd_Cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
000a26 2de7      	MOV  R30,R7
000a27 e0f0      	LDI  R31,0
000a28 9731      	SBIW R30,1
000a29 e5a7      	LDI  R26,LOW(_dayOfMonth)
000a2a e0b3      	LDI  R27,HIGH(_dayOfMonth)
000a2b 0fee      	LSL  R30
000a2c 1fff      	ROL  R31
000a2d 0fae      	ADD  R26,R30
000a2e 1fbf      	ADC  R27,R31
000a2f 91ec      	LD   R30,X
000a30 5ee2      	SUBI R30,-LOW(30)
000a31 2f4e      	MOV  R20,R30
000a32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1D:
000a33 e0e5      	LDI  R30,LOW(5)
000a34 e0f0      	LDI  R31,HIGH(5)
000a35 93fa      	ST   -Y,R31
000a36 93ea      	ST   -Y,R30
000a37 e0e8      	LDI  R30,LOW(8)
000a38 e0f0      	LDI  R31,HIGH(8)
000a39 93fa      	ST   -Y,R31
000a3a 93ea      	ST   -Y,R30
000a3b e0e7      	LDI  R30,LOW(7)
000a3c e0f0      	LDI  R31,HIGH(7)
000a3d 93fa      	ST   -Y,R31
000a3e 93ea      	ST   -Y,R30
000a3f e0ea      	LDI  R30,LOW(10)
000a40 e0f0      	LDI  R31,HIGH(10)
000a41 93fa      	ST   -Y,R31
000a42 93ea      	ST   -Y,R30
000a43 934a      	ST   -Y,R20
000a44 933a      	ST   -Y,R19
000a45 932a      	ST   -Y,R18
000a46 01d8      	MOVW R26,R16
000a47 940e 04b8 	CALL _DS1307_Set_Date
000a49 ceb6      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1E:
000a4a e0e4      	LDI  R30,LOW(4)
000a4b e0f0      	LDI  R31,HIGH(4)
000a4c 93fa      	ST   -Y,R31
000a4d 93ea      	ST   -Y,R30
000a4e e0e3      	LDI  R30,LOW(3)
000a4f e0f0      	LDI  R31,HIGH(3)
000a50 93fa      	ST   -Y,R31
000a51 93ea      	ST   -Y,R30
000a52 e0e6      	LDI  R30,LOW(6)
000a53 e0f0      	LDI  R31,HIGH(6)
000a54 93fa      	ST   -Y,R31
000a55 93ea      	ST   -Y,R30
000a56 933a      	ST   -Y,R19
000a57 932a      	ST   -Y,R18
000a58 01d8      	MOVW R26,R16
000a59 940e 0638 	CALL _DS1307_Set_Time
000a5b ceff      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:105 WORDS
                 SUBOPT_0x1F:
000a5c 81ae      	LDD  R26,Y+6
000a5d e0b0      	LDI  R27,0
000a5e e0ea      	LDI  R30,LOW(10)
000a5f e0f0      	LDI  R31,HIGH(10)
000a60 940e 0cba 	CALL __DIVW21
000a62 83ef      	STD  Y+7,R30
000a63 95e2      	SWAP R30
000a64 7fe0      	ANDI R30,0xF0
000a65 83ef      	STD  Y+7,R30
000a66 81ae      	LDD  R26,Y+6
000a67 27bb      	CLR  R27
000a68 e0ea      	LDI  R30,LOW(10)
000a69 e0f0      	LDI  R31,HIGH(10)
000a6a 940e 0cc2 	CALL __MODW21
000a6c 81af      	LDD  R26,Y+7
000a6d 2bea      	OR   R30,R26
000a6e 83ef      	STD  Y+7,R30
000a6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000a70 93ea      	ST   -Y,R30
000a71 85a8      	LDD  R26,Y+8
000a72 940c 03ec 	JMP  _DS1307_Receive
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000a74 e0ac      	LDI  R26,LOW(12)
000a75 940e 07c6 	CALL _Lcd_Cmd
000a77 e0a1      	LDI  R26,LOW(1)
000a78 940e 07c6 	CALL _Lcd_Cmd
000a7a d1f8      	RCALL __LOADLOCR6
000a7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x22:
000a7c e0ee      	LDI  R30,LOW(14)
000a7d e0f0      	LDI  R31,HIGH(14)
000a7e 93fa      	ST   -Y,R31
000a7f 93ea      	ST   -Y,R30
000a80 e0ed      	LDI  R30,LOW(13)
000a81 e0f0      	LDI  R31,HIGH(13)
000a82 93fa      	ST   -Y,R31
000a83 93ea      	ST   -Y,R30
000a84 e4e6      	LDI  R30,LOW(_a_month)
000a85 e0f3      	LDI  R31,HIGH(_a_month)
000a86 93fa      	ST   -Y,R31
000a87 93ea      	ST   -Y,R30
000a88 e4e7      	LDI  R30,LOW(_a_year)
000a89 e0f3      	LDI  R31,HIGH(_a_year)
000a8a 93fa      	ST   -Y,R31
000a8b 93ea      	ST   -Y,R30
000a8c 934a      	ST   -Y,R20
000a8d 933a      	ST   -Y,R19
000a8e 932a      	ST   -Y,R18
000a8f 01d8      	MOVW R26,R16
000a90 940e 04b8 	CALL _DS1307_Set_Date
000a92 ce6d      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:70 WORDS
                 SUBOPT_0x23:
000a93 2dad      	MOV  R26,R13
000a94 e0b0      	LDI  R27,0
000a95 e0ea      	LDI  R30,LOW(10)
000a96 e0f0      	LDI  R31,HIGH(10)
000a97 940e 0cba 	CALL __DIVW21
000a99 5de0      	SUBI R30,-LOW(48)
000a9a 2fae      	MOV  R26,R30
000a9b 940e 07ea 	CALL _Lcd_Chr
000a9d 2dad      	MOV  R26,R13
000a9e 27bb      	CLR  R27
000a9f e0ea      	LDI  R30,LOW(10)
000aa0 e0f0      	LDI  R31,HIGH(10)
000aa1 940e 0cc2 	CALL __MODW21
000aa3 5de0      	SUBI R30,-LOW(48)
000aa4 2fae      	MOV  R26,R30
000aa5 940e 07df 	CALL _Lcd_Chr_Cp
000aa7 e2af      	LDI  R26,LOW(47)
000aa8 940e 07df 	CALL _Lcd_Chr_Cp
000aaa 91a0 0346 	LDS  R26,_a_month
000aac e0b0      	LDI  R27,0
000aad e0ea      	LDI  R30,LOW(10)
000aae e0f0      	LDI  R31,HIGH(10)
000aaf 940e 0cba 	CALL __DIVW21
000ab1 5de0      	SUBI R30,-LOW(48)
000ab2 2fae      	MOV  R26,R30
000ab3 940e 07df 	CALL _Lcd_Chr_Cp
000ab5 91a0 0346 	LDS  R26,_a_month
000ab7 27bb      	CLR  R27
000ab8 e0ea      	LDI  R30,LOW(10)
000ab9 e0f0      	LDI  R31,HIGH(10)
000aba 940e 0cc2 	CALL __MODW21
000abc 5de0      	SUBI R30,-LOW(48)
000abd 2fae      	MOV  R26,R30
000abe 940e 07df 	CALL _Lcd_Chr_Cp
000ac0 e2af      	LDI  R26,LOW(47)
000ac1 940e 07df 	CALL _Lcd_Chr_Cp
000ac3 91a0 0347 	LDS  R26,_a_year
000ac5 e0b0      	LDI  R27,0
000ac6 e0ea      	LDI  R30,LOW(10)
000ac7 e0f0      	LDI  R31,HIGH(10)
000ac8 940e 0cba 	CALL __DIVW21
000aca 5de0      	SUBI R30,-LOW(48)
000acb 2fae      	MOV  R26,R30
000acc 940e 07df 	CALL _Lcd_Chr_Cp
000ace 91a0 0347 	LDS  R26,_a_year
000ad0 27bb      	CLR  R27
000ad1 e0ea      	LDI  R30,LOW(10)
000ad2 e0f0      	LDI  R31,HIGH(10)
000ad3 940e 0cc2 	CALL __MODW21
000ad5 5de0      	SUBI R30,-LOW(48)
000ad6 2fae      	MOV  R26,R30
000ad7 940e 07df 	CALL _Lcd_Chr_Cp
000ad9 e2a0      	LDI  R26,LOW(32)
000ada 940e 07df 	CALL _Lcd_Chr_Cp
000adc 2dae      	MOV  R26,R14
000add 27bb      	CLR  R27
000ade 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x24:
000adf e0e9      	LDI  R30,LOW(9)
000ae0 e0f0      	LDI  R31,HIGH(9)
000ae1 93fa      	ST   -Y,R31
000ae2 93ea      	ST   -Y,R30
000ae3 e0ec      	LDI  R30,LOW(12)
000ae4 e0f0      	LDI  R31,HIGH(12)
000ae5 93fa      	ST   -Y,R31
000ae6 93ea      	ST   -Y,R30
000ae7 e0eb      	LDI  R30,LOW(11)
000ae8 e0f0      	LDI  R31,HIGH(11)
000ae9 93fa      	ST   -Y,R31
000aea 93ea      	ST   -Y,R30
000aeb 933a      	ST   -Y,R19
000aec 932a      	ST   -Y,R18
000aed 01d8      	MOVW R26,R16
000aee 940e 0638 	CALL _DS1307_Set_Time
000af0 ce6a      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x25:
000af1 2dab      	MOV  R26,R11
000af2 e0b0      	LDI  R27,0
000af3 e0ea      	LDI  R30,LOW(10)
000af4 e0f0      	LDI  R31,HIGH(10)
000af5 940e 0cba 	CALL __DIVW21
000af7 5de0      	SUBI R30,-LOW(48)
000af8 2fae      	MOV  R26,R30
000af9 940e 07ea 	CALL _Lcd_Chr
000afb 2dab      	MOV  R26,R11
000afc 27bb      	CLR  R27
000afd e0ea      	LDI  R30,LOW(10)
000afe e0f0      	LDI  R31,HIGH(10)
000aff 940e 0cc2 	CALL __MODW21
000b01 5de0      	SUBI R30,-LOW(48)
000b02 2fae      	MOV  R26,R30
000b03 940c 07df 	JMP  _Lcd_Chr_Cp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:47 WORDS
                 SUBOPT_0x26:
000b05 940e 0800 	CALL _Lcd_Out_Cp
000b07 2dac      	MOV  R26,R12
000b08 e0b0      	LDI  R27,0
000b09 e0ea      	LDI  R30,LOW(10)
000b0a e0f0      	LDI  R31,HIGH(10)
000b0b 940e 0cba 	CALL __DIVW21
000b0d 5de0      	SUBI R30,-LOW(48)
000b0e 2fae      	MOV  R26,R30
000b0f 940e 07df 	CALL _Lcd_Chr_Cp
000b11 2dac      	MOV  R26,R12
000b12 27bb      	CLR  R27
000b13 e0ea      	LDI  R30,LOW(10)
000b14 e0f0      	LDI  R31,HIGH(10)
000b15 940e 0cc2 	CALL __MODW21
000b17 5de0      	SUBI R30,-LOW(48)
000b18 2fae      	MOV  R26,R30
000b19 940e 07df 	CALL _Lcd_Chr_Cp
000b1b e2a0      	LDI  R26,LOW(32)
000b1c 940e 07df 	CALL _Lcd_Chr_Cp
000b1e e3aa      	LDI  R26,LOW(58)
000b1f 940e 07df 	CALL _Lcd_Chr_Cp
000b21 e2a0      	LDI  R26,LOW(32)
000b22 940e 07df 	CALL _Lcd_Chr_Cp
000b24 2da9      	MOV  R26,R9
000b25 e0b0      	LDI  R27,0
000b26 e0ea      	LDI  R30,LOW(10)
000b27 e0f0      	LDI  R31,HIGH(10)
000b28 940e 0cba 	CALL __DIVW21
000b2a 5de0      	SUBI R30,-LOW(48)
000b2b 2fae      	MOV  R26,R30
000b2c 940e 07df 	CALL _Lcd_Chr_Cp
000b2e 2da9      	MOV  R26,R9
000b2f 27bb      	CLR  R27
000b30 e0ea      	LDI  R30,LOW(10)
000b31 e0f0      	LDI  R31,HIGH(10)
000b32 940e 0cc2 	CALL __MODW21
000b34 5de0      	SUBI R30,-LOW(48)
000b35 2fae      	MOV  R26,R30
000b36 940e 07df 	CALL _Lcd_Chr_Cp
000b38 3050      	CPI  R21,0
000b39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x27:
000b3a dd1d      	RCALL _I2C_Start
000b3b eda0      	LDI  R26,LOW(208)
000b3c dd29      	RCALL _I2C_Send_Byte
000b3d dd75      	RCALL _I2C_Wait_Ack
000b3e 30e0      	CPI  R30,0
000b3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x28:
000b40 dd25      	RCALL _I2C_Send_Byte
000b41 cd71      	RJMP _I2C_Wait_Ack
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000b42 dd15      	RCALL _I2C_Start
000b43 eda1      	LDI  R26,LOW(209)
000b44 cffb      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2A:
000b45 2fe0      	MOV  R30,R16
000b46 95e2      	SWAP R30
000b47 70ef      	ANDI R30,0xF
000b48 e0aa      	LDI  R26,LOW(10)
000b49 02ea      	MULS R30,R26
000b4a 01f0      	MOVW R30,R0
000b4b 2fae      	MOV  R26,R30
000b4c 2fe0      	MOV  R30,R16
000b4d 70ef      	ANDI R30,LOW(0xF)
000b4e 0fea      	ADD  R30,R26
000b4f 2f1e      	MOV  R17,R30
000b50 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2B:
000b51 2fa1      	MOV  R26,R17
000b52 e0b0      	LDI  R27,0
000b53 e0ea      	LDI  R30,LOW(10)
000b54 e0f0      	LDI  R31,HIGH(10)
000b55 940e 0cba 	CALL __DIVW21
000b57 2f3e      	MOV  R19,R30
000b58 9532      	SWAP R19
000b59 7f30      	ANDI R19,0xF0
000b5a 2fa1      	MOV  R26,R17
000b5b 27bb      	CLR  R27
000b5c e0ea      	LDI  R30,LOW(10)
000b5d e0f0      	LDI  R31,HIGH(10)
000b5e 940e 0cc2 	CALL __MODW21
000b60 2f2e      	MOV  R18,R30
000b61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
000b62 e0a0      	LDI  R26,LOW(0)
000b63 dd2f      	RCALL _I2C_Read_Byte
000b64 2f1e      	MOV  R17,R30
000b65 e0a0      	LDI  R26,LOW(0)
000b66 dd2c      	RCALL _I2C_Read_Byte
000b67 2f0e      	MOV  R16,R30
000b68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2D:
000b69 95e2      	SWAP R30
000b6a 70ef      	ANDI R30,0xF
000b6b e0aa      	LDI  R26,LOW(10)
000b6c 02ea      	MULS R30,R26
000b6d 01f0      	MOVW R30,R0
000b6e 2fae      	MOV  R26,R30
000b6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2E:
000b70 85aa      	LDD  R26,Y+10
000b71 85bb      	LDD  R27,Y+10+1
000b72 93ec      	ST   X,R30
000b73 2fe0      	MOV  R30,R16
000b74 cff4      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2F:
000b75 2fe0      	MOV  R30,R16
000b76 70ef      	ANDI R30,LOW(0xF)
000b77 0fea      	ADD  R30,R26
000b78 85a8      	LDD  R26,Y+8
000b79 85b9      	LDD  R27,Y+8+1
000b7a 93ec      	ST   X,R30
000b7b 2fe3      	MOV  R30,R19
000b7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
000b7d 2fe3      	MOV  R30,R19
000b7e 70ef      	ANDI R30,LOW(0xF)
000b7f 0fea      	ADD  R30,R26
000b80 81ae      	LDD  R26,Y+6
000b81 81bf      	LDD  R27,Y+6+1
000b82 93ec      	ST   X,R30
000b83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
000b84 e0a1      	LDI  R26,LOW(1)
000b85 dd0d      	RCALL _I2C_Read_Byte
000b86 2f2e      	MOV  R18,R30
000b87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
000b88 e0e1      	LDI  R30,LOW(1)
000b89 e0f0      	LDI  R31,HIGH(1)
000b8a 17e2      	CP   R30,R18
000b8b 07f3      	CPC  R31,R19
000b8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
000b8d 85ad      	LDD  R26,Y+13
000b8e 85be      	LDD  R27,Y+13+1
000b8f 91ec      	LD   R30,X
000b90 e0f0      	LDI  R31,0
000b91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x34:
000b92 1be5      	SUB  R30,R21
000b93 85ad      	LDD  R26,Y+13
000b94 85be      	LDD  R27,Y+13+1
000b95 93ec      	ST   X,R30
000b96 85ab      	LDD  R26,Y+11
000b97 85bc      	LDD  R27,Y+11+1
000b98 91ec      	LD   R30,X
000b99 5fef      	SUBI R30,-LOW(1)
000b9a 93ec      	ST   X,R30
000b9b 91ac      	LD   R26,X
000b9c 30ad      	CPI  R26,LOW(0xD)
000b9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x35:
000b9e 85ab      	LDD  R26,Y+11
000b9f 85bc      	LDD  R27,Y+11+1
000ba0 e0e1      	LDI  R30,LOW(1)
000ba1 93ec      	ST   X,R30
000ba2 85a9      	LDD  R26,Y+9
000ba3 85ba      	LDD  R27,Y+9+1
000ba4 91ec      	LD   R30,X
000ba5 5fef      	SUBI R30,-LOW(1)
000ba6 93ec      	ST   X,R30
000ba7 91ac      	LD   R26,X
000ba8 36a4      	CPI  R26,LOW(0x64)
000ba9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x36:
000baa 85a9      	LDD  R26,Y+9
000bab 85ba      	LDD  R27,Y+9+1
000bac 91ec      	LD   R30,X
000bad 56e4      	SUBI R30,LOW(100)
000bae 93ec      	ST   X,R30
000baf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x37:
000bb0 e0e2      	LDI  R30,LOW(2)
000bb1 e0f0      	LDI  R31,HIGH(2)
000bb2 17e2      	CP   R30,R18
000bb3 07f3      	CPC  R31,R19
000bb4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
000bb5 85ab      	LDD  R26,Y+11
000bb6 85bc      	LDD  R27,Y+11+1
000bb7 91ec      	LD   R30,X
000bb8 e0f0      	LDI  R31,0
000bb9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x39:
000bba 85ab      	LDD  R26,Y+11
000bbb 85bc      	LDD  R27,Y+11+1
000bbc 93ec      	ST   X,R30
000bbd 85a9      	LDD  R26,Y+9
000bbe 85ba      	LDD  R27,Y+9+1
000bbf 91ec      	LD   R30,X
000bc0 5fef      	SUBI R30,-LOW(1)
000bc1 93ec      	ST   X,R30
000bc2 91ac      	LD   R26,X
000bc3 36a4      	CPI  R26,LOW(0x64)
000bc4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
000bc5 e0e7      	LDI  R30,LOW(7)
000bc6 e0f0      	LDI  R31,HIGH(7)
000bc7 17e2      	CP   R30,R18
000bc8 07f3      	CPC  R31,R19
000bc9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
000bca 85a9      	LDD  R26,Y+9
000bcb 85ba      	LDD  R27,Y+9+1
000bcc 91ec      	LD   R30,X
000bcd e0f0      	LDI  R31,0
000bce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3C:
000bcf 85af      	LDD  R26,Y+15
000bd0 89b8      	LDD  R27,Y+15+1
000bd1 01bd      	MOVW R22,R26
000bd2 91ac      	LD   R26,X
000bd3 27bb      	CLR  R27
000bd4 e0e7      	LDI  R30,LOW(7)
000bd5 e0f0      	LDI  R31,HIGH(7)
000bd6 940e 0cc2 	CALL __MODW21
000bd8 01db      	MOVW R26,R22
000bd9 93ec      	ST   X,R30
000bda 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3D:
000bdb 85ad      	LDD  R26,Y+13
000bdc 85be      	LDD  R27,Y+13+1
000bdd 93ec      	ST   X,R30
000bde 85ab      	LDD  R26,Y+11
000bdf 85bc      	LDD  R27,Y+11+1
000be0 91ec      	LD   R30,X
000be1 50e1      	SUBI R30,LOW(1)
000be2 93ec      	ST   X,R30
000be3 30e0      	CPI  R30,0
000be4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
000be5 85ab      	LDD  R26,Y+11
000be6 85bc      	LDD  R27,Y+11+1
000be7 e0ec      	LDI  R30,LOW(12)
000be8 93ec      	ST   X,R30
000be9 85a9      	LDD  R26,Y+9
000bea 85ba      	LDD  R27,Y+9+1
000beb 91ec      	LD   R30,X
000bec 30e0      	CPI  R30,0
000bed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
000bee 85a9      	LDD  R26,Y+9
000bef 85ba      	LDD  R27,Y+9+1
000bf0 e6e4      	LDI  R30,LOW(100)
000bf1 93ec      	ST   X,R30
000bf2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
000bf3 85a9      	LDD  R26,Y+9
000bf4 85ba      	LDD  R27,Y+9+1
000bf5 91ec      	LD   R30,X
000bf6 50e1      	SUBI R30,LOW(1)
000bf7 93ec      	ST   X,R30
000bf8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x41:
000bf9 91ec      	LD   R30,X
000bfa e0f0      	LDI  R31,0
000bfb 963a      	ADIW R30,10
000bfc 01df      	MOVW R26,R30
000bfd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
000bfe 91ec      	LD   R30,X
000bff e0f0      	LDI  R31,0
000c00 9631      	ADIW R30,1
000c01 01df      	MOVW R26,R30
000c02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x43:
000c03 85aa      	LDD  R26,Y+10
000c04 85bb      	LDD  R27,Y+10+1
000c05 91ec      	LD   R30,X
000c06 e0f0      	LDI  R31,0
000c07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x44:
000c08 e3ec      	LDI  R30,LOW(60)
000c09 e0f0      	LDI  R31,HIGH(60)
000c0a 940e 0cc2 	CALL __MODW21
000c0c 85aa      	LDD  R26,Y+10
000c0d 85bb      	LDD  R27,Y+10+1
000c0e 93ec      	ST   X,R30
000c0f 01da      	MOVW R26,R20
000c10 91ec      	LD   R30,X
000c11 5fef      	SUBI R30,-LOW(1)
000c12 93ec      	ST   X,R30
000c13 91ac      	LD   R26,X
000c14 31a8      	CPI  R26,LOW(0x18)
000c15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
000c16 85aa      	LDD  R26,Y+10
000c17 85bb      	LDD  R27,Y+10+1
000c18 91ec      	LD   R30,X
000c19 5fef      	SUBI R30,-LOW(1)
000c1a 93ec      	ST   X,R30
000c1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
000c1c 85ac      	LDD  R26,Y+12
000c1d 85bd      	LDD  R27,Y+12+1
000c1e 91ec      	LD   R30,X
000c1f e0f0      	LDI  R31,0
000c20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x47:
000c21 e3ec      	LDI  R30,LOW(60)
000c22 e0f0      	LDI  R31,HIGH(60)
000c23 940e 0cc2 	CALL __MODW21
000c25 85ac      	LDD  R26,Y+12
000c26 85bd      	LDD  R27,Y+12+1
000c27 93ec      	ST   X,R30
000c28 cfed      	RJMP SUBOPT_0x45
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x48:
000c29 85aa      	LDD  R26,Y+10
000c2a 85bb      	LDD  R27,Y+10+1
000c2b e0e0      	LDI  R30,LOW(0)
000c2c 93ec      	ST   X,R30
000c2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x49:
000c2e 01da      	MOVW R26,R20
000c2f 91ec      	LD   R30,X
000c30 5ee9      	SUBI R30,-LOW(23)
000c31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4A:
000c32 85aa      	LDD  R26,Y+10
000c33 85bb      	LDD  R27,Y+10+1
000c34 93ec      	ST   X,R30
000c35 01da      	MOVW R26,R20
000c36 91ec      	LD   R30,X
000c37 50e1      	SUBI R30,LOW(1)
000c38 93ec      	ST   X,R30
000c39 91ac      	LD   R26,X
000c3a 3faf      	CPI  R26,LOW(0xFF)
000c3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4B:
000c3c 01da      	MOVW R26,R20
000c3d e0e0      	LDI  R30,LOW(0)
000c3e 93ec      	ST   X,R30
000c3f cfee      	RJMP SUBOPT_0x49
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4C:
000c40 85aa      	LDD  R26,Y+10
000c41 85bb      	LDD  R27,Y+10+1
000c42 91ec      	LD   R30,X
000c43 5ce5      	SUBI R30,-LOW(59)
000c44 cfed      	RJMP SUBOPT_0x4A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4D:
000c45 85aa      	LDD  R26,Y+10
000c46 85bb      	LDD  R27,Y+10+1
000c47 91ec      	LD   R30,X
000c48 50e1      	SUBI R30,LOW(1)
000c49 93ec      	ST   X,R30
000c4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
000c4b e0a3      	LDI  R26,LOW(3)
000c4c 940e 078c 	CALL _Lcd_Write_Low_Nibble
000c4e 9a2a      	SBI  0x5,2
000c4f 982a      	CBI  0x5,2
000c50 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4F:
000c51 940e 078c 	CALL _Lcd_Write_Low_Nibble
000c53 9a2a      	SBI  0x5,2
000c54 982a      	CBI  0x5,2
000c55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
000c56 2fa1      	MOV  R26,R17
000c57 940e 0775 	CALL _Lcd_Write_High_Nibble
000c59 9a2a      	SBI  0x5,2
000c5a 982a      	CBI  0x5,2
000c5b 2fa1      	MOV  R26,R17
000c5c cff4      	RJMP SUBOPT_0x4F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x51:
000c5d d010      	RCALL __SAVELOCR4
                +
000c5e e000     +LDI R16 , LOW ( 0 )
000c5f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000c60 e020     +LDI R18 , LOW ( 0 )
000c61 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000c62 dbf5      	RCALL _I2C_Start
000c63 e8a0      	LDI  R26,LOW(128)
000c64 cedb      	RJMP SUBOPT_0x28
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x52:
000c65 e0a0      	LDI  R26,LOW(0)
000c66 dc2c      	RCALL _I2C_Read_Byte
000c67 2f0e      	MOV  R16,R30
000c68 2711      	CLR  R17
000c69 2f10      	MOV  R17,R16
000c6a 2700      	CLR  R16
000c6b cf18      	RJMP SUBOPT_0x31
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000c6c 935a      	ST   -Y,R21
                 __SAVELOCR5:
000c6d 934a      	ST   -Y,R20
                 __SAVELOCR4:
000c6e 933a      	ST   -Y,R19
                 __SAVELOCR3:
000c6f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000c70 931a      	ST   -Y,R17
000c71 930a      	ST   -Y,R16
000c72 9508      	RET
                 
                 __LOADLOCR6:
000c73 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000c74 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000c75 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000c76 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000c77 8119      	LDD  R17,Y+1
000c78 8108      	LD   R16,Y
000c79 9508      	RET
                 
                 __ANEGW1:
000c7a 95f1      	NEG  R31
000c7b 95e1      	NEG  R30
000c7c 40f0      	SBCI R31,0
000c7d 9508      	RET
                 
                 __ANEGD1:
000c7e 95f0      	COM  R31
000c7f 9560      	COM  R22
000c80 9570      	COM  R23
000c81 95e1      	NEG  R30
000c82 4fff      	SBCI R31,-1
000c83 4f6f      	SBCI R22,-1
000c84 4f7f      	SBCI R23,-1
000c85 9508      	RET
                 
                 __ASRW12:
000c86 23ee      	TST  R30
000c87 2e0e      	MOV  R0,R30
000c88 e0e8      	LDI  R30,8
000c89 2e1e      	MOV  R1,R30
000c8a 01fd      	MOVW R30,R26
000c8b f061      	BREQ __ASRW12R
                 __ASRW12S8:
000c8c 1401      	CP   R0,R1
000c8d f030      	BRLO __ASRW12L
000c8e 2fef      	MOV  R30,R31
000c8f e0f0      	LDI  R31,0
000c90 fde7      	SBRC R30,7
000c91 efff      	LDI  R31,0xFF
000c92 1801      	SUB  R0,R1
000c93 f021      	BREQ __ASRW12R
                 __ASRW12L:
000c94 95f5      	ASR  R31
000c95 95e7      	ROR  R30
000c96 940a      	DEC  R0
000c97 f7e1      	BRNE __ASRW12L
                 __ASRW12R:
000c98 9508      	RET
                 
                 __ASRW4:
000c99 95f5      	ASR  R31
000c9a 95e7      	ROR  R30
                 __ASRW3:
000c9b 95f5      	ASR  R31
000c9c 95e7      	ROR  R30
                 __ASRW2:
000c9d 95f5      	ASR  R31
000c9e 95e7      	ROR  R30
000c9f 95f5      	ASR  R31
000ca0 95e7      	ROR  R30
000ca1 9508      	RET
                 
                 __CWD1:
000ca2 2f6f      	MOV  R22,R31
000ca3 0f66      	ADD  R22,R22
000ca4 0b66      	SBC  R22,R22
000ca5 2f76      	MOV  R23,R22
000ca6 9508      	RET
                 
                 __DIVW21U:
000ca7 2400      	CLR  R0
000ca8 2411      	CLR  R1
000ca9 e190      	LDI  R25,16
                 __DIVW21U1:
000caa 0faa      	LSL  R26
000cab 1fbb      	ROL  R27
000cac 1c00      	ROL  R0
000cad 1c11      	ROL  R1
000cae 1a0e      	SUB  R0,R30
000caf 0a1f      	SBC  R1,R31
000cb0 f418      	BRCC __DIVW21U2
000cb1 0e0e      	ADD  R0,R30
000cb2 1e1f      	ADC  R1,R31
000cb3 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000cb4 60a1      	SBR  R26,1
                 __DIVW21U3:
000cb5 959a      	DEC  R25
000cb6 f799      	BRNE __DIVW21U1
000cb7 01fd      	MOVW R30,R26
000cb8 01d0      	MOVW R26,R0
000cb9 9508      	RET
                 
                 __DIVW21:
000cba d015      	RCALL __CHKSIGNW
000cbb dfeb      	RCALL __DIVW21U
000cbc f40e      	BRTC __DIVW211
000cbd dfbc      	RCALL __ANEGW1
                 __DIVW211:
000cbe 9508      	RET
                 
                 __MODW21U:
000cbf dfe7      	RCALL __DIVW21U
000cc0 01fd      	MOVW R30,R26
000cc1 9508      	RET
                 
                 __MODW21:
000cc2 94e8      	CLT
000cc3 ffb7      	SBRS R27,7
000cc4 c004      	RJMP __MODW211
000cc5 95b1      	NEG  R27
000cc6 95a1      	NEG  R26
000cc7 40b0      	SBCI R27,0
000cc8 9468      	SET
                 __MODW211:
000cc9 fdf7      	SBRC R31,7
000cca dfaf      	RCALL __ANEGW1
000ccb dfdb      	RCALL __DIVW21U
000ccc 01fd      	MOVW R30,R26
000ccd f40e      	BRTC __MODW212
000cce dfab      	RCALL __ANEGW1
                 __MODW212:
000ccf 9508      	RET
                 
                 __CHKSIGNW:
000cd0 94e8      	CLT
000cd1 fff7      	SBRS R31,7
000cd2 c002      	RJMP __CHKSW1
000cd3 dfa6      	RCALL __ANEGW1
000cd4 9468      	SET
                 __CHKSW1:
000cd5 ffb7      	SBRS R27,7
000cd6 c006      	RJMP __CHKSW2
000cd7 95b1      	NEG  R27
000cd8 95a1      	NEG  R26
000cd9 40b0      	SBCI R27,0
000cda f800      	BLD  R0,0
000cdb 9403      	INC  R0
000cdc fa00      	BST  R0,0
                 __CHKSW2:
000cdd 9508      	RET
                 
                 __CPW01:
000cde 2400      	CLR  R0
000cdf 160e      	CP   R0,R30
000ce0 060f      	CPC  R0,R31
000ce1 9508      	RET
                 
                 __ROUND_REPACK:
000ce2 2355      	TST  R21
000ce3 f442      	BRPL __REPACK
000ce4 3850      	CPI  R21,0x80
000ce5 f411      	BRNE __ROUND_REPACK0
000ce6 ffe0      	SBRS R30,0
000ce7 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000ce8 9631      	ADIW R30,1
000ce9 1f69      	ADC  R22,R25
000cea 1f79      	ADC  R23,R25
000ceb f06b      	BRVS __REPACK1
                 
                 __REPACK:
000cec e850      	LDI  R21,0x80
000ced 2757      	EOR  R21,R23
000cee f411      	BRNE __REPACK0
000cef 935f      	PUSH R21
000cf0 c0c8      	RJMP __ZERORES
                 __REPACK0:
000cf1 3f5f      	CPI  R21,0xFF
000cf2 f031      	BREQ __REPACK1
000cf3 0f66      	LSL  R22
000cf4 0c00      	LSL  R0
000cf5 9557      	ROR  R21
000cf6 9567      	ROR  R22
000cf7 2f75      	MOV  R23,R21
000cf8 9508      	RET
                 __REPACK1:
000cf9 935f      	PUSH R21
000cfa 2000      	TST  R0
000cfb f00a      	BRMI __REPACK2
000cfc c0c7      	RJMP __MAXRES
                 __REPACK2:
000cfd c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000cfe e850      	LDI  R21,0x80
000cff 2e19      	MOV  R1,R25
000d00 2215      	AND  R1,R21
000d01 0f88      	LSL  R24
000d02 1f99      	ROL  R25
000d03 2795      	EOR  R25,R21
000d04 0f55      	LSL  R21
000d05 9587      	ROR  R24
                 
                 __UNPACK1:
000d06 e850      	LDI  R21,0x80
000d07 2e07      	MOV  R0,R23
000d08 2205      	AND  R0,R21
000d09 0f66      	LSL  R22
000d0a 1f77      	ROL  R23
000d0b 2775      	EOR  R23,R21
000d0c 0f55      	LSL  R21
000d0d 9567      	ROR  R22
000d0e 9508      	RET
                 
                 __CFD1U:
000d0f 9468      	SET
000d10 c001      	RJMP __CFD1U0
                 __CFD1:
000d11 94e8      	CLT
                 __CFD1U0:
000d12 935f      	PUSH R21
000d13 dff2      	RCALL __UNPACK1
000d14 3870      	CPI  R23,0x80
000d15 f018      	BRLO __CFD10
000d16 3f7f      	CPI  R23,0xFF
000d17 f408      	BRCC __CFD10
000d18 c0a0      	RJMP __ZERORES
                 __CFD10:
000d19 e156      	LDI  R21,22
000d1a 1b57      	SUB  R21,R23
000d1b f4aa      	BRPL __CFD11
000d1c 9551      	NEG  R21
000d1d 3058      	CPI  R21,8
000d1e f40e      	BRTC __CFD19
000d1f 3059      	CPI  R21,9
                 __CFD19:
000d20 f030      	BRLO __CFD17
000d21 efef      	SER  R30
000d22 efff      	SER  R31
000d23 ef6f      	SER  R22
000d24 e77f      	LDI  R23,0x7F
000d25 f977      	BLD  R23,7
000d26 c01a      	RJMP __CFD15
                 __CFD17:
000d27 2777      	CLR  R23
000d28 2355      	TST  R21
000d29 f0b9      	BREQ __CFD15
                 __CFD18:
000d2a 0fee      	LSL  R30
000d2b 1fff      	ROL  R31
000d2c 1f66      	ROL  R22
000d2d 1f77      	ROL  R23
000d2e 955a      	DEC  R21
000d2f f7d1      	BRNE __CFD18
000d30 c010      	RJMP __CFD15
                 __CFD11:
000d31 2777      	CLR  R23
                 __CFD12:
000d32 3058      	CPI  R21,8
000d33 f028      	BRLO __CFD13
000d34 2fef      	MOV  R30,R31
000d35 2ff6      	MOV  R31,R22
000d36 2f67      	MOV  R22,R23
000d37 5058      	SUBI R21,8
000d38 cff9      	RJMP __CFD12
                 __CFD13:
000d39 2355      	TST  R21
000d3a f031      	BREQ __CFD15
                 __CFD14:
000d3b 9576      	LSR  R23
000d3c 9567      	ROR  R22
000d3d 95f7      	ROR  R31
000d3e 95e7      	ROR  R30
000d3f 955a      	DEC  R21
000d40 f7d1      	BRNE __CFD14
                 __CFD15:
000d41 2000      	TST  R0
000d42 f40a      	BRPL __CFD16
000d43 df3a      	RCALL __ANEGD1
                 __CFD16:
000d44 915f      	POP  R21
000d45 9508      	RET
                 
                 __CDF1U:
000d46 9468      	SET
000d47 c001      	RJMP __CDF1U0
                 __CDF1:
000d48 94e8      	CLT
                 __CDF1U0:
000d49 9730      	SBIW R30,0
000d4a 4060      	SBCI R22,0
000d4b 4070      	SBCI R23,0
000d4c f0b1      	BREQ __CDF10
000d4d 2400      	CLR  R0
000d4e f026      	BRTS __CDF11
000d4f 2377      	TST  R23
000d50 f412      	BRPL __CDF11
000d51 9400      	COM  R0
000d52 df2b      	RCALL __ANEGD1
                 __CDF11:
000d53 2e17      	MOV  R1,R23
000d54 e17e      	LDI  R23,30
000d55 2011      	TST  R1
                 __CDF12:
000d56 f032      	BRMI __CDF13
000d57 957a      	DEC  R23
000d58 0fee      	LSL  R30
000d59 1fff      	ROL  R31
000d5a 1f66      	ROL  R22
000d5b 1c11      	ROL  R1
000d5c cff9      	RJMP __CDF12
                 __CDF13:
000d5d 2fef      	MOV  R30,R31
000d5e 2ff6      	MOV  R31,R22
000d5f 2d61      	MOV  R22,R1
000d60 935f      	PUSH R21
000d61 df8a      	RCALL __REPACK
000d62 915f      	POP  R21
                 __CDF10:
000d63 9508      	RET
                 
                 __SWAPACC:
000d64 934f      	PUSH R20
000d65 01af      	MOVW R20,R30
000d66 01fd      	MOVW R30,R26
000d67 01da      	MOVW R26,R20
000d68 01ab      	MOVW R20,R22
000d69 01bc      	MOVW R22,R24
000d6a 01ca      	MOVW R24,R20
000d6b 2d40      	MOV  R20,R0
000d6c 2c01      	MOV  R0,R1
000d6d 2e14      	MOV  R1,R20
000d6e 914f      	POP  R20
000d6f 9508      	RET
                 
                 __UADD12:
000d70 0fea      	ADD  R30,R26
000d71 1ffb      	ADC  R31,R27
000d72 1f68      	ADC  R22,R24
000d73 9508      	RET
                 
                 __NEGMAN1:
000d74 95e0      	COM  R30
000d75 95f0      	COM  R31
000d76 9560      	COM  R22
000d77 5fef      	SUBI R30,-1
000d78 4fff      	SBCI R31,-1
000d79 4f6f      	SBCI R22,-1
000d7a 9508      	RET
                 
                 __ADDF12:
000d7b 935f      	PUSH R21
000d7c df81      	RCALL __UNPACK
000d7d 3890      	CPI  R25,0x80
000d7e f139      	BREQ __ADDF129
                 
                 __ADDF120:
000d7f 3870      	CPI  R23,0x80
000d80 f121      	BREQ __ADDF128
                 __ADDF121:
000d81 2f57      	MOV  R21,R23
000d82 1b59      	SUB  R21,R25
000d83 f12b      	BRVS __ADDF1211
000d84 f412      	BRPL __ADDF122
000d85 dfde      	RCALL __SWAPACC
000d86 cffa      	RJMP __ADDF121
                 __ADDF122:
000d87 3158      	CPI  R21,24
000d88 f018      	BRLO __ADDF123
000d89 27aa      	CLR  R26
000d8a 27bb      	CLR  R27
000d8b 2788      	CLR  R24
                 __ADDF123:
000d8c 3058      	CPI  R21,8
000d8d f028      	BRLO __ADDF124
000d8e 2fab      	MOV  R26,R27
000d8f 2fb8      	MOV  R27,R24
000d90 2788      	CLR  R24
000d91 5058      	SUBI R21,8
000d92 cff9      	RJMP __ADDF123
                 __ADDF124:
000d93 2355      	TST  R21
000d94 f029      	BREQ __ADDF126
                 __ADDF125:
000d95 9586      	LSR  R24
000d96 95b7      	ROR  R27
000d97 95a7      	ROR  R26
000d98 955a      	DEC  R21
000d99 f7d9      	BRNE __ADDF125
                 __ADDF126:
000d9a 2d50      	MOV  R21,R0
000d9b 2551      	EOR  R21,R1
000d9c f072      	BRMI __ADDF127
000d9d dfd2      	RCALL __UADD12
000d9e f438      	BRCC __ADDF129
000d9f 9567      	ROR  R22
000da0 95f7      	ROR  R31
000da1 95e7      	ROR  R30
000da2 9573      	INC  R23
000da3 f413      	BRVC __ADDF129
000da4 c01f      	RJMP __MAXRES
                 __ADDF128:
000da5 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000da6 df45      	RCALL __REPACK
000da7 915f      	POP  R21
000da8 9508      	RET
                 __ADDF1211:
000da9 f7d8      	BRCC __ADDF128
000daa cffb      	RJMP __ADDF129
                 __ADDF127:
000dab 1bea      	SUB  R30,R26
000dac 0bfb      	SBC  R31,R27
000dad 0b68      	SBC  R22,R24
000dae f051      	BREQ __ZERORES
000daf f410      	BRCC __ADDF1210
000db0 9400      	COM  R0
000db1 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000db2 2366      	TST  R22
000db3 f392      	BRMI __ADDF129
000db4 0fee      	LSL  R30
000db5 1fff      	ROL  R31
000db6 1f66      	ROL  R22
000db7 957a      	DEC  R23
000db8 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000db9 27ee      	CLR  R30
000dba 27ff      	CLR  R31
000dbb 01bf      	MOVW R22,R30
000dbc 915f      	POP  R21
000dbd 9508      	RET
                 
                 __MINRES:
000dbe efef      	SER  R30
000dbf efff      	SER  R31
000dc0 e76f      	LDI  R22,0x7F
000dc1 ef7f      	SER  R23
000dc2 915f      	POP  R21
000dc3 9508      	RET
                 
                 __MAXRES:
000dc4 efef      	SER  R30
000dc5 efff      	SER  R31
000dc6 e76f      	LDI  R22,0x7F
000dc7 e77f      	LDI  R23,0x7F
000dc8 915f      	POP  R21
000dc9 9508      	RET
                 
                 __MULF12:
000dca 935f      	PUSH R21
000dcb df32      	RCALL __UNPACK
000dcc 3870      	CPI  R23,0x80
000dcd f359      	BREQ __ZERORES
000dce 3890      	CPI  R25,0x80
000dcf f349      	BREQ __ZERORES
000dd0 2401      	EOR  R0,R1
000dd1 9408      	SEC
000dd2 1f79      	ADC  R23,R25
000dd3 f423      	BRVC __MULF124
000dd4 f324      	BRLT __ZERORES
                 __MULF125:
000dd5 2000      	TST  R0
000dd6 f33a      	BRMI __MINRES
000dd7 cfec      	RJMP __MAXRES
                 __MULF124:
000dd8 920f      	PUSH R0
000dd9 931f      	PUSH R17
000dda 932f      	PUSH R18
000ddb 933f      	PUSH R19
000ddc 934f      	PUSH R20
000ddd 2711      	CLR  R17
000dde 2722      	CLR  R18
000ddf 2799      	CLR  R25
000de0 9f68      	MUL  R22,R24
000de1 01a0      	MOVW R20,R0
000de2 9f8f      	MUL  R24,R31
000de3 2d30      	MOV  R19,R0
000de4 0d41      	ADD  R20,R1
000de5 1f59      	ADC  R21,R25
000de6 9f6b      	MUL  R22,R27
000de7 0d30      	ADD  R19,R0
000de8 1d41      	ADC  R20,R1
000de9 1f59      	ADC  R21,R25
000dea 9f8e      	MUL  R24,R30
000deb d027      	RCALL __MULF126
000dec 9fbf      	MUL  R27,R31
000ded d025      	RCALL __MULF126
000dee 9f6a      	MUL  R22,R26
000def d023      	RCALL __MULF126
000df0 9fbe      	MUL  R27,R30
000df1 d01d      	RCALL __MULF127
000df2 9faf      	MUL  R26,R31
000df3 d01b      	RCALL __MULF127
000df4 9fae      	MUL  R26,R30
000df5 0d11      	ADD  R17,R1
000df6 1f29      	ADC  R18,R25
000df7 1f39      	ADC  R19,R25
000df8 1f49      	ADC  R20,R25
000df9 1f59      	ADC  R21,R25
000dfa 2fe3      	MOV  R30,R19
000dfb 2ff4      	MOV  R31,R20
000dfc 2f65      	MOV  R22,R21
000dfd 2f52      	MOV  R21,R18
000dfe 914f      	POP  R20
000dff 913f      	POP  R19
000e00 912f      	POP  R18
000e01 911f      	POP  R17
000e02 900f      	POP  R0
000e03 2366      	TST  R22
000e04 f02a      	BRMI __MULF122
000e05 0f55      	LSL  R21
000e06 1fee      	ROL  R30
000e07 1fff      	ROL  R31
000e08 1f66      	ROL  R22
000e09 c002      	RJMP __MULF123
                 __MULF122:
000e0a 9573      	INC  R23
000e0b f24b      	BRVS __MULF125
                 __MULF123:
000e0c ded5      	RCALL __ROUND_REPACK
000e0d 915f      	POP  R21
000e0e 9508      	RET
                 
                 __MULF127:
000e0f 0d10      	ADD  R17,R0
000e10 1d21      	ADC  R18,R1
000e11 1f39      	ADC  R19,R25
000e12 c002      	RJMP __MULF128
                 __MULF126:
000e13 0d20      	ADD  R18,R0
000e14 1d31      	ADC  R19,R1
                 __MULF128:
000e15 1f49      	ADC  R20,R25
000e16 1f59      	ADC  R21,R25
000e17 9508      	RET
                 
                 __DIVF21:
000e18 935f      	PUSH R21
000e19 dee4      	RCALL __UNPACK
000e1a 3870      	CPI  R23,0x80
000e1b f421      	BRNE __DIVF210
000e1c 2011      	TST  R1
                 __DIVF211:
000e1d f40a      	BRPL __DIVF219
000e1e cf9f      	RJMP __MINRES
                 __DIVF219:
000e1f cfa4      	RJMP __MAXRES
                 __DIVF210:
000e20 3890      	CPI  R25,0x80
000e21 f409      	BRNE __DIVF218
                 __DIVF217:
000e22 cf96      	RJMP __ZERORES
                 __DIVF218:
000e23 2401      	EOR  R0,R1
000e24 9408      	SEC
000e25 0b97      	SBC  R25,R23
000e26 f41b      	BRVC __DIVF216
000e27 f3d4      	BRLT __DIVF217
000e28 2000      	TST  R0
000e29 cff3      	RJMP __DIVF211
                 __DIVF216:
000e2a 2f79      	MOV  R23,R25
000e2b 931f      	PUSH R17
000e2c 932f      	PUSH R18
000e2d 933f      	PUSH R19
000e2e 934f      	PUSH R20
000e2f 2411      	CLR  R1
000e30 2711      	CLR  R17
000e31 2722      	CLR  R18
000e32 2733      	CLR  R19
000e33 01a9      	MOVW R20,R18
000e34 e290      	LDI  R25,32
                 __DIVF212:
000e35 17ae      	CP   R26,R30
000e36 07bf      	CPC  R27,R31
000e37 0786      	CPC  R24,R22
000e38 0741      	CPC  R20,R17
000e39 f030      	BRLO __DIVF213
000e3a 1bae      	SUB  R26,R30
000e3b 0bbf      	SBC  R27,R31
000e3c 0b86      	SBC  R24,R22
000e3d 0b41      	SBC  R20,R17
000e3e 9408      	SEC
000e3f c001      	RJMP __DIVF214
                 __DIVF213:
000e40 9488      	CLC
                 __DIVF214:
000e41 1f55      	ROL  R21
000e42 1f22      	ROL  R18
000e43 1f33      	ROL  R19
000e44 1c11      	ROL  R1
000e45 1faa      	ROL  R26
000e46 1fbb      	ROL  R27
000e47 1f88      	ROL  R24
000e48 1f44      	ROL  R20
000e49 959a      	DEC  R25
000e4a f751      	BRNE __DIVF212
000e4b 01f9      	MOVW R30,R18
000e4c 2d61      	MOV  R22,R1
000e4d 914f      	POP  R20
000e4e 913f      	POP  R19
000e4f 912f      	POP  R18
000e50 911f      	POP  R17
000e51 2366      	TST  R22
000e52 f032      	BRMI __DIVF215
000e53 0f55      	LSL  R21
000e54 1fee      	ROL  R30
000e55 1fff      	ROL  R31
000e56 1f66      	ROL  R22
000e57 957a      	DEC  R23
000e58 f24b      	BRVS __DIVF217
                 __DIVF215:
000e59 de88      	RCALL __ROUND_REPACK
000e5a 915f      	POP  R21
000e5b 9508      	RET
                 
                 _delay_ms:
000e5c 9610      	adiw r26,0
000e5d f039      	breq __delay_ms1
                 __delay_ms0:
000e5e 95a8      	wdr
                +
000e5f ea80     +LDI R24 , LOW ( 0xFA0 )
000e60 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000e61 9701     +SBIW R24 , 1
000e62 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000e63 9711      	sbiw r26,1
000e64 f7c9      	brne __delay_ms0
                 __delay_ms1:
000e65 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  51 r1 :  30 r2 :   0 r3 :   4 r4 :   4 r5 :   3 r6 :   4 r7 :   5 
r8 :   4 r9 :   3 r10:   4 r11:   3 r12:   3 r13:   3 r14:   2 r15:   2 
r16:  63 r17:  86 r18: 100 r19:  78 r20:  50 r21:  86 r22:  55 r23:  42 
r24:  45 r25:  39 r26: 365 r27: 175 r28:  10 r29:   1 r30: 788 r31: 198 
x  : 151 y  : 285 z  :   7 
Registers used: 34 out of 35 (97.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  22 
adiw  :  16 and   :   2 andi  :  28 asr   :   5 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  23 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :  24 brmi  :   7 brne  :  95 brpl  :  10 brsh  :   3 brtc  :   3 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  : 407 
cbi   :  30 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  51 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :  24 cpc   :  39 cpi   :  82 cpse  :   0 dec   :  14 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  44 ld    :  99 ldd   : 175 ldi   : 459 
lds   :  19 lpm   :   7 lsl   :  16 lsr   :   6 mov   : 173 movw  :  64 
mul   :   9 muls  :   2 mulsu :   0 neg   :   8 nop   :   0 or    :   7 
ori   :   3 out   :  24 pop   :  18 push  :  17 rcall :  77 ret   :  92 
reti  :   1 rjmp  : 198 rol   :  29 ror   :  17 sbc   :   8 sbci  :  14 
sbi   :  32 sbic  :  19 sbis  :  18 sbiw  :  29 sbr   :   1 sbrc  :  10 
sbrs  :   4 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 152 std   :  10 sts   :  49 sub   :   7 subi  : 124 swap  :   7 
tst   :  19 wdr   :   1 
Instructions used: 80 out of 116 (69.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001ccc   7154    218   7372   32768  22.5%
[.dseg] 0x000100 0x000375      0    117    117    2048   5.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 15 warnings
